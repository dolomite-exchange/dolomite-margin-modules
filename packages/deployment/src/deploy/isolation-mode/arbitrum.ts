import {
  D_ARB_MAP,
  D_GLV_BTC_MAP,
  D_GLV_ETH_MAP,
  D_GM_AAVE_USD_MAP,
  D_GM_ARB_USD_MAP,
  D_GM_BTC_MAP,
  D_GM_BTC_USD_MAP,
  D_GM_DOGE_USD_MAP,
  D_GM_ETH_MAP,
  D_GM_ETH_USD_MAP,
  D_GM_GMX_MAP,
  D_GM_GMX_USD_MAP,
  D_GM_LINK_USD_MAP,
  D_GM_PENDLE_USD_MAP,
  D_GM_PEPE_USD_MAP,
  D_GM_SOL_USD_MAP,
  D_GM_UNI_USD_MAP,
  D_GM_WIF_USD_MAP,
  D_GM_WST_ETH_USD_MAP,
  D_GMX_MAP,
  DFS_GLP_MAP,
  DJ_USDC_V1,
  DJ_USDC_V2,
  DPLV_GLP_MAP,
  DPT_EZ_ETH_JUN_2024_MAP,
  DPT_EZ_ETH_SEP_2024_MAP,
  DPT_GLP_MAR_2024_MAP,
  DPT_GLP_SEP_2024_MAP,
  DPT_R_ETH_JUN_2025_MAP,
  DPT_RS_ETH_DEC_2024_MAP,
  DPT_RS_ETH_SEP_2024_MAP,
  DPT_WE_ETH_APR_2024_MAP,
  DPT_WE_ETH_DEC_2024_MAP,
  DPT_WE_ETH_JUN_2024_MAP,
  DPT_WE_ETH_SEP_2024_MAP,
  DPT_WST_ETH_JUN_2024_MAP,
  DPT_WST_ETH_JUN_2025_MAP,
  DYT_GLP_2024_MAP,
} from 'packages/base/src/utils/constants';
import { Network } from 'packages/base/src/utils/no-deps-constants';
import { getMaxDeploymentVersionAddressByDeploymentKey } from '../../utils/deploy-utils';
import {
  DeployedVaultInformation,
  getConstructorParametersForAsyncIsolationMode,
  getIsolationModeLibrariesByType,
  IsolationModeVaultType,
} from './isolation-mode-helpers';

const network = Network.ArbitrumOne;

const GMX_V2_TOKEN_VAULT_RENAME = 'GmxV2IsolationModeTokenVaultImplementation';

export const marketToIsolationModeVaultInfoArbitrumOne: Record<number, DeployedVaultInformation> = {
  [DFS_GLP_MAP[network].marketId]: {
    contractName: 'GLPIsolationModeTokenVaultV2',
    contractRenameWithoutVersion: 'GLPIsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey('GLPIsolationModeTokenVault', network),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.None),
    vaultType: IsolationModeVaultType.None,
    tokenAddress: DFS_GLP_MAP[network].address,
  },
  [DPLV_GLP_MAP[network].marketId]: {
    contractName: 'PlutusVaultGLPIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PlutusVaultGLPIsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PlutusVaultGLPIsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.None),
    vaultType: IsolationModeVaultType.None,
    tokenAddress: DPLV_GLP_MAP[network].address,
  },
  [DJ_USDC_V1[network].marketId]: {
    contractName: 'JonesIsolationModeTokenVaultMigrator',
    contractRenameWithoutVersion: 'JonesIsolationModeTokenVaultMigrator',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'JonesIsolationModeTokenVaultMigrator',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Migrator),
    vaultType: IsolationModeVaultType.Migrator,
    tokenAddress: DJ_USDC_V1[network].address,
  },
  [DPT_GLP_MAR_2024_MAP[network].marketId]: {
    contractName: 'PendlePtGLPMar2024IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtGLPMar2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtGLPMar2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_GLP_MAR_2024_MAP[network].address,
  },
  [DYT_GLP_2024_MAP[network].marketId]: {
    contractName: 'PendleYtGLPMar2024IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendleYtGLPMar2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendleYtGLPMar2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Yt),
    vaultType: IsolationModeVaultType.Yt,
    tokenAddress: DYT_GLP_2024_MAP[network].address,
  },
  [DPT_R_ETH_JUN_2025_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtREthJun2025IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtREthJun2025IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_R_ETH_JUN_2025_MAP[network].address,
  },
  [DPT_WST_ETH_JUN_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtWstEthJun2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtWstEthJun2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_WST_ETH_JUN_2024_MAP[network].address,
  },
  [DPT_WST_ETH_JUN_2025_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtWstEthJun2025IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtWstEthJun2025IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_WST_ETH_JUN_2025_MAP[network].address,
  },
  [D_ARB_MAP[network].marketId]: {
    contractName: 'ARBIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'ARBIsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey('ARBIsolationModeTokenVault', network),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.None),
    vaultType: IsolationModeVaultType.None,
    tokenAddress: D_ARB_MAP[network].address,
  },
  [D_GMX_MAP[network].marketId]: {
    contractName: 'GMXIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'GMXIsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey('GMXIsolationModeTokenVault', network),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.None),
    vaultType: IsolationModeVaultType.None,
    tokenAddress: D_GMX_MAP[network].address,
  },
  [D_GM_ARB_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_ARB_USD_MAP[network].address,
  },
  [D_GM_BTC_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_BTC_USD_MAP[network].address,
  },
  [D_GM_ETH_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_ETH_USD_MAP[network].address,
  },
  [D_GM_LINK_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_LINK_USD_MAP[network].address,
  },
  [DPT_WE_ETH_APR_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtWeETHApr2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtWeETHApr2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_WE_ETH_APR_2024_MAP[network].address,
  },
  [DPT_EZ_ETH_JUN_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtEzETHJun2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtEzETHJun2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_EZ_ETH_JUN_2024_MAP[network].address,
  },
  [DPT_GLP_SEP_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtGLPSep2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtGLPSep2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_GLP_SEP_2024_MAP[network].address,
  },
  [DPT_WE_ETH_JUN_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtWeETHJun2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtWeETHJun2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_WE_ETH_JUN_2024_MAP[network].address,
  },
  [DJ_USDC_V2[network].marketId]: {
    contractName: 'JonesUSDCIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'JonesUSDCV2IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey('JonesUSDCV2IsolationModeTokenVault', network),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.None),
    vaultType: IsolationModeVaultType.None,
    tokenAddress: DJ_USDC_V2[network].address,
  },
  [D_GM_BTC_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_BTC_MAP[network].address,
  },
  [D_GM_ETH_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_ETH_MAP[network].address,
  },
  [D_GM_UNI_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_UNI_USD_MAP[network].address,
  },
  [DPT_WE_ETH_SEP_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtWeETHSep2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtWeETHSep2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_WE_ETH_SEP_2024_MAP[network].address,
  },
  [DPT_EZ_ETH_SEP_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtEzETHSep2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtEzETHSep2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_EZ_ETH_SEP_2024_MAP[network].address,
  },
  [DPT_RS_ETH_SEP_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtRsETHSep2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtRsETHSep2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_RS_ETH_SEP_2024_MAP[network].address,
  },
  [D_GM_AAVE_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_AAVE_USD_MAP[network].address,
  },
  [D_GM_DOGE_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_DOGE_USD_MAP[network].address,
  },
  [D_GM_GMX_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV2', // TODO: do the others?
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_GMX_USD_MAP[network].address,
  },
  [D_GM_SOL_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_SOL_USD_MAP[network].address,
  },
  [D_GM_WST_ETH_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_WST_ETH_USD_MAP[network].address,
  },
  [DPT_WE_ETH_DEC_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtWeETHDec2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtWeETHDec2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_WE_ETH_DEC_2024_MAP[network].address,
  },
  [DPT_RS_ETH_DEC_2024_MAP[network].marketId]: {
    contractName: 'PendlePtIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'PendlePtRsETHDec2024IsolationModeTokenVault',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'PendlePtRsETHDec2024IsolationModeTokenVault',
      network,
    ),
    constructorParams: [],
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.Pt),
    vaultType: IsolationModeVaultType.Pt,
    tokenAddress: DPT_RS_ETH_DEC_2024_MAP[network].address,
  },
  [D_GM_GMX_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_GMX_MAP[network].address,
  },
  [D_GM_PENDLE_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_PENDLE_USD_MAP[network].address,
  },
  [D_GM_PEPE_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_PEPE_USD_MAP[network].address,
  },
  [D_GM_WIF_USD_MAP[network].marketId]: {
    contractName: 'GmxV2IsolationModeTokenVaultV1',
    contractRenameWithoutVersion: GMX_V2_TOKEN_VAULT_RENAME,
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      GMX_V2_TOKEN_VAULT_RENAME,
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GmxV2),
    vaultType: IsolationModeVaultType.GmxV2,
    tokenAddress: D_GM_WIF_USD_MAP[network].address,
  },
  [D_GLV_BTC_MAP[network].marketId]: {
    contractName: 'GlvIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'GlvIsolationModeTokenVaultImplementation',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'GlvIsolationModeTokenVaultImplementation',
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GLV),
    vaultType: IsolationModeVaultType.GLV,
    tokenAddress: D_GLV_BTC_MAP[network].address,
  },
  [D_GLV_ETH_MAP[network].marketId]: {
    contractName: 'GlvIsolationModeTokenVaultV1',
    contractRenameWithoutVersion: 'GlvIsolationModeTokenVaultImplementation',
    implementationAddress: getMaxDeploymentVersionAddressByDeploymentKey(
      'GlvIsolationModeTokenVaultImplementation',
      network,
    ),
    constructorParams: getConstructorParametersForAsyncIsolationMode(network),
    libraries: getIsolationModeLibrariesByType(IsolationModeVaultType.GLV),
    vaultType: IsolationModeVaultType.GLV,
    tokenAddress: D_GLV_ETH_MAP[network].address,
  },
};
