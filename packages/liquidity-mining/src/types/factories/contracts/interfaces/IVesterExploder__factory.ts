/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IVesterExploder,
  IVesterExploderInterface,
} from "../../../contracts/interfaces/IVesterExploder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_handler",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_isHandler",
        type: "bool",
      },
    ],
    name: "HandlerSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "explodePosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_handler",
        type: "address",
      },
    ],
    name: "isHandler",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_handler",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isHandler",
        type: "bool",
      },
    ],
    name: "ownerSetIsHandler",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IVesterExploder__factory {
  static readonly abi = _abi;
  static createInterface(): IVesterExploderInterface {
    return new utils.Interface(_abi) as IVesterExploderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVesterExploder {
    return new Contract(address, _abi, signerOrProvider) as IVesterExploder;
  }
}
