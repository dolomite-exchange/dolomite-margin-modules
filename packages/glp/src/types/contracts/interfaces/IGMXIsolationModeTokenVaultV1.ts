/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IGMXIsolationModeTokenVaultV1Interface
  extends utils.Interface {
  functions: {
    "isDepositSourceGLPVault()": FunctionFragment;
    "setIsDepositSourceGLPVault(bool)": FunctionFragment;
    "setShouldSkipTransfer(bool)": FunctionFragment;
    "shouldSkipTransfer()": FunctionFragment;
    "stakeGmx(uint256)": FunctionFragment;
    "unstakeGmx(uint256)": FunctionFragment;
    "unvestGmx(bool)": FunctionFragment;
    "vestGmx(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isDepositSourceGLPVault"
      | "setIsDepositSourceGLPVault"
      | "setShouldSkipTransfer"
      | "shouldSkipTransfer"
      | "stakeGmx"
      | "unstakeGmx"
      | "unvestGmx"
      | "vestGmx"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isDepositSourceGLPVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsDepositSourceGLPVault",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldSkipTransfer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldSkipTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unvestGmx", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "vestGmx",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "isDepositSourceGLPVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsDepositSourceGLPVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldSkipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldSkipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unvestGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vestGmx", data: BytesLike): Result;

  events: {};
}

export interface IGMXIsolationModeTokenVaultV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGMXIsolationModeTokenVaultV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isDepositSourceGLPVault(overrides?: CallOverrides): Promise<[boolean]>;

    setIsDepositSourceGLPVault(
      _isDepositSourceGLPVault: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setShouldSkipTransfer(
      _shouldSkipTransfer: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    shouldSkipTransfer(overrides?: CallOverrides): Promise<[boolean]>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unvestGmx(
      _shouldStakeGmx: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vestGmx(
      _esGmxAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  isDepositSourceGLPVault(overrides?: CallOverrides): Promise<boolean>;

  setIsDepositSourceGLPVault(
    _isDepositSourceGLPVault: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setShouldSkipTransfer(
    _shouldSkipTransfer: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  shouldSkipTransfer(overrides?: CallOverrides): Promise<boolean>;

  stakeGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unvestGmx(
    _shouldStakeGmx: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vestGmx(
    _esGmxAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    isDepositSourceGLPVault(overrides?: CallOverrides): Promise<boolean>;

    setIsDepositSourceGLPVault(
      _isDepositSourceGLPVault: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setShouldSkipTransfer(
      _shouldSkipTransfer: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldSkipTransfer(overrides?: CallOverrides): Promise<boolean>;

    stakeGmx(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstakeGmx(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unvestGmx(
      _shouldStakeGmx: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    vestGmx(
      _esGmxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    isDepositSourceGLPVault(overrides?: CallOverrides): Promise<BigNumber>;

    setIsDepositSourceGLPVault(
      _isDepositSourceGLPVault: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setShouldSkipTransfer(
      _shouldSkipTransfer: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    shouldSkipTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unvestGmx(
      _shouldStakeGmx: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vestGmx(
      _esGmxAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isDepositSourceGLPVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIsDepositSourceGLPVault(
      _isDepositSourceGLPVault: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setShouldSkipTransfer(
      _shouldSkipTransfer: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    shouldSkipTransfer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unvestGmx(
      _shouldStakeGmx: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vestGmx(
      _esGmxAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
