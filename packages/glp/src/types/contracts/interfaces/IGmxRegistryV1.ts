/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IGmxRegistryV1Interface extends utils.Interface {
  functions: {
    "bnGmx()": FunctionFragment;
    "dolomiteRegistry()": FunctionFragment;
    "esGmx()": FunctionFragment;
    "fsGlp()": FunctionFragment;
    "glp()": FunctionFragment;
    "glpManager()": FunctionFragment;
    "glpRewardsRouter()": FunctionFragment;
    "glpVaultFactory()": FunctionFragment;
    "gmx()": FunctionFragment;
    "gmxRewardsRouter()": FunctionFragment;
    "gmxVault()": FunctionFragment;
    "gmxVaultFactory()": FunctionFragment;
    "ownerSetBnGmx(address)": FunctionFragment;
    "ownerSetDolomiteRegistry(address)": FunctionFragment;
    "ownerSetEsGmx(address)": FunctionFragment;
    "ownerSetFSGlp(address)": FunctionFragment;
    "ownerSetGlp(address)": FunctionFragment;
    "ownerSetGlpManager(address)": FunctionFragment;
    "ownerSetGlpRewardsRouter(address)": FunctionFragment;
    "ownerSetGlpVaultFactory(address)": FunctionFragment;
    "ownerSetGmx(address)": FunctionFragment;
    "ownerSetGmxRewardsRouter(address)": FunctionFragment;
    "ownerSetGmxVault(address)": FunctionFragment;
    "ownerSetGmxVaultFactory(address)": FunctionFragment;
    "ownerSetSGlp(address)": FunctionFragment;
    "ownerSetSGmx(address)": FunctionFragment;
    "ownerSetSbfGmx(address)": FunctionFragment;
    "ownerSetVGlp(address)": FunctionFragment;
    "ownerSetVGmx(address)": FunctionFragment;
    "sGlp()": FunctionFragment;
    "sGmx()": FunctionFragment;
    "sbfGmx()": FunctionFragment;
    "vGlp()": FunctionFragment;
    "vGmx()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bnGmx"
      | "dolomiteRegistry"
      | "esGmx"
      | "fsGlp"
      | "glp"
      | "glpManager"
      | "glpRewardsRouter"
      | "glpVaultFactory"
      | "gmx"
      | "gmxRewardsRouter"
      | "gmxVault"
      | "gmxVaultFactory"
      | "ownerSetBnGmx"
      | "ownerSetDolomiteRegistry"
      | "ownerSetEsGmx"
      | "ownerSetFSGlp"
      | "ownerSetGlp"
      | "ownerSetGlpManager"
      | "ownerSetGlpRewardsRouter"
      | "ownerSetGlpVaultFactory"
      | "ownerSetGmx"
      | "ownerSetGmxRewardsRouter"
      | "ownerSetGmxVault"
      | "ownerSetGmxVaultFactory"
      | "ownerSetSGlp"
      | "ownerSetSGmx"
      | "ownerSetSbfGmx"
      | "ownerSetVGlp"
      | "ownerSetVGmx"
      | "sGlp"
      | "sGmx"
      | "sbfGmx"
      | "vGlp"
      | "vGmx"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bnGmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dolomiteRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "esGmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "fsGlp", values?: undefined): string;
  encodeFunctionData(functionFragment: "glp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "glpManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "glpRewardsRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "glpVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gmxRewardsRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gmxVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gmxVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetBnGmx",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetDolomiteRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetEsGmx",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetFSGlp",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ownerSetGlp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlpManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlpRewardsRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlpVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ownerSetGmx", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerSetGmxRewardsRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGmxVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGmxVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetSGlp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetSGmx",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetSbfGmx",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetVGlp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetVGmx",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sGlp", values?: undefined): string;
  encodeFunctionData(functionFragment: "sGmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "sbfGmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "vGlp", values?: undefined): string;
  encodeFunctionData(functionFragment: "vGmx", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bnGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "esGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fsGlp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "glp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "glpManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "glpRewardsRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "glpVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gmxRewardsRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmxVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gmxVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetBnGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetDolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetEsGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetFSGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlpManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlpRewardsRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlpVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGmxRewardsRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGmxVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGmxVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetSGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetSGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetSbfGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetVGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetVGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sGlp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sbfGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vGlp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vGmx", data: BytesLike): Result;

  events: {
    "BnGmxSet(address)": EventFragment;
    "DolomiteRegistrySet(address)": EventFragment;
    "EsGmxSet(address)": EventFragment;
    "FSGlpSet(address)": EventFragment;
    "GlpManagerSet(address)": EventFragment;
    "GlpRewardsRouterSet(address)": EventFragment;
    "GlpSet(address)": EventFragment;
    "GlpVaultFactorySet(address)": EventFragment;
    "GmxRewardsRouterSet(address)": EventFragment;
    "GmxSet(address)": EventFragment;
    "GmxVaultFactorySet(address)": EventFragment;
    "GmxVaultSet(address)": EventFragment;
    "SGlpSet(address)": EventFragment;
    "SGmxSet(address)": EventFragment;
    "SbfGmxSet(address)": EventFragment;
    "VGlpSet(address)": EventFragment;
    "VGmxSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BnGmxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DolomiteRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EsGmxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FSGlpSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlpManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlpRewardsRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlpSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlpVaultFactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GmxRewardsRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GmxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GmxVaultFactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GmxVaultSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SGlpSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SGmxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SbfGmxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VGlpSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VGmxSet"): EventFragment;
}

export interface BnGmxSetEventObject {
  _bnGmx: string;
}
export type BnGmxSetEvent = TypedEvent<[string], BnGmxSetEventObject>;

export type BnGmxSetEventFilter = TypedEventFilter<BnGmxSetEvent>;

export interface DolomiteRegistrySetEventObject {
  _dolomiteRegistry: string;
}
export type DolomiteRegistrySetEvent = TypedEvent<
  [string],
  DolomiteRegistrySetEventObject
>;

export type DolomiteRegistrySetEventFilter =
  TypedEventFilter<DolomiteRegistrySetEvent>;

export interface EsGmxSetEventObject {
  _esGmx: string;
}
export type EsGmxSetEvent = TypedEvent<[string], EsGmxSetEventObject>;

export type EsGmxSetEventFilter = TypedEventFilter<EsGmxSetEvent>;

export interface FSGlpSetEventObject {
  _fsGlp: string;
}
export type FSGlpSetEvent = TypedEvent<[string], FSGlpSetEventObject>;

export type FSGlpSetEventFilter = TypedEventFilter<FSGlpSetEvent>;

export interface GlpManagerSetEventObject {
  _glpManager: string;
}
export type GlpManagerSetEvent = TypedEvent<[string], GlpManagerSetEventObject>;

export type GlpManagerSetEventFilter = TypedEventFilter<GlpManagerSetEvent>;

export interface GlpRewardsRouterSetEventObject {
  _glpRewardsRouter: string;
}
export type GlpRewardsRouterSetEvent = TypedEvent<
  [string],
  GlpRewardsRouterSetEventObject
>;

export type GlpRewardsRouterSetEventFilter =
  TypedEventFilter<GlpRewardsRouterSetEvent>;

export interface GlpSetEventObject {
  _glp: string;
}
export type GlpSetEvent = TypedEvent<[string], GlpSetEventObject>;

export type GlpSetEventFilter = TypedEventFilter<GlpSetEvent>;

export interface GlpVaultFactorySetEventObject {
  _glpVaultFactory: string;
}
export type GlpVaultFactorySetEvent = TypedEvent<
  [string],
  GlpVaultFactorySetEventObject
>;

export type GlpVaultFactorySetEventFilter =
  TypedEventFilter<GlpVaultFactorySetEvent>;

export interface GmxRewardsRouterSetEventObject {
  _gmxRewardsRouter: string;
}
export type GmxRewardsRouterSetEvent = TypedEvent<
  [string],
  GmxRewardsRouterSetEventObject
>;

export type GmxRewardsRouterSetEventFilter =
  TypedEventFilter<GmxRewardsRouterSetEvent>;

export interface GmxSetEventObject {
  _gmx: string;
}
export type GmxSetEvent = TypedEvent<[string], GmxSetEventObject>;

export type GmxSetEventFilter = TypedEventFilter<GmxSetEvent>;

export interface GmxVaultFactorySetEventObject {
  _gmxVaultFactory: string;
}
export type GmxVaultFactorySetEvent = TypedEvent<
  [string],
  GmxVaultFactorySetEventObject
>;

export type GmxVaultFactorySetEventFilter =
  TypedEventFilter<GmxVaultFactorySetEvent>;

export interface GmxVaultSetEventObject {
  _gmxVault: string;
}
export type GmxVaultSetEvent = TypedEvent<[string], GmxVaultSetEventObject>;

export type GmxVaultSetEventFilter = TypedEventFilter<GmxVaultSetEvent>;

export interface SGlpSetEventObject {
  _sGlp: string;
}
export type SGlpSetEvent = TypedEvent<[string], SGlpSetEventObject>;

export type SGlpSetEventFilter = TypedEventFilter<SGlpSetEvent>;

export interface SGmxSetEventObject {
  _sGmx: string;
}
export type SGmxSetEvent = TypedEvent<[string], SGmxSetEventObject>;

export type SGmxSetEventFilter = TypedEventFilter<SGmxSetEvent>;

export interface SbfGmxSetEventObject {
  _sbfGmx: string;
}
export type SbfGmxSetEvent = TypedEvent<[string], SbfGmxSetEventObject>;

export type SbfGmxSetEventFilter = TypedEventFilter<SbfGmxSetEvent>;

export interface VGlpSetEventObject {
  _vGlp: string;
}
export type VGlpSetEvent = TypedEvent<[string], VGlpSetEventObject>;

export type VGlpSetEventFilter = TypedEventFilter<VGlpSetEvent>;

export interface VGmxSetEventObject {
  _vGmx: string;
}
export type VGmxSetEvent = TypedEvent<[string], VGmxSetEventObject>;

export type VGmxSetEventFilter = TypedEventFilter<VGmxSetEvent>;

export interface IGmxRegistryV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGmxRegistryV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bnGmx(overrides?: CallOverrides): Promise<[string]>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<[string]>;

    esGmx(overrides?: CallOverrides): Promise<[string]>;

    fsGlp(overrides?: CallOverrides): Promise<[string]>;

    glp(overrides?: CallOverrides): Promise<[string]>;

    glpManager(overrides?: CallOverrides): Promise<[string]>;

    glpRewardsRouter(overrides?: CallOverrides): Promise<[string]>;

    glpVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    gmx(overrides?: CallOverrides): Promise<[string]>;

    gmxRewardsRouter(overrides?: CallOverrides): Promise<[string]>;

    gmxVault(overrides?: CallOverrides): Promise<[string]>;

    gmxVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    ownerSetBnGmx(
      _bnGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetEsGmx(
      _esGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetFSGlp(
      _fsGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlp(
      _glp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlpManager(
      _glpManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlpRewardsRouter(
      _glpRewardsRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlpVaultFactory(
      _glpVaultFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGmx(
      _gmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGmxRewardsRouter(
      _gmxRewardsRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGmxVault(
      _gmxVault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGmxVaultFactory(
      _gmxVaultFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetSGlp(
      _sGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetSGmx(
      _sGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetSbfGmx(
      _sbfGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetVGlp(
      _vGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetVGmx(
      _vGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sGlp(overrides?: CallOverrides): Promise<[string]>;

    sGmx(overrides?: CallOverrides): Promise<[string]>;

    sbfGmx(overrides?: CallOverrides): Promise<[string]>;

    vGlp(overrides?: CallOverrides): Promise<[string]>;

    vGmx(overrides?: CallOverrides): Promise<[string]>;
  };

  bnGmx(overrides?: CallOverrides): Promise<string>;

  dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

  esGmx(overrides?: CallOverrides): Promise<string>;

  fsGlp(overrides?: CallOverrides): Promise<string>;

  glp(overrides?: CallOverrides): Promise<string>;

  glpManager(overrides?: CallOverrides): Promise<string>;

  glpRewardsRouter(overrides?: CallOverrides): Promise<string>;

  glpVaultFactory(overrides?: CallOverrides): Promise<string>;

  gmx(overrides?: CallOverrides): Promise<string>;

  gmxRewardsRouter(overrides?: CallOverrides): Promise<string>;

  gmxVault(overrides?: CallOverrides): Promise<string>;

  gmxVaultFactory(overrides?: CallOverrides): Promise<string>;

  ownerSetBnGmx(
    _bnGmx: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetDolomiteRegistry(
    _dolomiteRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetEsGmx(
    _esGmx: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetFSGlp(
    _fsGlp: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlp(
    _glp: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlpManager(
    _glpManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlpRewardsRouter(
    _glpRewardsRouter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlpVaultFactory(
    _glpVaultFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGmx(
    _gmx: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGmxRewardsRouter(
    _gmxRewardsRouter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGmxVault(
    _gmxVault: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGmxVaultFactory(
    _gmxVaultFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetSGlp(
    _sGlp: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetSGmx(
    _sGmx: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetSbfGmx(
    _sbfGmx: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetVGlp(
    _vGlp: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetVGmx(
    _vGmx: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sGlp(overrides?: CallOverrides): Promise<string>;

  sGmx(overrides?: CallOverrides): Promise<string>;

  sbfGmx(overrides?: CallOverrides): Promise<string>;

  vGlp(overrides?: CallOverrides): Promise<string>;

  vGmx(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bnGmx(overrides?: CallOverrides): Promise<string>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

    esGmx(overrides?: CallOverrides): Promise<string>;

    fsGlp(overrides?: CallOverrides): Promise<string>;

    glp(overrides?: CallOverrides): Promise<string>;

    glpManager(overrides?: CallOverrides): Promise<string>;

    glpRewardsRouter(overrides?: CallOverrides): Promise<string>;

    glpVaultFactory(overrides?: CallOverrides): Promise<string>;

    gmx(overrides?: CallOverrides): Promise<string>;

    gmxRewardsRouter(overrides?: CallOverrides): Promise<string>;

    gmxVault(overrides?: CallOverrides): Promise<string>;

    gmxVaultFactory(overrides?: CallOverrides): Promise<string>;

    ownerSetBnGmx(_bnGmx: string, overrides?: CallOverrides): Promise<void>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetEsGmx(_esGmx: string, overrides?: CallOverrides): Promise<void>;

    ownerSetFSGlp(_fsGlp: string, overrides?: CallOverrides): Promise<void>;

    ownerSetGlp(_glp: string, overrides?: CallOverrides): Promise<void>;

    ownerSetGlpManager(
      _glpManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlpRewardsRouter(
      _glpRewardsRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlpVaultFactory(
      _glpVaultFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGmx(_gmx: string, overrides?: CallOverrides): Promise<void>;

    ownerSetGmxRewardsRouter(
      _gmxRewardsRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGmxVault(
      _gmxVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGmxVaultFactory(
      _gmxVaultFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetSGlp(_sGlp: string, overrides?: CallOverrides): Promise<void>;

    ownerSetSGmx(_sGmx: string, overrides?: CallOverrides): Promise<void>;

    ownerSetSbfGmx(_sbfGmx: string, overrides?: CallOverrides): Promise<void>;

    ownerSetVGlp(_vGlp: string, overrides?: CallOverrides): Promise<void>;

    ownerSetVGmx(_vGmx: string, overrides?: CallOverrides): Promise<void>;

    sGlp(overrides?: CallOverrides): Promise<string>;

    sGmx(overrides?: CallOverrides): Promise<string>;

    sbfGmx(overrides?: CallOverrides): Promise<string>;

    vGlp(overrides?: CallOverrides): Promise<string>;

    vGmx(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BnGmxSet(address)"(_bnGmx?: null): BnGmxSetEventFilter;
    BnGmxSet(_bnGmx?: null): BnGmxSetEventFilter;

    "DolomiteRegistrySet(address)"(
      _dolomiteRegistry?: string | null
    ): DolomiteRegistrySetEventFilter;
    DolomiteRegistrySet(
      _dolomiteRegistry?: string | null
    ): DolomiteRegistrySetEventFilter;

    "EsGmxSet(address)"(_esGmx?: null): EsGmxSetEventFilter;
    EsGmxSet(_esGmx?: null): EsGmxSetEventFilter;

    "FSGlpSet(address)"(_fsGlp?: null): FSGlpSetEventFilter;
    FSGlpSet(_fsGlp?: null): FSGlpSetEventFilter;

    "GlpManagerSet(address)"(_glpManager?: null): GlpManagerSetEventFilter;
    GlpManagerSet(_glpManager?: null): GlpManagerSetEventFilter;

    "GlpRewardsRouterSet(address)"(
      _glpRewardsRouter?: null
    ): GlpRewardsRouterSetEventFilter;
    GlpRewardsRouterSet(
      _glpRewardsRouter?: null
    ): GlpRewardsRouterSetEventFilter;

    "GlpSet(address)"(_glp?: null): GlpSetEventFilter;
    GlpSet(_glp?: null): GlpSetEventFilter;

    "GlpVaultFactorySet(address)"(
      _glpVaultFactory?: null
    ): GlpVaultFactorySetEventFilter;
    GlpVaultFactorySet(_glpVaultFactory?: null): GlpVaultFactorySetEventFilter;

    "GmxRewardsRouterSet(address)"(
      _gmxRewardsRouter?: null
    ): GmxRewardsRouterSetEventFilter;
    GmxRewardsRouterSet(
      _gmxRewardsRouter?: null
    ): GmxRewardsRouterSetEventFilter;

    "GmxSet(address)"(_gmx?: null): GmxSetEventFilter;
    GmxSet(_gmx?: null): GmxSetEventFilter;

    "GmxVaultFactorySet(address)"(
      _gmxVaultFactory?: null
    ): GmxVaultFactorySetEventFilter;
    GmxVaultFactorySet(_gmxVaultFactory?: null): GmxVaultFactorySetEventFilter;

    "GmxVaultSet(address)"(_gmxVault?: null): GmxVaultSetEventFilter;
    GmxVaultSet(_gmxVault?: null): GmxVaultSetEventFilter;

    "SGlpSet(address)"(_sGlp?: null): SGlpSetEventFilter;
    SGlpSet(_sGlp?: null): SGlpSetEventFilter;

    "SGmxSet(address)"(_sGmx?: null): SGmxSetEventFilter;
    SGmxSet(_sGmx?: null): SGmxSetEventFilter;

    "SbfGmxSet(address)"(_sbfGmx?: null): SbfGmxSetEventFilter;
    SbfGmxSet(_sbfGmx?: null): SbfGmxSetEventFilter;

    "VGlpSet(address)"(_vGlp?: null): VGlpSetEventFilter;
    VGlpSet(_vGlp?: null): VGlpSetEventFilter;

    "VGmxSet(address)"(_vGmx?: null): VGmxSetEventFilter;
    VGmxSet(_vGmx?: null): VGmxSetEventFilter;
  };

  estimateGas: {
    bnGmx(overrides?: CallOverrides): Promise<BigNumber>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    esGmx(overrides?: CallOverrides): Promise<BigNumber>;

    fsGlp(overrides?: CallOverrides): Promise<BigNumber>;

    glp(overrides?: CallOverrides): Promise<BigNumber>;

    glpManager(overrides?: CallOverrides): Promise<BigNumber>;

    glpRewardsRouter(overrides?: CallOverrides): Promise<BigNumber>;

    glpVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    gmx(overrides?: CallOverrides): Promise<BigNumber>;

    gmxRewardsRouter(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVault(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetBnGmx(
      _bnGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetEsGmx(
      _esGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetFSGlp(
      _fsGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlp(
      _glp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlpManager(
      _glpManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlpRewardsRouter(
      _glpRewardsRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlpVaultFactory(
      _glpVaultFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGmx(
      _gmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGmxRewardsRouter(
      _gmxRewardsRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGmxVault(
      _gmxVault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGmxVaultFactory(
      _gmxVaultFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetSGlp(
      _sGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetSGmx(
      _sGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetSbfGmx(
      _sbfGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetVGlp(
      _vGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetVGmx(
      _vGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sGlp(overrides?: CallOverrides): Promise<BigNumber>;

    sGmx(overrides?: CallOverrides): Promise<BigNumber>;

    sbfGmx(overrides?: CallOverrides): Promise<BigNumber>;

    vGlp(overrides?: CallOverrides): Promise<BigNumber>;

    vGmx(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bnGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    esGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fsGlp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpRewardsRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxRewardsRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerSetBnGmx(
      _bnGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetEsGmx(
      _esGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetFSGlp(
      _fsGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlp(
      _glp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlpManager(
      _glpManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlpRewardsRouter(
      _glpRewardsRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlpVaultFactory(
      _glpVaultFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGmx(
      _gmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGmxRewardsRouter(
      _gmxRewardsRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGmxVault(
      _gmxVault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGmxVaultFactory(
      _gmxVaultFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetSGlp(
      _sGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetSGmx(
      _sGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetSbfGmx(
      _sbfGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetVGlp(
      _vGlp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetVGmx(
      _vGmx: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sGlp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sbfGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vGlp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vGmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
