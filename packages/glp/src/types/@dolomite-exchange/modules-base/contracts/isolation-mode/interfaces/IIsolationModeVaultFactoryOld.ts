/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export declare namespace IIsolationModeVaultFactoryOld {
  export type QueuedTransferStruct = {
    from: string;
    to: string;
    amount: BigNumberish;
    vault: string;
    isExecuted: boolean;
  };

  export type QueuedTransferStructOutput = [
    string,
    string,
    BigNumber,
    string,
    boolean
  ] & {
    from: string;
    to: string;
    amount: BigNumber;
    vault: string;
    isExecuted: boolean;
  };
}

export interface IIsolationModeVaultFactoryOldInterface
  extends utils.Interface {
  functions: {
    "BORROW_POSITION_PROXY()": FunctionFragment;
    "DOLOMITE_MARGIN()": FunctionFragment;
    "UNDERLYING_TOKEN()": FunctionFragment;
    "allowableCollateralMarketIds()": FunctionFragment;
    "allowableDebtMarketIds()": FunctionFragment;
    "calculateVaultByAccount(address)": FunctionFragment;
    "createVault(address)": FunctionFragment;
    "createVaultAndDepositIntoDolomiteMargin(uint256,uint256)": FunctionFragment;
    "depositIntoDolomiteMargin(uint256,uint256)": FunctionFragment;
    "depositOtherTokenIntoDolomiteMarginForVaultOwner(uint256,uint256,uint256)": FunctionFragment;
    "enqueueTransferFromDolomiteMargin(address,uint256)": FunctionFragment;
    "enqueueTransferIntoDolomiteMargin(address,uint256)": FunctionFragment;
    "getAccountByVault(address)": FunctionFragment;
    "getProxyVaultInitCodeHash()": FunctionFragment;
    "getQueuedTransferByCursor(uint256)": FunctionFragment;
    "getVaultByAccount(address)": FunctionFragment;
    "initialize(address[])": FunctionFragment;
    "isIsolationAsset()": FunctionFragment;
    "isTokenConverterTrusted(address)": FunctionFragment;
    "marketId()": FunctionFragment;
    "setIsTokenConverterTrusted(address,bool)": FunctionFragment;
    "setUserVaultImplementation(address)": FunctionFragment;
    "userVaultImplementation()": FunctionFragment;
    "withdrawFromDolomiteMargin(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BORROW_POSITION_PROXY"
      | "DOLOMITE_MARGIN"
      | "UNDERLYING_TOKEN"
      | "allowableCollateralMarketIds"
      | "allowableDebtMarketIds"
      | "calculateVaultByAccount"
      | "createVault"
      | "createVaultAndDepositIntoDolomiteMargin"
      | "depositIntoDolomiteMargin"
      | "depositOtherTokenIntoDolomiteMarginForVaultOwner"
      | "enqueueTransferFromDolomiteMargin"
      | "enqueueTransferIntoDolomiteMargin"
      | "getAccountByVault"
      | "getProxyVaultInitCodeHash"
      | "getQueuedTransferByCursor"
      | "getVaultByAccount"
      | "initialize"
      | "isIsolationAsset"
      | "isTokenConverterTrusted"
      | "marketId"
      | "setIsTokenConverterTrusted"
      | "setUserVaultImplementation"
      | "userVaultImplementation"
      | "withdrawFromDolomiteMargin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BORROW_POSITION_PROXY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNDERLYING_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowableCollateralMarketIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowableDebtMarketIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVaultByAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "createVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createVaultAndDepositIntoDolomiteMargin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositIntoDolomiteMargin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOtherTokenIntoDolomiteMarginForVaultOwner",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enqueueTransferFromDolomiteMargin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enqueueTransferIntoDolomiteMargin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountByVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyVaultInitCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedTransferByCursor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isIsolationAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenConverterTrusted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "marketId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setIsTokenConverterTrusted",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserVaultImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userVaultImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromDolomiteMargin",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BORROW_POSITION_PROXY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNDERLYING_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowableCollateralMarketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowableDebtMarketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVaultByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVaultAndDepositIntoDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositIntoDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOtherTokenIntoDolomiteMarginForVaultOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enqueueTransferFromDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enqueueTransferIntoDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountByVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyVaultInitCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedTransferByCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIsolationAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenConverterTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsTokenConverterTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserVaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromDolomiteMargin",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IIsolationModeVaultFactoryOld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIsolationModeVaultFactoryOldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    allowableCollateralMarketIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    calculateVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _vault: string }>;

    createVault(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enqueueTransferFromDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enqueueTransferIntoDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _account: string }>;

    getProxyVaultInitCodeHash(overrides?: CallOverrides): Promise<[string]>;

    getQueuedTransferByCursor(
      _transferCursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IIsolationModeVaultFactoryOld.QueuedTransferStructOutput]>;

    getVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _vault: string }>;

    initialize(
      _tokenConverters: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isIsolationAsset(overrides?: CallOverrides): Promise<[boolean]>;

    isTokenConverterTrusted(
      _tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setIsTokenConverterTrusted(
      _tokenConverter: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUserVaultImplementation(
      _userVaultImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userVaultImplementation(overrides?: CallOverrides): Promise<[string]>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<string>;

  allowableCollateralMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  calculateVaultByAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  createVault(
    _account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createVaultAndDepositIntoDolomiteMargin(
    _toAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositIntoDolomiteMargin(
    _toAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositOtherTokenIntoDolomiteMarginForVaultOwner(
    _toAccountNumber: BigNumberish,
    _marketId: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enqueueTransferFromDolomiteMargin(
    _vault: string,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enqueueTransferIntoDolomiteMargin(
    _vault: string,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAccountByVault(_vault: string, overrides?: CallOverrides): Promise<string>;

  getProxyVaultInitCodeHash(overrides?: CallOverrides): Promise<string>;

  getQueuedTransferByCursor(
    _transferCursor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IIsolationModeVaultFactoryOld.QueuedTransferStructOutput>;

  getVaultByAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _tokenConverters: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isIsolationAsset(overrides?: CallOverrides): Promise<boolean>;

  isTokenConverterTrusted(
    _tokenConverter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketId(overrides?: CallOverrides): Promise<BigNumber>;

  setIsTokenConverterTrusted(
    _tokenConverter: string,
    _isTrusted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUserVaultImplementation(
    _userVaultImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userVaultImplementation(overrides?: CallOverrides): Promise<string>;

  withdrawFromDolomiteMargin(
    _fromAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<string>;

    allowableCollateralMarketIds(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    calculateVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createVault(_account: string, overrides?: CallOverrides): Promise<string>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    depositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enqueueTransferFromDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enqueueTransferIntoDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getProxyVaultInitCodeHash(overrides?: CallOverrides): Promise<string>;

    getQueuedTransferByCursor(
      _transferCursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IIsolationModeVaultFactoryOld.QueuedTransferStructOutput>;

    getVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _tokenConverters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isIsolationAsset(overrides?: CallOverrides): Promise<boolean>;

    isTokenConverterTrusted(
      _tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketId(overrides?: CallOverrides): Promise<BigNumber>;

    setIsTokenConverterTrusted(
      _tokenConverter: string,
      _isTrusted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserVaultImplementation(
      _userVaultImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userVaultImplementation(overrides?: CallOverrides): Promise<string>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    allowableCollateralMarketIds(overrides?: CallOverrides): Promise<BigNumber>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber>;

    calculateVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVault(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enqueueTransferFromDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enqueueTransferIntoDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyVaultInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getQueuedTransferByCursor(
      _transferCursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _tokenConverters: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isIsolationAsset(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenConverterTrusted(
      _tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketId(overrides?: CallOverrides): Promise<BigNumber>;

    setIsTokenConverterTrusted(
      _tokenConverter: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUserVaultImplementation(
      _userVaultImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userVaultImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROW_POSITION_PROXY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowableCollateralMarketIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowableDebtMarketIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVault(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enqueueTransferFromDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enqueueTransferIntoDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyVaultInitCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueuedTransferByCursor(
      _transferCursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _tokenConverters: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isIsolationAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTokenConverterTrusted(
      _tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setIsTokenConverterTrusted(
      _tokenConverter: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUserVaultImplementation(
      _userVaultImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userVaultImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
