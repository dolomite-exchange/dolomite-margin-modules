/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestHandlerRegistry,
  TestHandlerRegistryInterface,
} from "../../../contracts/test/TestHandlerRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_callbackGasLimit",
        type: "uint256",
      },
    ],
    name: "CallbackGasLimitSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_dolomiteRegistry",
        type: "address",
      },
    ],
    name: "DolomiteRegistrySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_handler",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_isTrusted",
        type: "bool",
      },
    ],
    name: "HandlerSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_unwrapperTrader",
        type: "address",
      },
    ],
    name: "UnwrapperTraderSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_wrapperTrader",
        type: "address",
      },
    ],
    name: "WrapperTraderSet",
    type: "event",
  },
  {
    inputs: [],
    name: "DOLOMITE_MARGIN",
    outputs: [
      {
        internalType: "contract IDolomiteMargin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "callbackGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dolomiteRegistry",
    outputs: [
      {
        internalType: "contract IDolomiteRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IIsolationModeVaultFactory",
        name: "_factoryToken",
        type: "address",
      },
    ],
    name: "getUnwrapperByToken",
    outputs: [
      {
        internalType: "contract IUpgradeableAsyncIsolationModeUnwrapperTrader",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IIsolationModeVaultFactory",
        name: "_factoryToken",
        type: "address",
      },
    ],
    name: "getWrapperByToken",
    outputs: [
      {
        internalType: "contract IUpgradeableAsyncIsolationModeWrapperTrader",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dolomiteRegistry",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_handler",
        type: "address",
      },
    ],
    name: "isHandler",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_callbackGasLimit",
        type: "uint256",
      },
    ],
    name: "ownerSetCallbackGasLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dolomiteRegistry",
        type: "address",
      },
    ],
    name: "ownerSetDolomiteRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_handler",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isTrusted",
        type: "bool",
      },
    ],
    name: "ownerSetIsHandler",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IIsolationModeVaultFactory",
        name: "_factoryToken",
        type: "address",
      },
      {
        internalType: "contract IUpgradeableAsyncIsolationModeUnwrapperTrader",
        name: "_unwrapperTrader",
        type: "address",
      },
    ],
    name: "ownerSetUnwrapperByToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IIsolationModeVaultFactory",
        name: "_factoryToken",
        type: "address",
      },
      {
        internalType: "contract IUpgradeableAsyncIsolationModeWrapperTrader",
        name: "_wrapperTrader",
        type: "address",
      },
    ],
    name: "ownerSetWrapperByToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061130e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a2067a7d11610071578063a2067a7d14610147578063bd12584f1461015a578063c4d66de814610162578063e13eebe214610175578063f8c6e51d14610188578063ffd1271b1461019b57600080fd5b806315c14a4a146100b957806324f74697146100d757806338eacc86146100ec57806346ea87af1461010157806363ae56b3146101215780638a05d1d214610134575b600080fd5b6100c16101ae565b6040516100ce9190610dc6565b60405180910390f35b6100df6101e7565b6040516100ce9190610dda565b6100ff6100fa366004610e26565b610217565b005b61011461010f366004610e77565b6102f3565b6040516100ce9190610ea8565b6100ff61012f366004610ec7565b61035d565b6100c1610142366004610ee8565b610376565b6100ff610155366004610f1c565b6103dd565b6100c16103f3565b6100ff610170366004610e77565b610423565b6100ff610183366004610e26565b6104fc565b6100c1610196366004610ee8565b610512565b6100ff6101a9366004610e77565b610540565b60006101e26101de60017f01095cd170b13c49f67c675e3bc004094df00c531fa118e86b230655aba7aa17610f65565b5490565b905090565b60006101e26101de60017f02f226130581da9c4dfdc3d9075a403af66423d553da86ed8e5b0d24ce7dbddf610f65565b336102e46102236101ae565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561025b57600080fd5b505afa15801561026f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102939190610f87565b6001600160a01b0316826001600160a01b0316147127b7363ca237b637b6b4ba32a6b0b933b4b760711b7f43616c6c6572206973206e6f74206f776e6572206f6620446f6c6f6d6974650084610555565b6102ee83836105c7565b505050565b60008061032160017f5f87e70844ff04ca1b5eedb4a57f5ab61281aa6b16ea68ae7a0a6c3425e44aab610f65565b60405161033391908590602001610fd0565b604051602081830303815290604052805190602001209050610353815490565b6001149392505050565b336103696102236101ae565b610372826106f1565b5050565b6000806103a460017fb47161e6f5b50f778dae06e11083ddb0aa88aae6624dfed01d797ab45e270b0a610f65565b6040516103b691908590602001610fd0565b6040516020818303038152906040528051906020012090506103d6815490565b9392505050565b336103e96102236101ae565b6102ee838361075e565b60006101e26101de60017f12525b307d8d9fd813165be18b676c012a1c9861f010452b12618f637a593b2a610f65565b600054610100900460ff16158080156104435750600054600160ff909116105b8061045d5750303b15801561045d575060005460ff166001145b6104825760405162461bcd60e51b815260040161047990610ff6565b60405180910390fd5b6000805460ff1916600117905580156104a5576000805461ff0019166101001790555b6104ae8261080d565b8015610372576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906104f09060019061105c565b60405180910390a15050565b336105086102236101ae565b6102ee83836108f7565b6000806103a460017f6bb3ce9fbb7a4f08183748b5a5339e972eea6688822c97c3b59e0c386bc68fea610f65565b3361054c6102236101ae565b6103728261080d565b836105c15761056383610a1a565b6101d160f51b61057284610a1a565b61080f60f21b61058185610ab5565b60405161059b959493929190601f60f91b906020016110d8565b60408051601f198184030181529082905262461bcd60e51b825261047991600401611168565b50505050565b6105d082610bfb565b60006105f38263103f290760e01b60405180602001604052806000815250610c6a565b9050610652836001600160a01b0316828060200190518101906106169190610f87565b6001600160a01b0316146e48616e646c6572526567697374727960881b7524b73b30b634b2103bb930b83832b9103a3930b232b960511b610d35565b600061067f60017fb47161e6f5b50f778dae06e11083ddb0aa88aae6624dfed01d797ab45e270b0a610f65565b60405161069191908690602001610fd0565b6040516020818303038152906040528051906020012090506106b281849055565b7f6b42c47fba53ed481646958994448d465e745b2cfb274b1bf29caf5d94c1c76e84846040516106e3929190611182565b60405180910390a150505050565b61072461071f60017f02f226130581da9c4dfdc3d9075a403af66423d553da86ed8e5b0d24ce7dbddf610f65565b829055565b7fea0306c7b92bfad18ad155350fb250f350724d4e5c843eeb51997be9f937c350816040516107539190610dda565b60405180910390a150565b600061078b60017f5f87e70844ff04ca1b5eedb4a57f5ab61281aa6b16ea68ae7a0a6c3425e44aab610f65565b60405161079d91908590602001610fd0565b6040516020818303038152906040528051906020012090506107cf81836107c55760006107c8565b60015b60ff169055565b7f6cc67219f62a9e5d66cc9f2a62e16634cffcf48facd698a829bafcc1ad2c5c83838360405161080092919061119d565b60405180910390a1505050565b6108526001600160a01b03821615156b42617365526567697374727960a01b7f496e76616c696420646f6c6f6d69746552656769737472790000000000000000610d35565b600061087582632f32699960e01b60405180602001604052806000815250610c6a565b90508080602001905181019061088b9190610f87565b506108bf6108ba60017f12525b307d8d9fd813165be18b676c012a1c9861f010452b12618f637a593b2a610f65565b839055565b6040516001600160a01b038316907fd4968e6ff4b2df084b2b71aa90bc2137eee816091d7f1c17f0b66a602f9dbaeb90600090a25050565b61090082610bfb565b60006109238263103f290760e01b60405180602001604052806000815250610c6a565b9050610989836001600160a01b0316828060200190518101906109469190610f87565b6001600160a01b0316146e48616e646c6572526567697374727960881b7f496e76616c696420756e77726170706572207472616465720000000000000000610d35565b60006109b660017f6bb3ce9fbb7a4f08183748b5a5339e972eea6688822c97c3b59e0c386bc68fea610f65565b6040516109c891908690602001610fd0565b6040516020818303038152906040528051906020012090506109e981849055565b7f7250b27cb8883e52f545395f61aaa33eae0526c7dcce9ca1eb84096d0d57d9ab84846040516106e3929190611182565b6060600082604051602001610a2f91906111b8565b60408051601f19818403018152919052905060205b8015610a9a5780610a54816111cd565b915050818181518110610a6957610a696111e4565b01602001516001600160f81b03191615610a95576000610a8a8260016111fa565b835250909392505050565b610a44565b5060408051600080825260208201909252905b509392505050565b60408051602a80825260608281019093526001600160a01b03841691600091602082018180368337019050509050603060f81b81600081518110610afb57610afb6111e4565b60200101906001600160f81b031916908160001a905350607860f81b81600181518110610b2a57610b2a6111e4565b60200101906001600160f81b031916908160001a90535060005b6014811015610aad576000610b5a826002611212565b9050610b68600f8516610d64565b83610b74836029610f65565b81518110610b8457610b846111e4565b60200101906001600160f81b031916908160001a905350600484901c9350610bae600f8516610d64565b83610bba836028610f65565b81518110610bca57610bca6111e4565b60200101906001600160f81b031916908160001a9053505060049290921c9180610bf381611231565b915050610b44565b6000610c1e82636ed71ede60e01b60405180602001604052806000815250610c6a565b905061037281806020019051810190610c379190611257565b15156e48616e646c6572526567697374727960881b7424b73b30b634b2103330b1ba37b93c903a37b5b2b760591b610d35565b6060600080856001600160a01b03168585604051602001610c8c929190611288565b60408051601f1981840301815290829052610ca6916112a4565b600060405180830381855afa9150503d8060008114610ce1576040519150601f19603f3d011682016040523d82523d6000602084013e610ce6565b606091505b5091509150610d2c828015610cfc575060008251115b6c2b30b634b230ba34b7b72634b160991b7410d85b1b081d1bc81d185c99d95d0819985a5b1959605a1b89610555565b95945050505050565b826102ee57610d4382610a1a565b6101d160f51b610d5283610a1a565b60405160200161059b939291906112b0565b6000600a821015610d8357610d7a6030836111fa565b60f81b92915050565b610d7a6057836111fa565b60006001600160a01b0382165b92915050565b6000610d9b82610d8e565b6000610d9b82610da1565b610dc081610dac565b82525050565b60208101610d9b8284610db7565b80610dc0565b60208101610d9b8284610dd4565b60006001600160a01b038216610d9b565b6000610d9b82610de8565b610e0d81610df9565b8114610e1857600080fd5b50565b8035610d9b81610e04565b60008060408385031215610e3c57610e3c600080fd5b6000610e488585610e1b565b9250506020610e5985828601610e1b565b9150509250929050565b610e0d81610de8565b8035610d9b81610e63565b600060208284031215610e8c57610e8c600080fd5b6000610e988484610e6c565b949350505050565b801515610dc0565b60208101610d9b8284610ea0565b80610e0d565b8035610d9b81610eb6565b600060208284031215610edc57610edc600080fd5b6000610e988484610ebc565b600060208284031215610efd57610efd600080fd5b6000610e988484610e1b565b801515610e0d565b8035610d9b81610f09565b60008060408385031215610f3257610f32600080fd5b6000610f3e8585610e6c565b9250506020610e5985828601610f11565b634e487b7160e01b600052601160045260246000fd5b600082821015610f7757610f77610f4f565b500390565b8051610d9b81610e63565b600060208284031215610f9c57610f9c600080fd5b6000610e988484610f7c565b6000610d9b8260601b90565b6000610d9b82610fa8565b610dc0610fcb82610de8565b610fb4565b6000610fdc8285610dd4565b602082019150610fec8284610fbf565b5060140192915050565b60208082528101610d9b81602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b600060ff8216610d9b565b610dc081611048565b60208101610d9b8284611053565b60005b8381101561108557818101518382015260200161106d565b838111156105c15750506000910152565b60006110a0825190565b6110ae81856020860161106a565b9290920192915050565b6001600160f01b03198116610dc0565b6001600160f81b03198116610dc0565b60006110e48289611096565b91506110f082886110b8565b6002820191506111008287611096565b915061110c82866110b8565b60028201915061111c8285611096565b915061112882846110c8565b506001019695505050505050565b6000611140825190565b80845260208401935061115781856020860161106a565b601f01601f19169290920192915050565b602080825281016103d68184611136565b610dc081610de8565b604081016111908285611179565b6103d66020830184611179565b604081016111ab8285611179565b6103d66020830184610ea0565b60006111c48284610dd4565b50602001919050565b6000816111dc576111dc610f4f565b506000190190565b634e487b7160e01b600052603260045260246000fd5b6000821982111561120d5761120d610f4f565b500190565b600081600019048311821515161561122c5761122c610f4f565b500290565b600060001982141561124557611245610f4f565b5060010190565b8051610d9b81610eb6565b60006020828403121561126c5761126c600080fd5b6000610e98848461124c565b6001600160e01b03198116610dc0565b60006112948285611278565b600482019150610e988284611096565b60006103d68284611096565b60006112bc8286611096565b91506112c882856110b8565b600282019150610d2c828461109656fea2646970667358221220809d07ae46c9fd0ec0fc60e621e9e8c4e87e30e4921cc8eaabd006732eea516064736f6c63430008090033";

type TestHandlerRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHandlerRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHandlerRegistry__factory extends ContractFactory {
  constructor(...args: TestHandlerRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestHandlerRegistry> {
    return super.deploy(overrides || {}) as Promise<TestHandlerRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestHandlerRegistry {
    return super.attach(address) as TestHandlerRegistry;
  }
  override connect(signer: Signer): TestHandlerRegistry__factory {
    return super.connect(signer) as TestHandlerRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHandlerRegistryInterface {
    return new utils.Interface(_abi) as TestHandlerRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHandlerRegistry {
    return new Contract(address, _abi, signerOrProvider) as TestHandlerRegistry;
  }
}
