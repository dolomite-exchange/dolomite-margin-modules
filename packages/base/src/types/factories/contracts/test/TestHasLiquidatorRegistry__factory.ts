/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestHasLiquidatorRegistry,
  TestHasLiquidatorRegistryInterface,
} from "../../../contracts/test/TestHasLiquidatorRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_liquidatorAssetRegistry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "LIQUIDATOR_ASSET_REGISTRY",
    outputs: [
      {
        internalType: "contract ILiquidatorAssetRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_marketId",
        type: "uint256",
      },
    ],
    name: "validateAssetForLiquidation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_marketIds",
        type: "uint256[]",
      },
    ],
    name: "validateAssetsForLiquidation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516109c43803806109c483398101604081905261002f91610075565b6001600160a01b031660805261009e565b60006001600160a01b0382165b92915050565b61005c81610040565b811461006757600080fd5b50565b805161004d81610053565b60006020828403121561008a5761008a600080fd5b6000610096848461006a565b949350505050565b6080516108fe6100c660003960008181607401528181610127015261025e01526108fe6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806385c01ec014610046578063cf530f881461006f578063f7879ef6146100a3575b600080fd5b610059610054366004610590565b6100b6565b60405161006691906105e2565b60405180910390f35b6100967f000000000000000000000000000000000000000000000000000000000000000081565b6040516100669190610626565b6100596100b136600461064c565b610101565b60008282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506100f792508391506101169050565b5060019392505050565b60008161010d81610243565b50600192915050565b60005b815181101561023f5761022d7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d9f4760184848151811061016657610166610675565b6020026020010151306040518363ffffffff1660e01b815260040161018c92919061069a565b60206040518083038186803b1580156101a457600080fd5b505afa1580156101b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dc91906106cf565b744861734c697175696461746f72526567697374727960581b74105cdcd95d081b9bdd081dda1a5d195b1a5cdd1959605a1b85858151811061022057610220610675565b6020026020010151610320565b8061023781610706565b915050610119565b5050565b60405163d9f4760160e01b815261031d906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d9f4760190610295908590309060040161069a565b60206040518083038186803b1580156102ad57600080fd5b505afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e591906106cf565b744861734c697175696461746f72526567697374727960581b74105cdcd95d081b9bdd081dda1a5d195b1a5cdd1959605a1b84610320565b50565b836103955761032e8361039b565b6101d160f51b61033d8461039b565b61080f60f21b61034c85610432565b604051610366959493929190601f60f91b9060200161078f565b60408051601f198184030181529082905262461bcd60e51b825261038c9160040161081f565b60405180910390fd5b50505050565b60606000826040516020016103b09190610830565b60408051601f19818403018152919052905060205b801561041b57806103d581610845565b9150508181815181106103ea576103ea610675565b01602001516001600160f81b0319161561041657600061040b82600161085c565b835250909392505050565b6103c5565b505060408051600081526020810190915292915050565b6060816104565750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610480578061046a81610706565b91506104799050600a836108a0565b915061045a565b60008167ffffffffffffffff81111561049b5761049b610874565b6040519080825280601f01601f1916602001820160405280156104c5576020820181803683370190505b508593509050815b801561053557806104dd81610845565b91506104ec9050600a856108b4565b6104f790603061085c565b60f81b82828151811061050c5761050c610675565b60200101906001600160f81b031916908160001a90535061052e600a856108a0565b93506104cd565b50949350505050565b60008083601f84011261055357610553600080fd5b50813567ffffffffffffffff81111561056e5761056e600080fd5b60208301915083602082028301111561058957610589600080fd5b9250929050565b600080602083850312156105a6576105a6600080fd5b823567ffffffffffffffff8111156105c0576105c0600080fd5b6105cc8582860161053e565b92509250509250929050565b8015155b82525050565b602081016105f082846105d8565b92915050565b60006001600160a01b0382166105f0565b60006105f0826105f6565b60006105f082610607565b6105dc81610612565b602081016105f0828461061d565b805b811461031d57600080fd5b80356105f081610634565b60006020828403121561066157610661600080fd5b600061066d8484610641565b949350505050565b634e487b7160e01b600052603260045260246000fd5b806105dc565b6105dc816105f6565b604081016106a8828561068b565b6106b56020830184610691565b9392505050565b801515610636565b80516105f0816106bc565b6000602082840312156106e4576106e4600080fd5b600061066d84846106c4565b634e487b7160e01b600052601160045260246000fd5b600060001982141561071a5761071a6106f0565b5060010190565b60005b8381101561073c578181015183820152602001610724565b838111156103955750506000910152565b6000610757825190565b610765818560208601610721565b9290920192915050565b6001600160f01b031981166105dc565b6001600160f81b031981166105dc565b600061079b828961074d565b91506107a7828861076f565b6002820191506107b7828761074d565b91506107c3828661076f565b6002820191506107d3828561074d565b91506107df828461077f565b506001019695505050505050565b60006107f7825190565b80845260208401935061080e818560208601610721565b601f01601f19169290920192915050565b602080825281016106b581846107ed565b600061083c828461068b565b50602001919050565b600081610854576108546106f0565b506000190190565b6000821982111561086f5761086f6106f0565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000826108af576108af61088a565b500490565b6000826108c3576108c361088a565b50069056fea2646970667358221220b9f65552bb3afd3d0c674f2f3c6f83d280a8bdbff2627beb261aaac3104075a664736f6c63430008090033";

type TestHasLiquidatorRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHasLiquidatorRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHasLiquidatorRegistry__factory extends ContractFactory {
  constructor(...args: TestHasLiquidatorRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _liquidatorAssetRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<TestHasLiquidatorRegistry> {
    return super.deploy(
      _liquidatorAssetRegistry,
      overrides || {}
    ) as Promise<TestHasLiquidatorRegistry>;
  }
  override getDeployTransaction(
    _liquidatorAssetRegistry: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _liquidatorAssetRegistry,
      overrides || {}
    );
  }
  override attach(address: string): TestHasLiquidatorRegistry {
    return super.attach(address) as TestHasLiquidatorRegistry;
  }
  override connect(signer: Signer): TestHasLiquidatorRegistry__factory {
    return super.connect(signer) as TestHasLiquidatorRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHasLiquidatorRegistryInterface {
    return new utils.Interface(_abi) as TestHasLiquidatorRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHasLiquidatorRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestHasLiquidatorRegistry;
  }
}
