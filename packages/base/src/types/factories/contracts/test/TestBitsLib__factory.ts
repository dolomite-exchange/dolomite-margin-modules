/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestBitsLib,
  TestBitsLibInterface,
} from "../../../contracts/test/TestBitsLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxLength",
        type: "uint256",
      },
    ],
    name: "BitsLibCreateBitmaps",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "BitsLibGetLeastSignificantBit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_bit",
        type: "uint256",
      },
    ],
    name: "BitsLibGetMarketIdFromBit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_bitmaps",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_marketId",
        type: "uint256",
      },
    ],
    name: "BitsLibHasBit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_bitmaps",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_marketId",
        type: "uint256",
      },
    ],
    name: "BitsLibSetBit",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bitmap",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_bit",
        type: "uint256",
      },
    ],
    name: "BitsLibUnsetBit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106e8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80635327059014610067578063576f6c34146100905780635c33c737146100a35780637befc0a9146100c3578063a36076c5146100e3578063df7af950146100f6575b600080fd5b61007a6100753660046103b7565b610109565b60405161008791906103fc565b60405180910390f35b61007a61009e3660046103b7565b61011e565b6100b66100b1366004610519565b61012c565b604051610087919061055d565b6100d66100d1366004610519565b610138565b60405161008791906105c8565b6100d66100f13660046105d9565b610144565b61007a6101043660046105d9565b61014f565b6000610115838361015a565b90505b92915050565b60006001821b198316610115565b60006101158383610173565b606061011583836101c7565b60606101188261021a565b60006101188261027c565b60008161016984610100610610565b610115919061062f565b6000806101826101008461065d565b9050600061019261010085610671565b90506000816001901b8684815181106101ad576101ad610685565b602002602001015116905060008111935050505092915050565b606060006101d76101008461065d565b905060006101e761010085610671565b9050806001901b85838151811061020057610200610685565b602090810291909101018051909117905250929392505050565b6060600161022a6101008461065d565b610234919061062f565b67ffffffffffffffff81111561024c5761024c61040a565b604051908082528060200260200182016040528015610275578160200160208202803683370190505b5092915050565b60008161028b57506000919050565b60ff6fffffffffffffffffffffffffffffffff8316156102b7576102b060808261069b565b90506102bf565b608083901c92505b67ffffffffffffffff8316156102e1576102da60408261069b565b90506102e9565b604083901c92505b63ffffffff8316156103075761030060208261069b565b905061030f565b602083901c92505b61ffff83161561032b5761032460108261069b565b9050610333565b601083901c92505b60ff83161561034e5761034760088261069b565b9050610356565b600883901c92505b600f8316156103715761036a60048261069b565b9050610379565b600483901c92505b60038316156103945761038d60028261069b565b905061039c565b600283901c92505b60018316156101185761011560018261069b565b8035610118565b600080604083850312156103cd576103cd600080fd5b60006103d985856103b0565b92505060206103ea858286016103b0565b9150509250929050565b805b82525050565b6020810161011882846103f4565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156104465761044661040a565b6040525050565b600061045860405190565b90506104648282610420565b919050565b600067ffffffffffffffff8211156104835761048361040a565b5060209081020190565b60006104a061049b84610469565b61044d565b838152905060208082019084028301858111156104bf576104bf600080fd5b835b818110156104e357806104d488826103b0565b845250602092830192016104c1565b5050509392505050565b600082601f83011261050157610501600080fd5b813561051184826020860161048d565b949350505050565b6000806040838503121561052f5761052f600080fd5b823567ffffffffffffffff81111561054957610549600080fd5b6103d9858286016104ed565b8015156103f6565b602081016101188284610555565b600061057783836103f4565b505060200190565b6000610589825190565b80845260209384019383018060005b838110156105bd5781516105ac888261056b565b975060208301925050600101610598565b509495945050505050565b60208082528101610115818461057f565b6000602082840312156105ee576105ee600080fd5b600061051184846103b0565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561062a5761062a6105fa565b500290565b60008219821115610642576106426105fa565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261066c5761066c610647565b500490565b60008261068057610680610647565b500690565b634e487b7160e01b600052603260045260246000fd5b6000828210156106ad576106ad6105fa565b50039056fea2646970667358221220feb41a444eca0502468a1eac5685d5649fe1e211b6cddec944c5dfba7ae8a78b64736f6c63430008090033";

type TestBitsLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestBitsLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestBitsLib__factory extends ContractFactory {
  constructor(...args: TestBitsLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestBitsLib> {
    return super.deploy(overrides || {}) as Promise<TestBitsLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestBitsLib {
    return super.attach(address) as TestBitsLib;
  }
  override connect(signer: Signer): TestBitsLib__factory {
    return super.connect(signer) as TestBitsLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestBitsLibInterface {
    return new utils.Interface(_abi) as TestBitsLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestBitsLib {
    return new Contract(address, _abi, signerOrProvider) as TestBitsLib;
  }
}
