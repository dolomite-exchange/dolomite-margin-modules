/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IIsolationModeWrapperTraderV2 {
  export type CreateActionsForWrappingParamsStruct = {
    primaryAccountId: BigNumberish;
    otherAccountId: BigNumberish;
    primaryAccountOwner: string;
    primaryAccountNumber: BigNumberish;
    otherAccountOwner: string;
    otherAccountNumber: BigNumberish;
    outputMarket: BigNumberish;
    inputMarket: BigNumberish;
    minOutputAmount: BigNumberish;
    inputAmount: BigNumberish;
    orderData: BytesLike;
  };

  export type CreateActionsForWrappingParamsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    primaryAccountId: BigNumber;
    otherAccountId: BigNumber;
    primaryAccountOwner: string;
    primaryAccountNumber: BigNumber;
    otherAccountOwner: string;
    otherAccountNumber: BigNumber;
    outputMarket: BigNumber;
    inputMarket: BigNumber;
    minOutputAmount: BigNumber;
    inputAmount: BigNumber;
    orderData: string;
  };
}

export declare namespace IDolomiteStructs {
  export type AssetAmountStruct = {
    sign: boolean;
    denomination: BigNumberish;
    ref: BigNumberish;
    value: BigNumberish;
  };

  export type AssetAmountStructOutput = [boolean, number, number, BigNumber] & {
    sign: boolean;
    denomination: number;
    ref: number;
    value: BigNumber;
  };

  export type ActionArgsStruct = {
    actionType: BigNumberish;
    accountId: BigNumberish;
    amount: IDolomiteStructs.AssetAmountStruct;
    primaryMarketId: BigNumberish;
    secondaryMarketId: BigNumberish;
    otherAddress: string;
    otherAccountId: BigNumberish;
    data: BytesLike;
  };

  export type ActionArgsStructOutput = [
    number,
    BigNumber,
    IDolomiteStructs.AssetAmountStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    actionType: number;
    accountId: BigNumber;
    amount: IDolomiteStructs.AssetAmountStructOutput;
    primaryMarketId: BigNumber;
    secondaryMarketId: BigNumber;
    otherAddress: string;
    otherAccountId: BigNumber;
    data: string;
  };
}

export interface AsyncIsolationModeWrapperTraderImplInterface
  extends utils.Interface {
  functions: {
    "createActionsForWrapping(UpgradeableAsyncIsolationModeWrapperTrader,(uint256,uint256,address,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createActionsForWrapping"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createActionsForWrapping",
    values: [
      string,
      IIsolationModeWrapperTraderV2.CreateActionsForWrappingParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createActionsForWrapping",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AsyncIsolationModeWrapperTraderImpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AsyncIsolationModeWrapperTraderImplInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createActionsForWrapping(
      _wrapper: string,
      _params: IIsolationModeWrapperTraderV2.CreateActionsForWrappingParamsStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.ActionArgsStructOutput[]]>;
  };

  createActionsForWrapping(
    _wrapper: string,
    _params: IIsolationModeWrapperTraderV2.CreateActionsForWrappingParamsStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.ActionArgsStructOutput[]>;

  callStatic: {
    createActionsForWrapping(
      _wrapper: string,
      _params: IIsolationModeWrapperTraderV2.CreateActionsForWrappingParamsStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.ActionArgsStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    createActionsForWrapping(
      _wrapper: string,
      _params: IIsolationModeWrapperTraderV2.CreateActionsForWrappingParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createActionsForWrapping(
      _wrapper: string,
      _params: IIsolationModeWrapperTraderV2.CreateActionsForWrappingParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
