/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type MonetaryPriceStruct = { value: BigNumberish };

  export type MonetaryPriceStructOutput = [BigNumber] & { value: BigNumber };
}

export interface IExpiryInterface extends utils.Interface {
  functions: {
    "g_expiryRampTime()": FunctionFragment;
    "getExpiry((address,uint256),uint256)": FunctionFragment;
    "getSpreadAdjustedPrices(uint256,uint256,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "g_expiryRampTime"
      | "getExpiry"
      | "getSpreadAdjustedPrices"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "g_expiryRampTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiry",
    values: [IDolomiteStructs.AccountInfoStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpreadAdjustedPrices",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "g_expiryRampTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSpreadAdjustedPrices",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExpiry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExpiryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    g_expiryRampTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExpiry(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSpreadAdjustedPrices(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryPriceStructOutput,
        IDolomiteStructs.MonetaryPriceStructOutput
      ] & {
        heldPrice: IDolomiteStructs.MonetaryPriceStructOutput;
        owedPriceAdj: IDolomiteStructs.MonetaryPriceStructOutput;
      }
    >;
  };

  g_expiryRampTime(overrides?: CallOverrides): Promise<BigNumber>;

  getExpiry(
    account: IDolomiteStructs.AccountInfoStruct,
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getSpreadAdjustedPrices(
    heldMarketId: BigNumberish,
    owedMarketId: BigNumberish,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.MonetaryPriceStructOutput,
      IDolomiteStructs.MonetaryPriceStructOutput
    ] & {
      heldPrice: IDolomiteStructs.MonetaryPriceStructOutput;
      owedPriceAdj: IDolomiteStructs.MonetaryPriceStructOutput;
    }
  >;

  callStatic: {
    g_expiryRampTime(overrides?: CallOverrides): Promise<BigNumber>;

    getExpiry(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getSpreadAdjustedPrices(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryPriceStructOutput,
        IDolomiteStructs.MonetaryPriceStructOutput
      ] & {
        heldPrice: IDolomiteStructs.MonetaryPriceStructOutput;
        owedPriceAdj: IDolomiteStructs.MonetaryPriceStructOutput;
      }
    >;
  };

  filters: {};

  estimateGas: {
    g_expiryRampTime(overrides?: CallOverrides): Promise<BigNumber>;

    getExpiry(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpreadAdjustedPrices(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    g_expiryRampTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpiry(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpreadAdjustedPrices(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
