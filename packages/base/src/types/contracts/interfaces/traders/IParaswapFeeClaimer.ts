/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IParaswapFeeClaimerInterface extends utils.Interface {
  functions: {
    "batchGetBalance(address[],address)": FunctionFragment;
    "batchWithdrawAllERC20(address[],address)": FunctionFragment;
    "batchWithdrawSomeERC20(address[],uint256[],address)": FunctionFragment;
    "getBalance(address,address)": FunctionFragment;
    "getUnallocatedFees(address)": FunctionFragment;
    "registerFee(address,address,uint256)": FunctionFragment;
    "withdrawAllERC20(address,address)": FunctionFragment;
    "withdrawSomeERC20(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchGetBalance"
      | "batchWithdrawAllERC20"
      | "batchWithdrawSomeERC20"
      | "getBalance"
      | "getUnallocatedFees"
      | "registerFee"
      | "withdrawAllERC20"
      | "withdrawSomeERC20"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchGetBalance",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawAllERC20",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawSomeERC20",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnallocatedFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllERC20",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSomeERC20",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchGetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawAllERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawSomeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnallocatedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSomeERC20",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IParaswapFeeClaimer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IParaswapFeeClaimerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchGetBalance(
      _tokens: string[],
      _partner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _fees: BigNumber[] }>;

    batchWithdrawAllERC20(
      _tokens: string[],
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchWithdrawSomeERC20(
      _tokens: string[],
      _tokenAmounts: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBalance(
      _token: string,
      _partner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnallocatedFees(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerFee(
      _account: string,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAllERC20(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawSomeERC20(
      _token: string,
      _tokenAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  batchGetBalance(
    _tokens: string[],
    _partner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  batchWithdrawAllERC20(
    _tokens: string[],
    _recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchWithdrawSomeERC20(
    _tokens: string[],
    _tokenAmounts: BigNumberish[],
    _recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBalance(
    _token: string,
    _partner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnallocatedFees(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerFee(
    _account: string,
    _token: string,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAllERC20(
    _token: string,
    _recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawSomeERC20(
    _token: string,
    _tokenAmount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchGetBalance(
      _tokens: string[],
      _partner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    batchWithdrawAllERC20(
      _tokens: string[],
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batchWithdrawSomeERC20(
      _tokens: string[],
      _tokenAmounts: BigNumberish[],
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBalance(
      _token: string,
      _partner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnallocatedFees(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerFee(
      _account: string,
      _token: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllERC20(
      _token: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawSomeERC20(
      _token: string,
      _tokenAmount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    batchGetBalance(
      _tokens: string[],
      _partner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchWithdrawAllERC20(
      _tokens: string[],
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchWithdrawSomeERC20(
      _tokens: string[],
      _tokenAmounts: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBalance(
      _token: string,
      _partner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnallocatedFees(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerFee(
      _account: string,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAllERC20(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawSomeERC20(
      _token: string,
      _tokenAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchGetBalance(
      _tokens: string[],
      _partner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchWithdrawAllERC20(
      _tokens: string[],
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchWithdrawSomeERC20(
      _tokens: string[],
      _tokenAmounts: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBalance(
      _token: string,
      _partner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnallocatedFees(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerFee(
      _account: string,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAllERC20(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawSomeERC20(
      _token: string,
      _tokenAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
