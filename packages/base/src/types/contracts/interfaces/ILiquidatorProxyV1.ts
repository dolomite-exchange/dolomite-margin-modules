/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type DecimalStruct = { value: BigNumberish };

  export type DecimalStructOutput = [BigNumber] & { value: BigNumber };
}

export interface ILiquidatorProxyV1Interface extends utils.Interface {
  functions: {
    "liquidate((address,uint256),(address,uint256),(uint256),uint256,uint256[],uint256[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "liquidate"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      IDolomiteStructs.AccountInfoStruct,
      IDolomiteStructs.AccountInfoStruct,
      IDolomiteStructs.DecimalStruct,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;

  events: {};
}

export interface ILiquidatorProxyV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidatorProxyV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    liquidate(
      _solidAccount: IDolomiteStructs.AccountInfoStruct,
      _liquidAccount: IDolomiteStructs.AccountInfoStruct,
      _minLiquidatorRatio: IDolomiteStructs.DecimalStruct,
      _minValueLiquidated: BigNumberish,
      _owedPreferences: BigNumberish[],
      _heldPreferences: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  liquidate(
    _solidAccount: IDolomiteStructs.AccountInfoStruct,
    _liquidAccount: IDolomiteStructs.AccountInfoStruct,
    _minLiquidatorRatio: IDolomiteStructs.DecimalStruct,
    _minValueLiquidated: BigNumberish,
    _owedPreferences: BigNumberish[],
    _heldPreferences: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    liquidate(
      _solidAccount: IDolomiteStructs.AccountInfoStruct,
      _liquidAccount: IDolomiteStructs.AccountInfoStruct,
      _minLiquidatorRatio: IDolomiteStructs.DecimalStruct,
      _minValueLiquidated: BigNumberish,
      _owedPreferences: BigNumberish[],
      _heldPreferences: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    liquidate(
      _solidAccount: IDolomiteStructs.AccountInfoStruct,
      _liquidAccount: IDolomiteStructs.AccountInfoStruct,
      _minLiquidatorRatio: IDolomiteStructs.DecimalStruct,
      _minValueLiquidated: BigNumberish,
      _owedPreferences: BigNumberish[],
      _heldPreferences: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    liquidate(
      _solidAccount: IDolomiteStructs.AccountInfoStruct,
      _liquidAccount: IDolomiteStructs.AccountInfoStruct,
      _minLiquidatorRatio: IDolomiteStructs.DecimalStruct,
      _minValueLiquidated: BigNumberish,
      _owedPreferences: BigNumberish[],
      _heldPreferences: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
