/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IDolomiteStructs {
  export type AssetAmountStruct = {
    sign: boolean;
    denomination: BigNumberish;
    ref: BigNumberish;
    value: BigNumberish;
  };

  export type AssetAmountStructOutput = [boolean, number, number, BigNumber] & {
    sign: boolean;
    denomination: number;
    ref: number;
    value: BigNumber;
  };

  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type ParStruct = { sign: boolean; value: BigNumberish };

  export type ParStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type WeiStruct = { sign: boolean; value: BigNumberish };

  export type WeiStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };
}

export interface TestDolomiteMarginInternalTraderInterface
  extends utils.Interface {
  functions: {
    "data(uint256)": FunctionFragment;
    "getTradeCost(uint256,uint256,(address,uint256),(address,uint256),(bool,uint128),(bool,uint128),(bool,uint256),bytes)": FunctionFragment;
    "requireInputMarketId()": FunctionFragment;
    "requireInputWei()": FunctionFragment;
    "requireMakerAccount()": FunctionFragment;
    "requireNewInputPar()": FunctionFragment;
    "requireOldInputPar()": FunctionFragment;
    "requireOutputMarketId()": FunctionFragment;
    "requireTakerAccount()": FunctionFragment;
    "setData(uint256,(bool,uint8,uint8,uint256))": FunctionFragment;
    "setRequireInputMarketId(uint256)": FunctionFragment;
    "setRequireInputWei((bool,uint256))": FunctionFragment;
    "setRequireMakerAccount((address,uint256))": FunctionFragment;
    "setRequireNewInputPar((bool,uint128))": FunctionFragment;
    "setRequireOldInputPar((bool,uint128))": FunctionFragment;
    "setRequireOutputMarketId(uint256)": FunctionFragment;
    "setRequireTakerAccount((address,uint256))": FunctionFragment;
    "valid(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "data"
      | "getTradeCost"
      | "requireInputMarketId"
      | "requireInputWei"
      | "requireMakerAccount"
      | "requireNewInputPar"
      | "requireOldInputPar"
      | "requireOutputMarketId"
      | "requireTakerAccount"
      | "setData"
      | "setRequireInputMarketId"
      | "setRequireInputWei"
      | "setRequireMakerAccount"
      | "setRequireNewInputPar"
      | "setRequireOldInputPar"
      | "setRequireOutputMarketId"
      | "setRequireTakerAccount"
      | "valid"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "data", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getTradeCost",
    values: [
      BigNumberish,
      BigNumberish,
      IDolomiteStructs.AccountInfoStruct,
      IDolomiteStructs.AccountInfoStruct,
      IDolomiteStructs.ParStruct,
      IDolomiteStructs.ParStruct,
      IDolomiteStructs.WeiStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requireInputMarketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireInputWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireMakerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireNewInputPar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireOldInputPar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireOutputMarketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireTakerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BigNumberish, IDolomiteStructs.AssetAmountStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireInputMarketId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireInputWei",
    values: [IDolomiteStructs.WeiStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireMakerAccount",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireNewInputPar",
    values: [IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireOldInputPar",
    values: [IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireOutputMarketId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireTakerAccount",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(functionFragment: "valid", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireInputMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireInputWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireMakerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireNewInputPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireOldInputPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireOutputMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireTakerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequireInputMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequireInputWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequireMakerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequireNewInputPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequireOldInputPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequireOutputMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequireTakerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valid", data: BytesLike): Result;

  events: {
    "DataDeleted(uint256)": EventFragment;
    "DataSet(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSet"): EventFragment;
}

export interface DataDeletedEventObject {
  input: BigNumber;
}
export type DataDeletedEvent = TypedEvent<[BigNumber], DataDeletedEventObject>;

export type DataDeletedEventFilter = TypedEventFilter<DataDeletedEvent>;

export interface DataSetEventObject {
  input: BigNumber;
  output: IDolomiteStructs.AssetAmountStructOutput;
}
export type DataSetEvent = TypedEvent<
  [BigNumber, IDolomiteStructs.AssetAmountStructOutput],
  DataSetEventObject
>;

export type DataSetEventFilter = TypedEventFilter<DataSetEvent>;

export interface TestDolomiteMarginInternalTrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestDolomiteMarginInternalTraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, BigNumber] & {
        sign: boolean;
        denomination: number;
        ref: number;
        value: BigNumber;
      }
    >;

    getTradeCost(
      inputMarketId: BigNumberish,
      outputMarketId: BigNumberish,
      makerAccount: IDolomiteStructs.AccountInfoStruct,
      takerAccount: IDolomiteStructs.AccountInfoStruct,
      oldInputPar: IDolomiteStructs.ParStruct,
      newInputPar: IDolomiteStructs.ParStruct,
      inputWei: IDolomiteStructs.WeiStruct,
      tradeData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requireInputMarketId(overrides?: CallOverrides): Promise<[BigNumber]>;

    requireInputWei(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    requireMakerAccount(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

    requireNewInputPar(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    requireOldInputPar(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    requireOutputMarketId(overrides?: CallOverrides): Promise<[BigNumber]>;

    requireTakerAccount(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

    setData(
      input: BigNumberish,
      output: IDolomiteStructs.AssetAmountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRequireInputMarketId(
      inputMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRequireInputWei(
      inputWei: IDolomiteStructs.WeiStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRequireMakerAccount(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRequireNewInputPar(
      newInputPar: IDolomiteStructs.ParStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRequireOldInputPar(
      oldInputPar: IDolomiteStructs.ParStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRequireOutputMarketId(
      outputMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRequireTakerAccount(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    valid(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
  };

  data(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, number, BigNumber] & {
      sign: boolean;
      denomination: number;
      ref: number;
      value: BigNumber;
    }
  >;

  getTradeCost(
    inputMarketId: BigNumberish,
    outputMarketId: BigNumberish,
    makerAccount: IDolomiteStructs.AccountInfoStruct,
    takerAccount: IDolomiteStructs.AccountInfoStruct,
    oldInputPar: IDolomiteStructs.ParStruct,
    newInputPar: IDolomiteStructs.ParStruct,
    inputWei: IDolomiteStructs.WeiStruct,
    tradeData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requireInputMarketId(overrides?: CallOverrides): Promise<BigNumber>;

  requireInputWei(
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

  requireMakerAccount(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

  requireNewInputPar(
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

  requireOldInputPar(
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

  requireOutputMarketId(overrides?: CallOverrides): Promise<BigNumber>;

  requireTakerAccount(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

  setData(
    input: BigNumberish,
    output: IDolomiteStructs.AssetAmountStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRequireInputMarketId(
    inputMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRequireInputWei(
    inputWei: IDolomiteStructs.WeiStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRequireMakerAccount(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRequireNewInputPar(
    newInputPar: IDolomiteStructs.ParStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRequireOldInputPar(
    oldInputPar: IDolomiteStructs.ParStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRequireOutputMarketId(
    outputMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRequireTakerAccount(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  valid(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, BigNumber] & {
        sign: boolean;
        denomination: number;
        ref: number;
        value: BigNumber;
      }
    >;

    getTradeCost(
      inputMarketId: BigNumberish,
      outputMarketId: BigNumberish,
      makerAccount: IDolomiteStructs.AccountInfoStruct,
      takerAccount: IDolomiteStructs.AccountInfoStruct,
      oldInputPar: IDolomiteStructs.ParStruct,
      newInputPar: IDolomiteStructs.ParStruct,
      inputWei: IDolomiteStructs.WeiStruct,
      tradeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.AssetAmountStructOutput>;

    requireInputMarketId(overrides?: CallOverrides): Promise<BigNumber>;

    requireInputWei(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    requireMakerAccount(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

    requireNewInputPar(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    requireOldInputPar(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    requireOutputMarketId(overrides?: CallOverrides): Promise<BigNumber>;

    requireTakerAccount(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

    setData(
      input: BigNumberish,
      output: IDolomiteStructs.AssetAmountStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequireInputMarketId(
      inputMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequireInputWei(
      inputWei: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequireMakerAccount(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequireNewInputPar(
      newInputPar: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequireOldInputPar(
      oldInputPar: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequireOutputMarketId(
      outputMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequireTakerAccount(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    valid(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "DataDeleted(uint256)"(input?: BigNumberish | null): DataDeletedEventFilter;
    DataDeleted(input?: BigNumberish | null): DataDeletedEventFilter;

    "DataSet(uint256,tuple)"(
      input?: BigNumberish | null,
      output?: null
    ): DataSetEventFilter;
    DataSet(input?: BigNumberish | null, output?: null): DataSetEventFilter;
  };

  estimateGas: {
    data(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTradeCost(
      inputMarketId: BigNumberish,
      outputMarketId: BigNumberish,
      makerAccount: IDolomiteStructs.AccountInfoStruct,
      takerAccount: IDolomiteStructs.AccountInfoStruct,
      oldInputPar: IDolomiteStructs.ParStruct,
      newInputPar: IDolomiteStructs.ParStruct,
      inputWei: IDolomiteStructs.WeiStruct,
      tradeData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requireInputMarketId(overrides?: CallOverrides): Promise<BigNumber>;

    requireInputWei(overrides?: CallOverrides): Promise<BigNumber>;

    requireMakerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    requireNewInputPar(overrides?: CallOverrides): Promise<BigNumber>;

    requireOldInputPar(overrides?: CallOverrides): Promise<BigNumber>;

    requireOutputMarketId(overrides?: CallOverrides): Promise<BigNumber>;

    requireTakerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    setData(
      input: BigNumberish,
      output: IDolomiteStructs.AssetAmountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRequireInputMarketId(
      inputMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRequireInputWei(
      inputWei: IDolomiteStructs.WeiStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRequireMakerAccount(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRequireNewInputPar(
      newInputPar: IDolomiteStructs.ParStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRequireOldInputPar(
      oldInputPar: IDolomiteStructs.ParStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRequireOutputMarketId(
      outputMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRequireTakerAccount(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    valid(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeCost(
      inputMarketId: BigNumberish,
      outputMarketId: BigNumberish,
      makerAccount: IDolomiteStructs.AccountInfoStruct,
      takerAccount: IDolomiteStructs.AccountInfoStruct,
      oldInputPar: IDolomiteStructs.ParStruct,
      newInputPar: IDolomiteStructs.ParStruct,
      inputWei: IDolomiteStructs.WeiStruct,
      tradeData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requireInputMarketId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireInputWei(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requireMakerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireNewInputPar(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireOldInputPar(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireOutputMarketId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireTakerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setData(
      input: BigNumberish,
      output: IDolomiteStructs.AssetAmountStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRequireInputMarketId(
      inputMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRequireInputWei(
      inputWei: IDolomiteStructs.WeiStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRequireMakerAccount(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRequireNewInputPar(
      newInputPar: IDolomiteStructs.ParStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRequireOldInputPar(
      oldInputPar: IDolomiteStructs.ParStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRequireOutputMarketId(
      outputMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRequireTakerAccount(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    valid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
