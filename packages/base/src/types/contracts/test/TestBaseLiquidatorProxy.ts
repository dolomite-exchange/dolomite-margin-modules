/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IDolomiteStructs {
  export type WeiStruct = { sign: boolean; value: BigNumberish };

  export type WeiStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type MonetaryPriceStruct = { value: BigNumberish };

  export type MonetaryPriceStructOutput = [BigNumber] & { value: BigNumber };

  export type InterestIndexStruct = {
    borrow: BigNumberish;
    supply: BigNumberish;
    lastUpdate: BigNumberish;
  };

  export type InterestIndexStructOutput = [BigNumber, BigNumber, number] & {
    borrow: BigNumber;
    supply: BigNumber;
    lastUpdate: number;
  };

  export type MonetaryValueStruct = { value: BigNumberish };

  export type MonetaryValueStructOutput = [BigNumber] & { value: BigNumber };

  export type DecimalStruct = { value: BigNumberish };

  export type DecimalStructOutput = [BigNumber] & { value: BigNumber };
}

export declare namespace BaseLiquidatorProxy {
  export type LiquidatorProxyCacheStruct = {
    owedWeiToLiquidate: BigNumberish;
    solidHeldUpdateWithReward: BigNumberish;
    solidHeldWei: IDolomiteStructs.WeiStruct;
    solidOwedWei: IDolomiteStructs.WeiStruct;
    liquidHeldWei: IDolomiteStructs.WeiStruct;
    liquidOwedWei: IDolomiteStructs.WeiStruct;
    flipMarketsForExpiration: boolean;
    heldPrice: BigNumberish;
    owedPrice: BigNumberish;
    owedPriceAdj: BigNumberish;
  };

  export type LiquidatorProxyCacheStructOutput = [
    BigNumber,
    BigNumber,
    IDolomiteStructs.WeiStructOutput,
    IDolomiteStructs.WeiStructOutput,
    IDolomiteStructs.WeiStructOutput,
    IDolomiteStructs.WeiStructOutput,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owedWeiToLiquidate: BigNumber;
    solidHeldUpdateWithReward: BigNumber;
    solidHeldWei: IDolomiteStructs.WeiStructOutput;
    solidOwedWei: IDolomiteStructs.WeiStructOutput;
    liquidHeldWei: IDolomiteStructs.WeiStructOutput;
    liquidOwedWei: IDolomiteStructs.WeiStructOutput;
    flipMarketsForExpiration: boolean;
    heldPrice: BigNumber;
    owedPrice: BigNumber;
    owedPriceAdj: BigNumber;
  };

  export type MarketInfoStruct = {
    marketId: BigNumberish;
    price: IDolomiteStructs.MonetaryPriceStruct;
    index: IDolomiteStructs.InterestIndexStruct;
  };

  export type MarketInfoStructOutput = [
    BigNumber,
    IDolomiteStructs.MonetaryPriceStructOutput,
    IDolomiteStructs.InterestIndexStructOutput
  ] & {
    marketId: BigNumber;
    price: IDolomiteStructs.MonetaryPriceStructOutput;
    index: IDolomiteStructs.InterestIndexStructOutput;
  };

  export type LiquidatorProxyConstantsStruct = {
    solidAccount: IDolomiteStructs.AccountInfoStruct;
    liquidAccount: IDolomiteStructs.AccountInfoStruct;
    heldMarket: BigNumberish;
    owedMarket: BigNumberish;
    markets: BaseLiquidatorProxy.MarketInfoStruct[];
    liquidMarkets: BigNumberish[];
    expirationTimestamp: BigNumberish;
  };

  export type LiquidatorProxyConstantsStructOutput = [
    IDolomiteStructs.AccountInfoStructOutput,
    IDolomiteStructs.AccountInfoStructOutput,
    BigNumber,
    BigNumber,
    BaseLiquidatorProxy.MarketInfoStructOutput[],
    BigNumber[],
    BigNumber
  ] & {
    solidAccount: IDolomiteStructs.AccountInfoStructOutput;
    liquidAccount: IDolomiteStructs.AccountInfoStructOutput;
    heldMarket: BigNumber;
    owedMarket: BigNumber;
    markets: BaseLiquidatorProxy.MarketInfoStructOutput[];
    liquidMarkets: BigNumber[];
    expirationTimestamp: BigNumber;
  };
}

export interface TestBaseLiquidatorProxyInterface extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "EXPIRY()": FunctionFragment;
    "LIQUIDATOR_ASSET_REGISTRY()": FunctionFragment;
    "calculateAndSetActualLiquidationAmount(uint256,uint256,(uint256,uint256,(bool,uint256),(bool,uint256),(bool,uint256),(bool,uint256),bool,uint256,uint256,uint256))": FunctionFragment;
    "calculateAndSetMaxLiquidationAmount((uint256,uint256,(bool,uint256),(bool,uint256),(bool,uint256),(bool,uint256),bool,uint256,uint256,uint256))": FunctionFragment;
    "checkBasicRequirements(((address,uint256),(address,uint256),uint256,uint256,(uint256,(uint256),(uint96,uint96,uint32))[],uint256[],uint256))": FunctionFragment;
    "checkConstants(((address,uint256),(address,uint256),uint256,uint256,(uint256,(uint256),(uint96,uint96,uint32))[],uint256[],uint256))": FunctionFragment;
    "getAccountValues((uint256,(uint256),(uint96,uint96,uint32))[],(address,uint256),uint256[])": FunctionFragment;
    "getAdjustedAccountValues((uint256,(uint256),(uint96,uint96,uint32))[],(address,uint256),uint256[])": FunctionFragment;
    "getMarketInfos(uint256[],uint256[])": FunctionFragment;
    "initializeCache(((address,uint256),(address,uint256),uint256,uint256,(uint256,(uint256),(uint96,uint96,uint32))[],uint256[],uint256))": FunctionFragment;
    "isCollateralized(uint256,uint256,(uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "EXPIRY"
      | "LIQUIDATOR_ASSET_REGISTRY"
      | "calculateAndSetActualLiquidationAmount"
      | "calculateAndSetMaxLiquidationAmount"
      | "checkBasicRequirements"
      | "checkConstants"
      | "getAccountValues"
      | "getAdjustedAccountValues"
      | "getMarketInfos"
      | "initializeCache"
      | "isCollateralized"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EXPIRY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATOR_ASSET_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAndSetActualLiquidationAmount",
    values: [
      BigNumberish,
      BigNumberish,
      BaseLiquidatorProxy.LiquidatorProxyCacheStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAndSetMaxLiquidationAmount",
    values: [BaseLiquidatorProxy.LiquidatorProxyCacheStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBasicRequirements",
    values: [BaseLiquidatorProxy.LiquidatorProxyConstantsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkConstants",
    values: [BaseLiquidatorProxy.LiquidatorProxyConstantsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValues",
    values: [
      BaseLiquidatorProxy.MarketInfoStruct[],
      IDolomiteStructs.AccountInfoStruct,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdjustedAccountValues",
    values: [
      BaseLiquidatorProxy.MarketInfoStruct[],
      IDolomiteStructs.AccountInfoStruct,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfos",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCache",
    values: [BaseLiquidatorProxy.LiquidatorProxyConstantsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralized",
    values: [BigNumberish, BigNumberish, IDolomiteStructs.DecimalStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EXPIRY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATOR_ASSET_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAndSetActualLiquidationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAndSetMaxLiquidationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBasicRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdjustedAccountValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralized",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestBaseLiquidatorProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestBaseLiquidatorProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    EXPIRY(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATOR_ASSET_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    calculateAndSetActualLiquidationAmount(
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput,
        BigNumber,
        BigNumber
      ] & {
        newCache: BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput;
        newInputAmountWei: BigNumber;
        newMinOutputAmountWei: BigNumber;
      }
    >;

    calculateAndSetMaxLiquidationAmount(
      _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
      overrides?: CallOverrides
    ): Promise<[BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput]>;

    checkBasicRequirements(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkConstants(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getAccountValues(
      _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
      _account: IDolomiteStructs.AccountInfoStruct,
      _marketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryValueStructOutput,
        IDolomiteStructs.MonetaryValueStructOutput
      ]
    >;

    getAdjustedAccountValues(
      _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
      _account: IDolomiteStructs.AccountInfoStruct,
      _marketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryValueStructOutput,
        IDolomiteStructs.MonetaryValueStructOutput
      ]
    >;

    getMarketInfos(
      _solidMarketIds: BigNumberish[],
      _liquidMarketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BaseLiquidatorProxy.MarketInfoStructOutput[]]>;

    initializeCache(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<[BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput]>;

    isCollateralized(
      _supplyValue: BigNumberish,
      _borrowValue: BigNumberish,
      _ratio: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  EXPIRY(overrides?: CallOverrides): Promise<string>;

  LIQUIDATOR_ASSET_REGISTRY(overrides?: CallOverrides): Promise<string>;

  calculateAndSetActualLiquidationAmount(
    _inputAmountWei: BigNumberish,
    _minOutputAmountWei: BigNumberish,
    _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput,
      BigNumber,
      BigNumber
    ] & {
      newCache: BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput;
      newInputAmountWei: BigNumber;
      newMinOutputAmountWei: BigNumber;
    }
  >;

  calculateAndSetMaxLiquidationAmount(
    _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
    overrides?: CallOverrides
  ): Promise<BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput>;

  checkBasicRequirements(
    _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  checkConstants(
    _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  getAccountValues(
    _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
    _account: IDolomiteStructs.AccountInfoStruct,
    _marketIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.MonetaryValueStructOutput,
      IDolomiteStructs.MonetaryValueStructOutput
    ]
  >;

  getAdjustedAccountValues(
    _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
    _account: IDolomiteStructs.AccountInfoStruct,
    _marketIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.MonetaryValueStructOutput,
      IDolomiteStructs.MonetaryValueStructOutput
    ]
  >;

  getMarketInfos(
    _solidMarketIds: BigNumberish[],
    _liquidMarketIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BaseLiquidatorProxy.MarketInfoStructOutput[]>;

  initializeCache(
    _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
    overrides?: CallOverrides
  ): Promise<BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput>;

  isCollateralized(
    _supplyValue: BigNumberish,
    _borrowValue: BigNumberish,
    _ratio: IDolomiteStructs.DecimalStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    EXPIRY(overrides?: CallOverrides): Promise<string>;

    LIQUIDATOR_ASSET_REGISTRY(overrides?: CallOverrides): Promise<string>;

    calculateAndSetActualLiquidationAmount(
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput,
        BigNumber,
        BigNumber
      ] & {
        newCache: BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput;
        newInputAmountWei: BigNumber;
        newMinOutputAmountWei: BigNumber;
      }
    >;

    calculateAndSetMaxLiquidationAmount(
      _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
      overrides?: CallOverrides
    ): Promise<BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput>;

    checkBasicRequirements(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    checkConstants(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountValues(
      _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
      _account: IDolomiteStructs.AccountInfoStruct,
      _marketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryValueStructOutput,
        IDolomiteStructs.MonetaryValueStructOutput
      ]
    >;

    getAdjustedAccountValues(
      _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
      _account: IDolomiteStructs.AccountInfoStruct,
      _marketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryValueStructOutput,
        IDolomiteStructs.MonetaryValueStructOutput
      ]
    >;

    getMarketInfos(
      _solidMarketIds: BigNumberish[],
      _liquidMarketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BaseLiquidatorProxy.MarketInfoStructOutput[]>;

    initializeCache(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<BaseLiquidatorProxy.LiquidatorProxyCacheStructOutput>;

    isCollateralized(
      _supplyValue: BigNumberish,
      _borrowValue: BigNumberish,
      _ratio: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    EXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATOR_ASSET_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAndSetActualLiquidationAmount(
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateAndSetMaxLiquidationAmount(
      _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkBasicRequirements(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkConstants(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountValues(
      _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
      _account: IDolomiteStructs.AccountInfoStruct,
      _marketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdjustedAccountValues(
      _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
      _account: IDolomiteStructs.AccountInfoStruct,
      _marketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfos(
      _solidMarketIds: BigNumberish[],
      _liquidMarketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeCache(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateralized(
      _supplyValue: BigNumberish,
      _borrowValue: BigNumberish,
      _ratio: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXPIRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATOR_ASSET_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateAndSetActualLiquidationAmount(
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateAndSetMaxLiquidationAmount(
      _cache: BaseLiquidatorProxy.LiquidatorProxyCacheStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkBasicRequirements(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkConstants(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountValues(
      _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
      _account: IDolomiteStructs.AccountInfoStruct,
      _marketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdjustedAccountValues(
      _marketInfos: BaseLiquidatorProxy.MarketInfoStruct[],
      _account: IDolomiteStructs.AccountInfoStruct,
      _marketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfos(
      _solidMarketIds: BigNumberish[],
      _liquidMarketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeCache(
      _constants: BaseLiquidatorProxy.LiquidatorProxyConstantsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollateralized(
      _supplyValue: BigNumberish,
      _borrowValue: BigNumberish,
      _ratio: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
