/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IDolomiteStructs {
  export type DecimalStruct = { value: BigNumberish };

  export type DecimalStructOutput = [BigNumber] & { value: BigNumber };
}

export interface TestDecimalLibInterface extends utils.Interface {
  functions: {
    "DecimalLibDiv(uint256,(uint256))": FunctionFragment;
    "DecimalLibMul(uint256,(uint256))": FunctionFragment;
    "DecimalLibOne()": FunctionFragment;
    "DecimalLibOnePlus((uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DecimalLibDiv"
      | "DecimalLibMul"
      | "DecimalLibOne"
      | "DecimalLibOnePlus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DecimalLibDiv",
    values: [BigNumberish, IDolomiteStructs.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "DecimalLibMul",
    values: [BigNumberish, IDolomiteStructs.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "DecimalLibOne",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DecimalLibOnePlus",
    values: [IDolomiteStructs.DecimalStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DecimalLibDiv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DecimalLibMul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DecimalLibOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DecimalLibOnePlus",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestDecimalLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestDecimalLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DecimalLibDiv(
      _target: BigNumberish,
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DecimalLibMul(
      _target: BigNumberish,
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DecimalLibOne(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.DecimalStructOutput]>;

    DecimalLibOnePlus(
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.DecimalStructOutput]>;
  };

  DecimalLibDiv(
    _target: BigNumberish,
    _decimal: IDolomiteStructs.DecimalStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  DecimalLibMul(
    _target: BigNumberish,
    _decimal: IDolomiteStructs.DecimalStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  DecimalLibOne(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.DecimalStructOutput>;

  DecimalLibOnePlus(
    _decimal: IDolomiteStructs.DecimalStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.DecimalStructOutput>;

  callStatic: {
    DecimalLibDiv(
      _target: BigNumberish,
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DecimalLibMul(
      _target: BigNumberish,
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DecimalLibOne(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.DecimalStructOutput>;

    DecimalLibOnePlus(
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.DecimalStructOutput>;
  };

  filters: {};

  estimateGas: {
    DecimalLibDiv(
      _target: BigNumberish,
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DecimalLibMul(
      _target: BigNumberish,
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DecimalLibOne(overrides?: CallOverrides): Promise<BigNumber>;

    DecimalLibOnePlus(
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DecimalLibDiv(
      _target: BigNumberish,
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DecimalLibMul(
      _target: BigNumberish,
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DecimalLibOne(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DecimalLibOnePlus(
      _decimal: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
