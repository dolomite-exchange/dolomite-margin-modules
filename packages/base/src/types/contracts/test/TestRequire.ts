/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface TestRequireInterface extends utils.Interface {
  functions: {
    "RequireNotThatB2(bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "RequireThat0(bytes32)": FunctionFragment;
    "RequireThat1(bytes32,uint256)": FunctionFragment;
    "RequireThat2(bytes32,uint256,uint256)": FunctionFragment;
    "RequireThat2IsTrue(bytes32,uint256,uint256)": FunctionFragment;
    "RequireThatA0(bytes32,address)": FunctionFragment;
    "RequireThatA0IsTrue(bytes32,address)": FunctionFragment;
    "RequireThatA1(bytes32,address,uint256)": FunctionFragment;
    "RequireThatA1IsTrue(bytes32,address,uint256)": FunctionFragment;
    "RequireThatA2(bytes32,address,uint256,uint256)": FunctionFragment;
    "RequireThatA2IsTrue(bytes32,address,uint256,uint256)": FunctionFragment;
    "RequireThatB0(bytes32,bytes32)": FunctionFragment;
    "RequireThatB0IsTrue(bytes32,bytes32)": FunctionFragment;
    "RequireThatB2(bytes32,bytes32,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RequireNotThatB2"
      | "RequireThat0"
      | "RequireThat1"
      | "RequireThat2"
      | "RequireThat2IsTrue"
      | "RequireThatA0"
      | "RequireThatA0IsTrue"
      | "RequireThatA1"
      | "RequireThatA1IsTrue"
      | "RequireThatA2"
      | "RequireThatA2IsTrue"
      | "RequireThatB0"
      | "RequireThatB0IsTrue"
      | "RequireThatB2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RequireNotThatB2",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThat0",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThat1",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThat2",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThat2IsTrue",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatA0",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatA0IsTrue",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatA1",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatA1IsTrue",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatA2",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatA2IsTrue",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatB0",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatB0IsTrue",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "RequireThatB2",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "RequireNotThatB2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThat0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThat1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThat2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThat2IsTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatA0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatA0IsTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatA1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatA1IsTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatA2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatA2IsTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatB0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatB0IsTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RequireThatB2",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestRequire extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestRequireInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RequireNotThatB2(
      reason: BytesLike,
      payloadA: BytesLike,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThat0(reason: BytesLike, overrides?: CallOverrides): Promise<[void]>;

    RequireThat1(
      reason: BytesLike,
      payloadA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThat2(
      reason: BytesLike,
      payloadA: BigNumberish,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThat2IsTrue(
      reason: BytesLike,
      payloadA: BigNumberish,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatA0(
      reason: BytesLike,
      payloadA: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatA0IsTrue(
      reason: BytesLike,
      payloadA: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatA1(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatA1IsTrue(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatA2(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatA2IsTrue(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatB0(
      reason: BytesLike,
      payloadA: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatB0IsTrue(
      reason: BytesLike,
      payloadA: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    RequireThatB2(
      reason: BytesLike,
      payloadA: BytesLike,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  RequireNotThatB2(
    reason: BytesLike,
    payloadA: BytesLike,
    payloadB: BigNumberish,
    payloadC: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThat0(reason: BytesLike, overrides?: CallOverrides): Promise<void>;

  RequireThat1(
    reason: BytesLike,
    payloadA: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThat2(
    reason: BytesLike,
    payloadA: BigNumberish,
    payloadB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThat2IsTrue(
    reason: BytesLike,
    payloadA: BigNumberish,
    payloadB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatA0(
    reason: BytesLike,
    payloadA: string,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatA0IsTrue(
    reason: BytesLike,
    payloadA: string,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatA1(
    reason: BytesLike,
    payloadA: string,
    payloadB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatA1IsTrue(
    reason: BytesLike,
    payloadA: string,
    payloadB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatA2(
    reason: BytesLike,
    payloadA: string,
    payloadB: BigNumberish,
    payloadC: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatA2IsTrue(
    reason: BytesLike,
    payloadA: string,
    payloadB: BigNumberish,
    payloadC: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatB0(
    reason: BytesLike,
    payloadA: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatB0IsTrue(
    reason: BytesLike,
    payloadA: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  RequireThatB2(
    reason: BytesLike,
    payloadA: BytesLike,
    payloadB: BigNumberish,
    payloadC: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    RequireNotThatB2(
      reason: BytesLike,
      payloadA: BytesLike,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThat0(reason: BytesLike, overrides?: CallOverrides): Promise<void>;

    RequireThat1(
      reason: BytesLike,
      payloadA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThat2(
      reason: BytesLike,
      payloadA: BigNumberish,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThat2IsTrue(
      reason: BytesLike,
      payloadA: BigNumberish,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatA0(
      reason: BytesLike,
      payloadA: string,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatA0IsTrue(
      reason: BytesLike,
      payloadA: string,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatA1(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatA1IsTrue(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatA2(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatA2IsTrue(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatB0(
      reason: BytesLike,
      payloadA: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatB0IsTrue(
      reason: BytesLike,
      payloadA: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    RequireThatB2(
      reason: BytesLike,
      payloadA: BytesLike,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    RequireNotThatB2(
      reason: BytesLike,
      payloadA: BytesLike,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThat0(
      reason: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThat1(
      reason: BytesLike,
      payloadA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThat2(
      reason: BytesLike,
      payloadA: BigNumberish,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThat2IsTrue(
      reason: BytesLike,
      payloadA: BigNumberish,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatA0(
      reason: BytesLike,
      payloadA: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatA0IsTrue(
      reason: BytesLike,
      payloadA: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatA1(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatA1IsTrue(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatA2(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatA2IsTrue(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatB0(
      reason: BytesLike,
      payloadA: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatB0IsTrue(
      reason: BytesLike,
      payloadA: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RequireThatB2(
      reason: BytesLike,
      payloadA: BytesLike,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RequireNotThatB2(
      reason: BytesLike,
      payloadA: BytesLike,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThat0(
      reason: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThat1(
      reason: BytesLike,
      payloadA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThat2(
      reason: BytesLike,
      payloadA: BigNumberish,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThat2IsTrue(
      reason: BytesLike,
      payloadA: BigNumberish,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatA0(
      reason: BytesLike,
      payloadA: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatA0IsTrue(
      reason: BytesLike,
      payloadA: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatA1(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatA1IsTrue(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatA2(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatA2IsTrue(
      reason: BytesLike,
      payloadA: string,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatB0(
      reason: BytesLike,
      payloadA: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatB0IsTrue(
      reason: BytesLike,
      payloadA: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RequireThatB2(
      reason: BytesLike,
      payloadA: BytesLike,
      payloadB: BigNumberish,
      payloadC: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
