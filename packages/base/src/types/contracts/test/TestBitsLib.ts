/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface TestBitsLibInterface extends utils.Interface {
  functions: {
    "BitsLibCreateBitmaps(uint256)": FunctionFragment;
    "BitsLibGetLeastSignificantBit(uint256)": FunctionFragment;
    "BitsLibGetMarketIdFromBit(uint256,uint256)": FunctionFragment;
    "BitsLibHasBit(uint256[],uint256)": FunctionFragment;
    "BitsLibSetBit(uint256[],uint256)": FunctionFragment;
    "BitsLibUnsetBit(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BitsLibCreateBitmaps"
      | "BitsLibGetLeastSignificantBit"
      | "BitsLibGetMarketIdFromBit"
      | "BitsLibHasBit"
      | "BitsLibSetBit"
      | "BitsLibUnsetBit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BitsLibCreateBitmaps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "BitsLibGetLeastSignificantBit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "BitsLibGetMarketIdFromBit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "BitsLibHasBit",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "BitsLibSetBit",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "BitsLibUnsetBit",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BitsLibCreateBitmaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BitsLibGetLeastSignificantBit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BitsLibGetMarketIdFromBit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BitsLibHasBit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BitsLibSetBit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BitsLibUnsetBit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestBitsLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestBitsLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BitsLibCreateBitmaps(
      _maxLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    BitsLibGetLeastSignificantBit(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    BitsLibGetMarketIdFromBit(
      _index: BigNumberish,
      _bit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    BitsLibHasBit(
      _bitmaps: BigNumberish[],
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    BitsLibSetBit(
      _bitmaps: BigNumberish[],
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    BitsLibUnsetBit(
      _bitmap: BigNumberish,
      _bit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BitsLibCreateBitmaps(
    _maxLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  BitsLibGetLeastSignificantBit(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  BitsLibGetMarketIdFromBit(
    _index: BigNumberish,
    _bit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  BitsLibHasBit(
    _bitmaps: BigNumberish[],
    _marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  BitsLibSetBit(
    _bitmaps: BigNumberish[],
    _marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  BitsLibUnsetBit(
    _bitmap: BigNumberish,
    _bit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BitsLibCreateBitmaps(
      _maxLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    BitsLibGetLeastSignificantBit(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BitsLibGetMarketIdFromBit(
      _index: BigNumberish,
      _bit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BitsLibHasBit(
      _bitmaps: BigNumberish[],
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    BitsLibSetBit(
      _bitmaps: BigNumberish[],
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    BitsLibUnsetBit(
      _bitmap: BigNumberish,
      _bit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BitsLibCreateBitmaps(
      _maxLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BitsLibGetLeastSignificantBit(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BitsLibGetMarketIdFromBit(
      _index: BigNumberish,
      _bit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BitsLibHasBit(
      _bitmaps: BigNumberish[],
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BitsLibSetBit(
      _bitmaps: BigNumberish[],
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BitsLibUnsetBit(
      _bitmap: BigNumberish,
      _bit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BitsLibCreateBitmaps(
      _maxLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BitsLibGetLeastSignificantBit(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BitsLibGetMarketIdFromBit(
      _index: BigNumberish,
      _bit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BitsLibHasBit(
      _bitmaps: BigNumberish[],
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BitsLibSetBit(
      _bitmaps: BigNumberish[],
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BitsLibUnsetBit(
      _bitmap: BigNumberish,
      _bit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
