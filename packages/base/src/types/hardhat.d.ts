/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BaseLiquidatorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseLiquidatorProxy__factory>;
    getContractFactory(
      name: "BaseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRegistry__factory>;
    getContractFactory(
      name: "DolomiteRegistryImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DolomiteRegistryImplementation__factory>;
    getContractFactory(
      name: "EventEmitterRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventEmitterRegistry__factory>;
    getContractFactory(
      name: "HandlerRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HandlerRegistry__factory>;
    getContractFactory(
      name: "HasLiquidatorRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasLiquidatorRegistry__factory>;
    getContractFactory(
      name: "MinimalERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalERC20__factory>;
    getContractFactory(
      name: "RegistryProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryProxy__factory>;
    getContractFactory(
      name: "OnlyDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyDolomiteMargin__factory>;
    getContractFactory(
      name: "OnlyDolomiteMarginForUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyDolomiteMarginForUpgradeable__factory>;
    getContractFactory(
      name: "IAlgebraV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlgebraV3Pool__factory>;
    getContractFactory(
      name: "IAuthorizationBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizationBase__factory>;
    getContractFactory(
      name: "IBaseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistry__factory>;
    getContractFactory(
      name: "IBorrowPositionProxyV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowPositionProxyV1__factory>;
    getContractFactory(
      name: "IBorrowPositionProxyV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowPositionProxyV2__factory>;
    getContractFactory(
      name: "IDepositWithdrawalProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositWithdrawalProxy__factory>;
    getContractFactory(
      name: "IDolomiteMarginUnwrapperTraderForLiquidatorV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginUnwrapperTraderForLiquidatorV3__factory>;
    getContractFactory(
      name: "IDolomiteMarginWrapperTraderForLiquidatorV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginWrapperTraderForLiquidatorV3__factory>;
    getContractFactory(
      name: "IDolomiteRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteRegistry__factory>;
    getContractFactory(
      name: "IERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Mintable__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "IEventEmitterRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEventEmitterRegistry__factory>;
    getContractFactory(
      name: "IExpiry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExpiry__factory>;
    getContractFactory(
      name: "IGenericTraderProxyV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericTraderProxyV1__factory>;
    getContractFactory(
      name: "IHandlerRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHandlerRegistry__factory>;
    getContractFactory(
      name: "ILiquidatorAssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidatorAssetRegistry__factory>;
    getContractFactory(
      name: "ILiquidatorProxyV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidatorProxyV1__factory>;
    getContractFactory(
      name: "ILiquidatorProxyV1WithAmm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidatorProxyV1WithAmm__factory>;
    getContractFactory(
      name: "ILiquidatorProxyV2WithExternalLiquidity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidatorProxyV2WithExternalLiquidity__factory>;
    getContractFactory(
      name: "ILiquidatorProxyV3WithLiquidityToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidatorProxyV3WithLiquidityToken__factory>;
    getContractFactory(
      name: "ILiquidatorProxyV4WithGenericTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidatorProxyV4WithGenericTrader__factory>;
    getContractFactory(
      name: "IOnlyDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOnlyDolomiteMargin__factory>;
    getContractFactory(
      name: "IPartiallyDelayedMultiSig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPartiallyDelayedMultiSig__factory>;
    getContractFactory(
      name: "IWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWhitelist__factory>;
    getContractFactory(
      name: "IOdosRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOdosRouter__factory>;
    getContractFactory(
      name: "IParaswapAugustusRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IParaswapAugustusRouter__factory>;
    getContractFactory(
      name: "IParaswapFeeClaimer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IParaswapFeeClaimer__factory>;
    getContractFactory(
      name: "AsyncIsolationModeTraderBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsyncIsolationModeTraderBase__factory>;
    getContractFactory(
      name: "FreezableIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FreezableIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "AsyncIsolationModeUnwrapperTraderImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsyncIsolationModeUnwrapperTraderImpl__factory>;
    getContractFactory(
      name: "AsyncIsolationModeWrapperTraderImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsyncIsolationModeWrapperTraderImpl__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1ActionsImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1ActionsImpl__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1WithFreezable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1WithFreezable__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1WithFreezableAndPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1WithFreezableAndPausable__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1WithPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1WithPausable__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1WithPausableAndOnlyEoa",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1WithPausableAndOnlyEoa__factory>;
    getContractFactory(
      name: "IsolationModeTraderBaseV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTraderBaseV2__factory>;
    getContractFactory(
      name: "IsolationModeUnwrapperTraderV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeUnwrapperTraderV1__factory>;
    getContractFactory(
      name: "IsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "IsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IsolationModeWrapperTraderV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeWrapperTraderV1__factory>;
    getContractFactory(
      name: "IsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "UpgradeableAsyncIsolationModeUnwrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableAsyncIsolationModeUnwrapperTrader__factory>;
    getContractFactory(
      name: "UpgradeableAsyncIsolationModeWrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableAsyncIsolationModeWrapperTrader__factory>;
    getContractFactory(
      name: "IAsyncIsolationModeTraderBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAsyncIsolationModeTraderBase__factory>;
    getContractFactory(
      name: "IDefaultUpgradeableAsyncIsolationModeUnwrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDefaultUpgradeableAsyncIsolationModeUnwrapperTrader__factory>;
    getContractFactory(
      name: "IDefaultUpgradeableAsyncIsolationModeWrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDefaultUpgradeableAsyncIsolationModeWrapperTrader__factory>;
    getContractFactory(
      name: "IFreezableIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFreezableIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IIsolationModeFreezableLiquidatorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeFreezableLiquidatorProxy__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1WithFreezable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithFreezable__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1WithFreezableAndPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithFreezableAndPausable__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1WithPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithPausable__factory>;
    getContractFactory(
      name: "IIsolationModeUnwrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeUnwrapperTrader__factory>;
    getContractFactory(
      name: "IIsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "IIsolationModeUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeUpgradeableProxy__factory>;
    getContractFactory(
      name: "IIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IIsolationModeVaultFactoryOld",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeVaultFactoryOld__factory>;
    getContractFactory(
      name: "IIsolationModeWrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeWrapperTrader__factory>;
    getContractFactory(
      name: "IIsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "IUpgradeableAsyncIsolationModeUnwrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeUnwrapperTrader__factory>;
    getContractFactory(
      name: "IUpgradeableAsyncIsolationModeWrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeWrapperTrader__factory>;
    getContractFactory(
      name: "IsolationModeTraderProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTraderProxy__factory>;
    getContractFactory(
      name: "IsolationModeUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeUpgradeableProxy__factory>;
    getContractFactory(
      name: "SimpleIsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleIsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "SimpleIsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleIsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "SimpleIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "SimpleIsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleIsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "IsolationModeFreezableLiquidatorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeFreezableLiquidatorProxy__factory>;
    getContractFactory(
      name: "IDolomiteAmmFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteAmmFactory__factory>;
    getContractFactory(
      name: "IDolomiteAmmPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteAmmPair__factory>;
    getContractFactory(
      name: "IDolomiteAmmRouterProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteAmmRouterProxy__factory>;
    getContractFactory(
      name: "IDolomiteInterestSetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteInterestSetter__factory>;
    getContractFactory(
      name: "IDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMargin__factory>;
    getContractFactory(
      name: "IDolomiteMarginAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginAdmin__factory>;
    getContractFactory(
      name: "IDolomiteMarginCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginCallee__factory>;
    getContractFactory(
      name: "IDolomiteMarginExchangeWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginExchangeWrapper__factory>;
    getContractFactory(
      name: "IDolomiteMarginInternalTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginInternalTrader__factory>;
    getContractFactory(
      name: "IDolomiteMarginLiquidationCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginLiquidationCallback__factory>;
    getContractFactory(
      name: "IDolomitePriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomitePriceOracle__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "CustomTestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomTestToken__factory>;
    getContractFactory(
      name: "ICustomTestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICustomTestToken__factory>;
    getContractFactory(
      name: "TestAccountActionLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAccountActionLib__factory>;
    getContractFactory(
      name: "TestBaseLiquidatorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBaseLiquidatorProxy__factory>;
    getContractFactory(
      name: "TestBaseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBaseRegistry__factory>;
    getContractFactory(
      name: "TestERC20Lib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20Lib__factory>;
    getContractFactory(
      name: "TestFreezableIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestFreezableIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "TestHandlerRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHandlerRegistry__factory>;
    getContractFactory(
      name: "TestHasLiquidatorRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHasLiquidatorRegistry__factory>;
    getContractFactory(
      name: "TestInterestIndexLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestInterestIndexLib__factory>;
    getContractFactory(
      name: "TestIsolationModeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestIsolationModeFactory__factory>;
    getContractFactory(
      name: "TestIsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestIsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "TestIsolationModeTokenVaultV1WithFreezable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestIsolationModeTokenVaultV1WithFreezable__factory>;
    getContractFactory(
      name: "TestIsolationModeTokenVaultV1WithFreezableAndPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestIsolationModeTokenVaultV1WithFreezableAndPausable__factory>;
    getContractFactory(
      name: "TestIsolationModeTokenVaultV1WithPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestIsolationModeTokenVaultV1WithPausable__factory>;
    getContractFactory(
      name: "TestIsolationModeTokenVaultV1WithPausableAndOnlyEoa",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestIsolationModeTokenVaultV1WithPausableAndOnlyEoa__factory>;
    getContractFactory(
      name: "TestSimpleIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSimpleIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "OdosAggregatorTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OdosAggregatorTrader__factory>;
    getContractFactory(
      name: "ParaswapAggregatorTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParaswapAggregatorTrader__factory>;
    getContractFactory(
      name: "ParaswapAggregatorTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParaswapAggregatorTraderV2__factory>;
    getContractFactory(
      name: "IAlgebraPoolErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlgebraPoolErrors__factory>;
    getContractFactory(
      name: "SafeGettersForDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeGettersForDolomiteMargin__factory>;

    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BaseLiquidatorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseLiquidatorProxy>;
    getContractAt(
      name: "BaseRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRegistry>;
    getContractAt(
      name: "DolomiteRegistryImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DolomiteRegistryImplementation>;
    getContractAt(
      name: "EventEmitterRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventEmitterRegistry>;
    getContractAt(
      name: "HandlerRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HandlerRegistry>;
    getContractAt(
      name: "HasLiquidatorRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HasLiquidatorRegistry>;
    getContractAt(
      name: "MinimalERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalERC20>;
    getContractAt(
      name: "RegistryProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryProxy>;
    getContractAt(
      name: "OnlyDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyDolomiteMargin>;
    getContractAt(
      name: "OnlyDolomiteMarginForUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyDolomiteMarginForUpgradeable>;
    getContractAt(
      name: "IAlgebraV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlgebraV3Pool>;
    getContractAt(
      name: "IAuthorizationBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizationBase>;
    getContractAt(
      name: "IBaseRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistry>;
    getContractAt(
      name: "IBorrowPositionProxyV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowPositionProxyV1>;
    getContractAt(
      name: "IBorrowPositionProxyV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowPositionProxyV2>;
    getContractAt(
      name: "IDepositWithdrawalProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositWithdrawalProxy>;
    getContractAt(
      name: "IDolomiteMarginUnwrapperTraderForLiquidatorV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginUnwrapperTraderForLiquidatorV3>;
    getContractAt(
      name: "IDolomiteMarginWrapperTraderForLiquidatorV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginWrapperTraderForLiquidatorV3>;
    getContractAt(
      name: "IDolomiteRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteRegistry>;
    getContractAt(
      name: "IERC20Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Mintable>;
    getContractAt(
      name: "IERC4626",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "IEventEmitterRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEventEmitterRegistry>;
    getContractAt(
      name: "IExpiry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExpiry>;
    getContractAt(
      name: "IGenericTraderProxyV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericTraderProxyV1>;
    getContractAt(
      name: "IHandlerRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHandlerRegistry>;
    getContractAt(
      name: "ILiquidatorAssetRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidatorAssetRegistry>;
    getContractAt(
      name: "ILiquidatorProxyV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidatorProxyV1>;
    getContractAt(
      name: "ILiquidatorProxyV1WithAmm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidatorProxyV1WithAmm>;
    getContractAt(
      name: "ILiquidatorProxyV2WithExternalLiquidity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidatorProxyV2WithExternalLiquidity>;
    getContractAt(
      name: "ILiquidatorProxyV3WithLiquidityToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidatorProxyV3WithLiquidityToken>;
    getContractAt(
      name: "ILiquidatorProxyV4WithGenericTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidatorProxyV4WithGenericTrader>;
    getContractAt(
      name: "IOnlyDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOnlyDolomiteMargin>;
    getContractAt(
      name: "IPartiallyDelayedMultiSig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPartiallyDelayedMultiSig>;
    getContractAt(
      name: "IWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWhitelist>;
    getContractAt(
      name: "IOdosRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOdosRouter>;
    getContractAt(
      name: "IParaswapAugustusRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IParaswapAugustusRouter>;
    getContractAt(
      name: "IParaswapFeeClaimer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IParaswapFeeClaimer>;
    getContractAt(
      name: "AsyncIsolationModeTraderBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AsyncIsolationModeTraderBase>;
    getContractAt(
      name: "FreezableIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FreezableIsolationModeVaultFactory>;
    getContractAt(
      name: "AsyncIsolationModeUnwrapperTraderImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AsyncIsolationModeUnwrapperTraderImpl>;
    getContractAt(
      name: "AsyncIsolationModeWrapperTraderImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AsyncIsolationModeWrapperTraderImpl>;
    getContractAt(
      name: "IsolationModeTokenVaultV1ActionsImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1ActionsImpl>;
    getContractAt(
      name: "IsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1>;
    getContractAt(
      name: "IsolationModeTokenVaultV1WithFreezable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1WithFreezable>;
    getContractAt(
      name: "IsolationModeTokenVaultV1WithFreezableAndPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1WithFreezableAndPausable>;
    getContractAt(
      name: "IsolationModeTokenVaultV1WithPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1WithPausable>;
    getContractAt(
      name: "IsolationModeTokenVaultV1WithPausableAndOnlyEoa",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1WithPausableAndOnlyEoa>;
    getContractAt(
      name: "IsolationModeTraderBaseV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTraderBaseV2>;
    getContractAt(
      name: "IsolationModeUnwrapperTraderV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeUnwrapperTraderV1>;
    getContractAt(
      name: "IsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "IsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeVaultFactory>;
    getContractAt(
      name: "IsolationModeWrapperTraderV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeWrapperTraderV1>;
    getContractAt(
      name: "IsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeWrapperTraderV2>;
    getContractAt(
      name: "UpgradeableAsyncIsolationModeUnwrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableAsyncIsolationModeUnwrapperTrader>;
    getContractAt(
      name: "UpgradeableAsyncIsolationModeWrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableAsyncIsolationModeWrapperTrader>;
    getContractAt(
      name: "IAsyncIsolationModeTraderBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAsyncIsolationModeTraderBase>;
    getContractAt(
      name: "IDefaultUpgradeableAsyncIsolationModeUnwrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDefaultUpgradeableAsyncIsolationModeUnwrapperTrader>;
    getContractAt(
      name: "IDefaultUpgradeableAsyncIsolationModeWrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDefaultUpgradeableAsyncIsolationModeWrapperTrader>;
    getContractAt(
      name: "IFreezableIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFreezableIsolationModeVaultFactory>;
    getContractAt(
      name: "IIsolationModeFreezableLiquidatorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeFreezableLiquidatorProxy>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1WithFreezable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithFreezable>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1WithFreezableAndPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithFreezableAndPausable>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1WithPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithPausable>;
    getContractAt(
      name: "IIsolationModeUnwrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeUnwrapperTrader>;
    getContractAt(
      name: "IIsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "IIsolationModeUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeUpgradeableProxy>;
    getContractAt(
      name: "IIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeVaultFactory>;
    getContractAt(
      name: "IIsolationModeVaultFactoryOld",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeVaultFactoryOld>;
    getContractAt(
      name: "IIsolationModeWrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeWrapperTrader>;
    getContractAt(
      name: "IIsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeWrapperTraderV2>;
    getContractAt(
      name: "IUpgradeableAsyncIsolationModeUnwrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeUnwrapperTrader>;
    getContractAt(
      name: "IUpgradeableAsyncIsolationModeWrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeWrapperTrader>;
    getContractAt(
      name: "IsolationModeTraderProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTraderProxy>;
    getContractAt(
      name: "IsolationModeUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeUpgradeableProxy>;
    getContractAt(
      name: "SimpleIsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleIsolationModeTokenVaultV1>;
    getContractAt(
      name: "SimpleIsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleIsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "SimpleIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleIsolationModeVaultFactory>;
    getContractAt(
      name: "SimpleIsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleIsolationModeWrapperTraderV2>;
    getContractAt(
      name: "IsolationModeFreezableLiquidatorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeFreezableLiquidatorProxy>;
    getContractAt(
      name: "IDolomiteAmmFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteAmmFactory>;
    getContractAt(
      name: "IDolomiteAmmPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteAmmPair>;
    getContractAt(
      name: "IDolomiteAmmRouterProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteAmmRouterProxy>;
    getContractAt(
      name: "IDolomiteInterestSetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteInterestSetter>;
    getContractAt(
      name: "IDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMargin>;
    getContractAt(
      name: "IDolomiteMarginAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginAdmin>;
    getContractAt(
      name: "IDolomiteMarginCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginCallee>;
    getContractAt(
      name: "IDolomiteMarginExchangeWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginExchangeWrapper>;
    getContractAt(
      name: "IDolomiteMarginInternalTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginInternalTrader>;
    getContractAt(
      name: "IDolomiteMarginLiquidationCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginLiquidationCallback>;
    getContractAt(
      name: "IDolomitePriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomitePriceOracle>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "CustomTestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomTestToken>;
    getContractAt(
      name: "ICustomTestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICustomTestToken>;
    getContractAt(
      name: "TestAccountActionLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAccountActionLib>;
    getContractAt(
      name: "TestBaseLiquidatorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBaseLiquidatorProxy>;
    getContractAt(
      name: "TestBaseRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBaseRegistry>;
    getContractAt(
      name: "TestERC20Lib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20Lib>;
    getContractAt(
      name: "TestFreezableIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestFreezableIsolationModeVaultFactory>;
    getContractAt(
      name: "TestHandlerRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHandlerRegistry>;
    getContractAt(
      name: "TestHasLiquidatorRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHasLiquidatorRegistry>;
    getContractAt(
      name: "TestInterestIndexLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestInterestIndexLib>;
    getContractAt(
      name: "TestIsolationModeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestIsolationModeFactory>;
    getContractAt(
      name: "TestIsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestIsolationModeTokenVaultV1>;
    getContractAt(
      name: "TestIsolationModeTokenVaultV1WithFreezable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestIsolationModeTokenVaultV1WithFreezable>;
    getContractAt(
      name: "TestIsolationModeTokenVaultV1WithFreezableAndPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestIsolationModeTokenVaultV1WithFreezableAndPausable>;
    getContractAt(
      name: "TestIsolationModeTokenVaultV1WithPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestIsolationModeTokenVaultV1WithPausable>;
    getContractAt(
      name: "TestIsolationModeTokenVaultV1WithPausableAndOnlyEoa",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestIsolationModeTokenVaultV1WithPausableAndOnlyEoa>;
    getContractAt(
      name: "TestSimpleIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSimpleIsolationModeVaultFactory>;
    getContractAt(
      name: "OdosAggregatorTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OdosAggregatorTrader>;
    getContractAt(
      name: "ParaswapAggregatorTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParaswapAggregatorTrader>;
    getContractAt(
      name: "ParaswapAggregatorTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParaswapAggregatorTraderV2>;
    getContractAt(
      name: "IAlgebraPoolErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlgebraPoolErrors>;
    getContractAt(
      name: "SafeGettersForDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeGettersForDolomiteMargin>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
