/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IDolomiteStructs {
  export type MonetaryPriceStruct = { value: BigNumberish };

  export type MonetaryPriceStructOutput = [BigNumber] & { value: BigNumber };
}

export interface GmxV2MarketTokenPriceOracleInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "DOLOMITE_MARGIN()": FunctionFragment;
    "FEE_FACTOR_DECIMAL_ADJUSTMENT()": FunctionFragment;
    "GMX_DECIMAL_ADJUSTMENT()": FunctionFragment;
    "MAX_PNL_FACTOR_FOR_DEPOSITS_KEY()": FunctionFragment;
    "PRICE_DEVIATION_BP()": FunctionFragment;
    "REGISTRY()": FunctionFragment;
    "RETURN_DECIMAL_ADJUSTMENT()": FunctionFragment;
    "SUPPLY_CAP_USAGE_DENOMINATOR()": FunctionFragment;
    "SUPPLY_CAP_USAGE_NUMERATOR()": FunctionFragment;
    "SWAP_FEE_FACTOR_KEY()": FunctionFragment;
    "SWAP_FEE_RECEIVER_FACTOR_KEY()": FunctionFragment;
    "getFeeBpByMarketToken(address)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "marketTokens(address)": FunctionFragment;
    "ownerSetMarketToken(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "DOLOMITE_MARGIN"
      | "FEE_FACTOR_DECIMAL_ADJUSTMENT"
      | "GMX_DECIMAL_ADJUSTMENT"
      | "MAX_PNL_FACTOR_FOR_DEPOSITS_KEY"
      | "PRICE_DEVIATION_BP"
      | "REGISTRY"
      | "RETURN_DECIMAL_ADJUSTMENT"
      | "SUPPLY_CAP_USAGE_DENOMINATOR"
      | "SUPPLY_CAP_USAGE_NUMERATOR"
      | "SWAP_FEE_FACTOR_KEY"
      | "SWAP_FEE_RECEIVER_FACTOR_KEY"
      | "getFeeBpByMarketToken"
      | "getPrice"
      | "marketTokens"
      | "ownerSetMarketToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_FACTOR_DECIMAL_ADJUSTMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GMX_DECIMAL_ADJUSTMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PNL_FACTOR_FOR_DEPOSITS_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_DEVIATION_BP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "REGISTRY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RETURN_DECIMAL_ADJUSTMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPLY_CAP_USAGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPLY_CAP_USAGE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_FEE_FACTOR_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_FEE_RECEIVER_FACTOR_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBpByMarketToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marketTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMarketToken",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_FACTOR_DECIMAL_ADJUSTMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GMX_DECIMAL_ADJUSTMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PNL_FACTOR_FOR_DEPOSITS_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_DEVIATION_BP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "REGISTRY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RETURN_DECIMAL_ADJUSTMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPPLY_CAP_USAGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPPLY_CAP_USAGE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_FEE_FACTOR_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_FEE_RECEIVER_FACTOR_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBpByMarketToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMarketToken",
    data: BytesLike
  ): Result;

  events: {
    "MarketTokenSet(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketTokenSet"): EventFragment;
}

export interface MarketTokenSetEventObject {
  _token: string;
  _status: boolean;
}
export type MarketTokenSetEvent = TypedEvent<
  [string, boolean],
  MarketTokenSetEventObject
>;

export type MarketTokenSetEventFilter = TypedEventFilter<MarketTokenSetEvent>;

export interface GmxV2MarketTokenPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GmxV2MarketTokenPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    FEE_FACTOR_DECIMAL_ADJUSTMENT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GMX_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PNL_FACTOR_FOR_DEPOSITS_KEY(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PRICE_DEVIATION_BP(overrides?: CallOverrides): Promise<[BigNumber]>;

    REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    RETURN_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUPPLY_CAP_USAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SUPPLY_CAP_USAGE_NUMERATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    SWAP_FEE_FACTOR_KEY(overrides?: CallOverrides): Promise<[string]>;

    SWAP_FEE_RECEIVER_FACTOR_KEY(overrides?: CallOverrides): Promise<[string]>;

    getFeeBpByMarketToken(
      _gmToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.MonetaryPriceStructOutput]>;

    marketTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    ownerSetMarketToken(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  FEE_FACTOR_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<BigNumber>;

  GMX_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PNL_FACTOR_FOR_DEPOSITS_KEY(overrides?: CallOverrides): Promise<string>;

  PRICE_DEVIATION_BP(overrides?: CallOverrides): Promise<BigNumber>;

  REGISTRY(overrides?: CallOverrides): Promise<string>;

  RETURN_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<BigNumber>;

  SUPPLY_CAP_USAGE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  SUPPLY_CAP_USAGE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

  SWAP_FEE_FACTOR_KEY(overrides?: CallOverrides): Promise<string>;

  SWAP_FEE_RECEIVER_FACTOR_KEY(overrides?: CallOverrides): Promise<string>;

  getFeeBpByMarketToken(
    _gmToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    _token: string,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.MonetaryPriceStructOutput>;

  marketTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  ownerSetMarketToken(
    _token: string,
    _status: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    FEE_FACTOR_DECIMAL_ADJUSTMENT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GMX_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PNL_FACTOR_FOR_DEPOSITS_KEY(overrides?: CallOverrides): Promise<string>;

    PRICE_DEVIATION_BP(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRY(overrides?: CallOverrides): Promise<string>;

    RETURN_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY_CAP_USAGE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY_CAP_USAGE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    SWAP_FEE_FACTOR_KEY(overrides?: CallOverrides): Promise<string>;

    SWAP_FEE_RECEIVER_FACTOR_KEY(overrides?: CallOverrides): Promise<string>;

    getFeeBpByMarketToken(
      _gmToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.MonetaryPriceStructOutput>;

    marketTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    ownerSetMarketToken(
      _token: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MarketTokenSet(address,bool)"(
      _token?: null,
      _status?: null
    ): MarketTokenSetEventFilter;
    MarketTokenSet(_token?: null, _status?: null): MarketTokenSetEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_FACTOR_DECIMAL_ADJUSTMENT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GMX_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PNL_FACTOR_FOR_DEPOSITS_KEY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRICE_DEVIATION_BP(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    RETURN_DECIMAL_ADJUSTMENT(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY_CAP_USAGE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY_CAP_USAGE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    SWAP_FEE_FACTOR_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    SWAP_FEE_RECEIVER_FACTOR_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeBpByMarketToken(
      _gmToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    marketTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetMarketToken(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_FACTOR_DECIMAL_ADJUSTMENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GMX_DECIMAL_ADJUSTMENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PNL_FACTOR_FOR_DEPOSITS_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRICE_DEVIATION_BP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RETURN_DECIMAL_ADJUSTMENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUPPLY_CAP_USAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUPPLY_CAP_USAGE_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SWAP_FEE_FACTOR_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SWAP_FEE_RECEIVER_FACTOR_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBpByMarketToken(
      _gmToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetMarketToken(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
