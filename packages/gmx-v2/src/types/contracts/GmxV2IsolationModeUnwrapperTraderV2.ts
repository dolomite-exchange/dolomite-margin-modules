/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace GmxWithdrawal {
  export type AddressesStruct = {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: BigNumberish;
    minLongTokenAmount: BigNumberish;
    minShortTokenAmount: BigNumberish;
    updatedAtBlock: BigNumberish;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = { shouldUnwrapNativeToken: boolean };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type WithdrawalPropsStruct = {
    addresses: GmxWithdrawal.AddressesStruct;
    numbers: GmxWithdrawal.NumbersStruct;
    flags: GmxWithdrawal.FlagsStruct;
  };

  export type WithdrawalPropsStructOutput = [
    GmxWithdrawal.AddressesStructOutput,
    GmxWithdrawal.NumbersStructOutput,
    GmxWithdrawal.FlagsStructOutput
  ] & {
    addresses: GmxWithdrawal.AddressesStructOutput;
    numbers: GmxWithdrawal.NumbersStructOutput;
    flags: GmxWithdrawal.FlagsStructOutput;
  };
}

export declare namespace GmxEventUtils {
  export type AddressKeyValueStruct = { key: string; value: string };

  export type AddressKeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type AddressArrayKeyValueStruct = { key: string; value: string[] };

  export type AddressArrayKeyValueStructOutput = [string, string[]] & {
    key: string;
    value: string[];
  };

  export type AddressItemsStruct = {
    items: GmxEventUtils.AddressKeyValueStruct[];
    arrayItems: GmxEventUtils.AddressArrayKeyValueStruct[];
  };

  export type AddressItemsStructOutput = [
    GmxEventUtils.AddressKeyValueStructOutput[],
    GmxEventUtils.AddressArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.AddressKeyValueStructOutput[];
    arrayItems: GmxEventUtils.AddressArrayKeyValueStructOutput[];
  };

  export type UintKeyValueStruct = { key: string; value: BigNumberish };

  export type UintKeyValueStructOutput = [string, BigNumber] & {
    key: string;
    value: BigNumber;
  };

  export type UintArrayKeyValueStruct = { key: string; value: BigNumberish[] };

  export type UintArrayKeyValueStructOutput = [string, BigNumber[]] & {
    key: string;
    value: BigNumber[];
  };

  export type UintItemsStruct = {
    items: GmxEventUtils.UintKeyValueStruct[];
    arrayItems: GmxEventUtils.UintArrayKeyValueStruct[];
  };

  export type UintItemsStructOutput = [
    GmxEventUtils.UintKeyValueStructOutput[],
    GmxEventUtils.UintArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.UintKeyValueStructOutput[];
    arrayItems: GmxEventUtils.UintArrayKeyValueStructOutput[];
  };

  export type IntKeyValueStruct = { key: string; value: BigNumberish };

  export type IntKeyValueStructOutput = [string, BigNumber] & {
    key: string;
    value: BigNumber;
  };

  export type IntArrayKeyValueStruct = { key: string; value: BigNumberish[] };

  export type IntArrayKeyValueStructOutput = [string, BigNumber[]] & {
    key: string;
    value: BigNumber[];
  };

  export type IntItemsStruct = {
    items: GmxEventUtils.IntKeyValueStruct[];
    arrayItems: GmxEventUtils.IntArrayKeyValueStruct[];
  };

  export type IntItemsStructOutput = [
    GmxEventUtils.IntKeyValueStructOutput[],
    GmxEventUtils.IntArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.IntKeyValueStructOutput[];
    arrayItems: GmxEventUtils.IntArrayKeyValueStructOutput[];
  };

  export type BoolKeyValueStruct = { key: string; value: boolean };

  export type BoolKeyValueStructOutput = [string, boolean] & {
    key: string;
    value: boolean;
  };

  export type BoolArrayKeyValueStruct = { key: string; value: boolean[] };

  export type BoolArrayKeyValueStructOutput = [string, boolean[]] & {
    key: string;
    value: boolean[];
  };

  export type BoolItemsStruct = {
    items: GmxEventUtils.BoolKeyValueStruct[];
    arrayItems: GmxEventUtils.BoolArrayKeyValueStruct[];
  };

  export type BoolItemsStructOutput = [
    GmxEventUtils.BoolKeyValueStructOutput[],
    GmxEventUtils.BoolArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.BoolKeyValueStructOutput[];
    arrayItems: GmxEventUtils.BoolArrayKeyValueStructOutput[];
  };

  export type Bytes32KeyValueStruct = { key: string; value: BytesLike };

  export type Bytes32KeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type Bytes32ArrayKeyValueStruct = { key: string; value: BytesLike[] };

  export type Bytes32ArrayKeyValueStructOutput = [string, string[]] & {
    key: string;
    value: string[];
  };

  export type Bytes32ItemsStruct = {
    items: GmxEventUtils.Bytes32KeyValueStruct[];
    arrayItems: GmxEventUtils.Bytes32ArrayKeyValueStruct[];
  };

  export type Bytes32ItemsStructOutput = [
    GmxEventUtils.Bytes32KeyValueStructOutput[],
    GmxEventUtils.Bytes32ArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.Bytes32KeyValueStructOutput[];
    arrayItems: GmxEventUtils.Bytes32ArrayKeyValueStructOutput[];
  };

  export type BytesKeyValueStruct = { key: string; value: BytesLike };

  export type BytesKeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type BytesArrayKeyValueStruct = { key: string; value: BytesLike[] };

  export type BytesArrayKeyValueStructOutput = [string, string[]] & {
    key: string;
    value: string[];
  };

  export type BytesItemsStruct = {
    items: GmxEventUtils.BytesKeyValueStruct[];
    arrayItems: GmxEventUtils.BytesArrayKeyValueStruct[];
  };

  export type BytesItemsStructOutput = [
    GmxEventUtils.BytesKeyValueStructOutput[],
    GmxEventUtils.BytesArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.BytesKeyValueStructOutput[];
    arrayItems: GmxEventUtils.BytesArrayKeyValueStructOutput[];
  };

  export type StringKeyValueStruct = { key: string; value: string };

  export type StringKeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type StringArrayKeyValueStruct = { key: string; value: string[] };

  export type StringArrayKeyValueStructOutput = [string, string[]] & {
    key: string;
    value: string[];
  };

  export type StringItemsStruct = {
    items: GmxEventUtils.StringKeyValueStruct[];
    arrayItems: GmxEventUtils.StringArrayKeyValueStruct[];
  };

  export type StringItemsStructOutput = [
    GmxEventUtils.StringKeyValueStructOutput[],
    GmxEventUtils.StringArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.StringKeyValueStructOutput[];
    arrayItems: GmxEventUtils.StringArrayKeyValueStructOutput[];
  };

  export type EventLogDataStruct = {
    addressItems: GmxEventUtils.AddressItemsStruct;
    uintItems: GmxEventUtils.UintItemsStruct;
    intItems: GmxEventUtils.IntItemsStruct;
    boolItems: GmxEventUtils.BoolItemsStruct;
    bytes32Items: GmxEventUtils.Bytes32ItemsStruct;
    bytesItems: GmxEventUtils.BytesItemsStruct;
    stringItems: GmxEventUtils.StringItemsStruct;
  };

  export type EventLogDataStructOutput = [
    GmxEventUtils.AddressItemsStructOutput,
    GmxEventUtils.UintItemsStructOutput,
    GmxEventUtils.IntItemsStructOutput,
    GmxEventUtils.BoolItemsStructOutput,
    GmxEventUtils.Bytes32ItemsStructOutput,
    GmxEventUtils.BytesItemsStructOutput,
    GmxEventUtils.StringItemsStructOutput
  ] & {
    addressItems: GmxEventUtils.AddressItemsStructOutput;
    uintItems: GmxEventUtils.UintItemsStructOutput;
    intItems: GmxEventUtils.IntItemsStructOutput;
    boolItems: GmxEventUtils.BoolItemsStructOutput;
    bytes32Items: GmxEventUtils.Bytes32ItemsStructOutput;
    bytesItems: GmxEventUtils.BytesItemsStructOutput;
    stringItems: GmxEventUtils.StringItemsStructOutput;
  };
}

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type AssetAmountStruct = {
    sign: boolean;
    denomination: BigNumberish;
    ref: BigNumberish;
    value: BigNumberish;
  };

  export type AssetAmountStructOutput = [boolean, number, number, BigNumber] & {
    sign: boolean;
    denomination: number;
    ref: number;
    value: BigNumber;
  };

  export type ActionArgsStruct = {
    actionType: BigNumberish;
    accountId: BigNumberish;
    amount: IDolomiteStructs.AssetAmountStruct;
    primaryMarketId: BigNumberish;
    secondaryMarketId: BigNumberish;
    otherAddress: string;
    otherAccountId: BigNumberish;
    data: BytesLike;
  };

  export type ActionArgsStructOutput = [
    number,
    BigNumber,
    IDolomiteStructs.AssetAmountStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    actionType: number;
    accountId: BigNumber;
    amount: IDolomiteStructs.AssetAmountStructOutput;
    primaryMarketId: BigNumber;
    secondaryMarketId: BigNumber;
    otherAddress: string;
    otherAccountId: BigNumber;
    data: string;
  };
}

export declare namespace IIsolationModeUnwrapperTraderV2 {
  export type CreateActionsForUnwrappingParamsStruct = {
    primaryAccountId: BigNumberish;
    otherAccountId: BigNumberish;
    primaryAccountOwner: string;
    primaryAccountNumber: BigNumberish;
    otherAccountOwner: string;
    otherAccountNumber: BigNumberish;
    outputMarket: BigNumberish;
    inputMarket: BigNumberish;
    minOutputAmount: BigNumberish;
    inputAmount: BigNumberish;
    orderData: BytesLike;
  };

  export type CreateActionsForUnwrappingParamsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    primaryAccountId: BigNumber;
    otherAccountId: BigNumber;
    primaryAccountOwner: string;
    primaryAccountNumber: BigNumber;
    otherAccountOwner: string;
    otherAccountNumber: BigNumber;
    outputMarket: BigNumber;
    inputMarket: BigNumber;
    minOutputAmount: BigNumber;
    inputAmount: BigNumber;
    orderData: string;
  };
}

export declare namespace IUpgradeableAsyncIsolationModeUnwrapperTrader {
  export type WithdrawalInfoStruct = {
    key: BytesLike;
    vault: string;
    accountNumber: BigNumberish;
    inputAmount: BigNumberish;
    outputToken: string;
    outputAmount: BigNumberish;
    isRetryable: boolean;
    isLiquidation: boolean;
    extraData: BytesLike;
  };

  export type WithdrawalInfoStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean,
    boolean,
    string
  ] & {
    key: string;
    vault: string;
    accountNumber: BigNumber;
    inputAmount: BigNumber;
    outputToken: string;
    outputAmount: BigNumber;
    isRetryable: boolean;
    isLiquidation: boolean;
    extraData: string;
  };
}

export interface GmxV2IsolationModeUnwrapperTraderV2Interface
  extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "GMX_REGISTRY_V2()": FunctionFragment;
    "HANDLER_REGISTRY()": FunctionFragment;
    "VAULT_FACTORY()": FunctionFragment;
    "WETH()": FunctionFragment;
    "actionsLength()": FunctionFragment;
    "afterWithdrawalCancellation(bytes32,((address,address,address,address,address,address[],address[]),(uint256,uint256,uint256,uint256,uint256,uint256),(bool)),(((string,address)[],(string,address[])[]),((string,uint256)[],(string,uint256[])[]),((string,int256)[],(string,int256[])[]),((string,bool)[],(string,bool[])[]),((string,bytes32)[],(string,bytes32[])[]),((string,bytes)[],(string,bytes[])[]),((string,string)[],(string,string[])[])))": FunctionFragment;
    "afterWithdrawalExecution(bytes32,((address,address,address,address,address,address[],address[]),(uint256,uint256,uint256,uint256,uint256,uint256),(bool)),(((string,address)[],(string,address[])[]),((string,uint256)[],(string,uint256[])[]),((string,int256)[],(string,int256[])[]),((string,bool)[],(string,bool[])[]),((string,bytes32)[],(string,bytes32[])[]),((string,bytes)[],(string,bytes[])[]),((string,string)[],(string,string[])[])))": FunctionFragment;
    "callFunction(address,(address,uint256),bytes)": FunctionFragment;
    "callbackGasLimit()": FunctionFragment;
    "createActionsForUnwrapping((uint256,uint256,address,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes))": FunctionFragment;
    "exchange(address,address,address,address,uint256,bytes)": FunctionFragment;
    "executeWithdrawalForRetry(bytes32)": FunctionFragment;
    "getExchangeCost(address,address,uint256,bytes)": FunctionFragment;
    "getWithdrawalInfo(bytes32)": FunctionFragment;
    "handleCallbackFromWrapperAfter()": FunctionFragment;
    "handleCallbackFromWrapperBefore()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "initiateCancelWithdrawal(bytes32)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isValidOutputToken(address)": FunctionFragment;
    "ownerWithdrawETH(address)": FunctionFragment;
    "token()": FunctionFragment;
    "vaultInitiateUnwrapping(uint256,uint256,address,uint256,bool,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "GMX_REGISTRY_V2"
      | "HANDLER_REGISTRY"
      | "VAULT_FACTORY"
      | "WETH"
      | "actionsLength"
      | "afterWithdrawalCancellation"
      | "afterWithdrawalExecution"
      | "callFunction"
      | "callbackGasLimit"
      | "createActionsForUnwrapping"
      | "exchange"
      | "executeWithdrawalForRetry"
      | "getExchangeCost"
      | "getWithdrawalInfo"
      | "handleCallbackFromWrapperAfter"
      | "handleCallbackFromWrapperBefore"
      | "initialize"
      | "initiateCancelWithdrawal"
      | "isHandler"
      | "isValidOutputToken"
      | "ownerWithdrawETH"
      | "token"
      | "vaultInitiateUnwrapping"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GMX_REGISTRY_V2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HANDLER_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "actionsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "afterWithdrawalCancellation",
    values: [
      BytesLike,
      GmxWithdrawal.WithdrawalPropsStruct,
      GmxEventUtils.EventLogDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterWithdrawalExecution",
    values: [
      BytesLike,
      GmxWithdrawal.WithdrawalPropsStruct,
      GmxEventUtils.EventLogDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callFunction",
    values: [string, IDolomiteStructs.AccountInfoStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createActionsForUnwrapping",
    values: [
      IIsolationModeUnwrapperTraderV2.CreateActionsForUnwrappingParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [string, string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawalForRetry",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeCost",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleCallbackFromWrapperAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleCallbackFromWrapperBefore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateCancelWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidOutputToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawETH",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultInitiateUnwrapping",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GMX_REGISTRY_V2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HANDLER_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "actionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterWithdrawalCancellation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterWithdrawalExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createActionsForUnwrapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawalForRetry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleCallbackFromWrapperAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleCallbackFromWrapperBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateCancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidOutputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultInitiateUnwrapping",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnerWithdrawETH(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerWithdrawETH"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnerWithdrawETHEventObject {
  _receiver: string;
  _bal: BigNumber;
}
export type OwnerWithdrawETHEvent = TypedEvent<
  [string, BigNumber],
  OwnerWithdrawETHEventObject
>;

export type OwnerWithdrawETHEventFilter =
  TypedEventFilter<OwnerWithdrawETHEvent>;

export interface GmxV2IsolationModeUnwrapperTraderV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GmxV2IsolationModeUnwrapperTraderV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    GMX_REGISTRY_V2(overrides?: CallOverrides): Promise<[string]>;

    HANDLER_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    VAULT_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    actionsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    afterWithdrawalCancellation(
      _key: BytesLike,
      arg1: GmxWithdrawal.WithdrawalPropsStruct,
      arg2: GmxEventUtils.EventLogDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    afterWithdrawalExecution(
      _key: BytesLike,
      _withdrawal: GmxWithdrawal.WithdrawalPropsStruct,
      _eventData: GmxEventUtils.EventLogDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    callFunction(
      _sender: string,
      _accountInfo: IDolomiteStructs.AccountInfoStruct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    callbackGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    createActionsForUnwrapping(
      _params: IIsolationModeUnwrapperTraderV2.CreateActionsForUnwrappingParamsStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.ActionArgsStructOutput[]]>;

    exchange(
      _tradeOriginator: string,
      _receiver: string,
      _outputToken: string,
      _inputToken: string,
      _inputAmount: BigNumberish,
      _orderData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeWithdrawalForRetry(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getExchangeCost(
      _inputToken: string,
      _outputToken: string,
      _desiredInputAmount: BigNumberish,
      _orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawalInfo(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStructOutput]
    >;

    handleCallbackFromWrapperAfter(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    handleCallbackFromWrapperBefore(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      _dGM: string,
      _dolomiteMargin: string,
      _gmxV2Registry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initiateCancelWithdrawal(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<[boolean]>;

    isValidOutputToken(
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerWithdrawETH(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    vaultInitiateUnwrapping(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _isLiquidation: boolean,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  GMX_REGISTRY_V2(overrides?: CallOverrides): Promise<string>;

  HANDLER_REGISTRY(overrides?: CallOverrides): Promise<string>;

  VAULT_FACTORY(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  actionsLength(overrides?: CallOverrides): Promise<BigNumber>;

  afterWithdrawalCancellation(
    _key: BytesLike,
    arg1: GmxWithdrawal.WithdrawalPropsStruct,
    arg2: GmxEventUtils.EventLogDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  afterWithdrawalExecution(
    _key: BytesLike,
    _withdrawal: GmxWithdrawal.WithdrawalPropsStruct,
    _eventData: GmxEventUtils.EventLogDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callFunction(
    _sender: string,
    _accountInfo: IDolomiteStructs.AccountInfoStruct,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  createActionsForUnwrapping(
    _params: IIsolationModeUnwrapperTraderV2.CreateActionsForUnwrappingParamsStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.ActionArgsStructOutput[]>;

  exchange(
    _tradeOriginator: string,
    _receiver: string,
    _outputToken: string,
    _inputToken: string,
    _inputAmount: BigNumberish,
    _orderData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeWithdrawalForRetry(
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getExchangeCost(
    _inputToken: string,
    _outputToken: string,
    _desiredInputAmount: BigNumberish,
    _orderData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawalInfo(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStructOutput>;

  handleCallbackFromWrapperAfter(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  handleCallbackFromWrapperBefore(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    _dGM: string,
    _dolomiteMargin: string,
    _gmxV2Registry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initiateCancelWithdrawal(
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isHandler(_handler: string, overrides?: CallOverrides): Promise<boolean>;

  isValidOutputToken(
    _outputToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ownerWithdrawETH(
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  vaultInitiateUnwrapping(
    _tradeAccountNumber: BigNumberish,
    _inputAmount: BigNumberish,
    _outputToken: string,
    _minOutputAmount: BigNumberish,
    _isLiquidation: boolean,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    GMX_REGISTRY_V2(overrides?: CallOverrides): Promise<string>;

    HANDLER_REGISTRY(overrides?: CallOverrides): Promise<string>;

    VAULT_FACTORY(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    actionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    afterWithdrawalCancellation(
      _key: BytesLike,
      arg1: GmxWithdrawal.WithdrawalPropsStruct,
      arg2: GmxEventUtils.EventLogDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    afterWithdrawalExecution(
      _key: BytesLike,
      _withdrawal: GmxWithdrawal.WithdrawalPropsStruct,
      _eventData: GmxEventUtils.EventLogDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    callFunction(
      _sender: string,
      _accountInfo: IDolomiteStructs.AccountInfoStruct,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    createActionsForUnwrapping(
      _params: IIsolationModeUnwrapperTraderV2.CreateActionsForUnwrappingParamsStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.ActionArgsStructOutput[]>;

    exchange(
      _tradeOriginator: string,
      _receiver: string,
      _outputToken: string,
      _inputToken: string,
      _inputAmount: BigNumberish,
      _orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeWithdrawalForRetry(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getExchangeCost(
      _inputToken: string,
      _outputToken: string,
      _desiredInputAmount: BigNumberish,
      _orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalInfo(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStructOutput>;

    handleCallbackFromWrapperAfter(overrides?: CallOverrides): Promise<void>;

    handleCallbackFromWrapperBefore(overrides?: CallOverrides): Promise<void>;

    initialize(
      _dGM: string,
      _dolomiteMargin: string,
      _gmxV2Registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateCancelWithdrawal(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<boolean>;

    isValidOutputToken(
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerWithdrawETH(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    vaultInitiateUnwrapping(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _isLiquidation: boolean,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnerWithdrawETH(address,uint256)"(
      _receiver?: null,
      _bal?: null
    ): OwnerWithdrawETHEventFilter;
    OwnerWithdrawETH(
      _receiver?: null,
      _bal?: null
    ): OwnerWithdrawETHEventFilter;
  };

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    GMX_REGISTRY_V2(overrides?: CallOverrides): Promise<BigNumber>;

    HANDLER_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    VAULT_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    actionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    afterWithdrawalCancellation(
      _key: BytesLike,
      arg1: GmxWithdrawal.WithdrawalPropsStruct,
      arg2: GmxEventUtils.EventLogDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    afterWithdrawalExecution(
      _key: BytesLike,
      _withdrawal: GmxWithdrawal.WithdrawalPropsStruct,
      _eventData: GmxEventUtils.EventLogDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    callFunction(
      _sender: string,
      _accountInfo: IDolomiteStructs.AccountInfoStruct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    createActionsForUnwrapping(
      _params: IIsolationModeUnwrapperTraderV2.CreateActionsForUnwrappingParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      _tradeOriginator: string,
      _receiver: string,
      _outputToken: string,
      _inputToken: string,
      _inputAmount: BigNumberish,
      _orderData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeWithdrawalForRetry(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getExchangeCost(
      _inputToken: string,
      _outputToken: string,
      _desiredInputAmount: BigNumberish,
      _orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalInfo(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleCallbackFromWrapperAfter(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    handleCallbackFromWrapperBefore(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      _dGM: string,
      _dolomiteMargin: string,
      _gmxV2Registry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initiateCancelWithdrawal(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<BigNumber>;

    isValidOutputToken(
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerWithdrawETH(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    vaultInitiateUnwrapping(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _isLiquidation: boolean,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GMX_REGISTRY_V2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HANDLER_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VAULT_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    actionsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    afterWithdrawalCancellation(
      _key: BytesLike,
      arg1: GmxWithdrawal.WithdrawalPropsStruct,
      arg2: GmxEventUtils.EventLogDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    afterWithdrawalExecution(
      _key: BytesLike,
      _withdrawal: GmxWithdrawal.WithdrawalPropsStruct,
      _eventData: GmxEventUtils.EventLogDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    callFunction(
      _sender: string,
      _accountInfo: IDolomiteStructs.AccountInfoStruct,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    callbackGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createActionsForUnwrapping(
      _params: IIsolationModeUnwrapperTraderV2.CreateActionsForUnwrappingParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      _tradeOriginator: string,
      _receiver: string,
      _outputToken: string,
      _inputToken: string,
      _inputAmount: BigNumberish,
      _orderData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeWithdrawalForRetry(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getExchangeCost(
      _inputToken: string,
      _outputToken: string,
      _desiredInputAmount: BigNumberish,
      _orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalInfo(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleCallbackFromWrapperAfter(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    handleCallbackFromWrapperBefore(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      _dGM: string,
      _dolomiteMargin: string,
      _gmxV2Registry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initiateCancelWithdrawal(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isHandler(
      _handler: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidOutputToken(
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerWithdrawETH(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultInitiateUnwrapping(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _isLiquidation: boolean,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
