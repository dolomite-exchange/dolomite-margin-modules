/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace GmxDeposit {
  export type AddressesStruct = {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    initialLongTokenAmount: BigNumberish;
    initialShortTokenAmount: BigNumberish;
    minMarketTokens: BigNumberish;
    updatedAtBlock: BigNumberish;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = { shouldUnwrapNativeToken: boolean };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type DepositPropsStruct = {
    addresses: GmxDeposit.AddressesStruct;
    numbers: GmxDeposit.NumbersStruct;
    flags: GmxDeposit.FlagsStruct;
  };

  export type DepositPropsStructOutput = [
    GmxDeposit.AddressesStructOutput,
    GmxDeposit.NumbersStructOutput,
    GmxDeposit.FlagsStructOutput
  ] & {
    addresses: GmxDeposit.AddressesStructOutput;
    numbers: GmxDeposit.NumbersStructOutput;
    flags: GmxDeposit.FlagsStructOutput;
  };
}

export declare namespace IGmxDepositHandler {
  export type CreateDepositParamsStruct = {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minMarketTokens: BigNumberish;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type CreateDepositParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[],
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minMarketTokens: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };
}

export declare namespace GmxOracleUtils {
  export type SetPricesParamsStruct = {
    signerInfo: BigNumberish;
    tokens: string[];
    compactedMinOracleBlockNumbers: BigNumberish[];
    compactedMaxOracleBlockNumbers: BigNumberish[];
    compactedOracleTimestamps: BigNumberish[];
    compactedDecimals: BigNumberish[];
    compactedMinPrices: BigNumberish[];
    compactedMinPricesIndexes: BigNumberish[];
    compactedMaxPrices: BigNumberish[];
    compactedMaxPricesIndexes: BigNumberish[];
    signatures: BytesLike[];
    priceFeedTokens: string[];
    realtimeFeedTokens: string[];
    realtimeFeedData: BytesLike[];
  };

  export type SetPricesParamsStructOutput = [
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[],
    string[],
    string[],
    string[]
  ] & {
    signerInfo: BigNumber;
    tokens: string[];
    compactedMinOracleBlockNumbers: BigNumber[];
    compactedMaxOracleBlockNumbers: BigNumber[];
    compactedOracleTimestamps: BigNumber[];
    compactedDecimals: BigNumber[];
    compactedMinPrices: BigNumber[];
    compactedMinPricesIndexes: BigNumber[];
    compactedMaxPrices: BigNumber[];
    compactedMaxPricesIndexes: BigNumber[];
    signatures: string[];
    priceFeedTokens: string[];
    realtimeFeedTokens: string[];
    realtimeFeedData: string[];
  };

  export type SimulatePricesParamsStruct = {
    primaryTokens: string[];
    primaryPrices: GmxPrice.PricePropsStruct[];
  };

  export type SimulatePricesParamsStructOutput = [
    string[],
    GmxPrice.PricePropsStructOutput[]
  ] & {
    primaryTokens: string[];
    primaryPrices: GmxPrice.PricePropsStructOutput[];
  };
}

export declare namespace GmxPrice {
  export type PricePropsStruct = { min: BigNumberish; max: BigNumberish };

  export type PricePropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export interface IGmxDepositHandlerInterface extends utils.Interface {
  functions: {
    "cancelDeposit(bytes32)": FunctionFragment;
    "createDeposit(address,(address,address,address,address,address,address,address[],address[],uint256,bool,uint256,uint256))": FunctionFragment;
    "executeDeposit(bytes32,(uint256,address[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],bytes[],address[],address[],bytes[]))": FunctionFragment;
    "simulateExecuteDeposit(bytes32,(address[],(uint256,uint256)[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelDeposit"
      | "createDeposit"
      | "executeDeposit"
      | "simulateExecuteDeposit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelDeposit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeposit",
    values: [string, IGmxDepositHandler.CreateDepositParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDeposit",
    values: [BytesLike, GmxOracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateExecuteDeposit",
    values: [BytesLike, GmxOracleUtils.SimulatePricesParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateExecuteDeposit",
    data: BytesLike
  ): Result;

  events: {
    "AfterDepositExecutionError(bytes32,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AfterDepositExecutionError"): EventFragment;
}

export interface AfterDepositExecutionErrorEventObject {
  key: string;
  deposit: GmxDeposit.DepositPropsStructOutput;
}
export type AfterDepositExecutionErrorEvent = TypedEvent<
  [string, GmxDeposit.DepositPropsStructOutput],
  AfterDepositExecutionErrorEventObject
>;

export type AfterDepositExecutionErrorEventFilter =
  TypedEventFilter<AfterDepositExecutionErrorEvent>;

export interface IGmxDepositHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGmxDepositHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelDeposit(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createDeposit(
      _account: string,
      _params: IGmxDepositHandler.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeDeposit(
      _key: BytesLike,
      _oracleParams: GmxOracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    simulateExecuteDeposit(
      _key: BytesLike,
      _params: GmxOracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  cancelDeposit(
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createDeposit(
    _account: string,
    _params: IGmxDepositHandler.CreateDepositParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeDeposit(
    _key: BytesLike,
    _oracleParams: GmxOracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  simulateExecuteDeposit(
    _key: BytesLike,
    _params: GmxOracleUtils.SimulatePricesParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelDeposit(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    createDeposit(
      _account: string,
      _params: IGmxDepositHandler.CreateDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    executeDeposit(
      _key: BytesLike,
      _oracleParams: GmxOracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateExecuteDeposit(
      _key: BytesLike,
      _params: GmxOracleUtils.SimulatePricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AfterDepositExecutionError(bytes32,tuple)"(
      key?: null,
      deposit?: null
    ): AfterDepositExecutionErrorEventFilter;
    AfterDepositExecutionError(
      key?: null,
      deposit?: null
    ): AfterDepositExecutionErrorEventFilter;
  };

  estimateGas: {
    cancelDeposit(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createDeposit(
      _account: string,
      _params: IGmxDepositHandler.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeDeposit(
      _key: BytesLike,
      _oracleParams: GmxOracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    simulateExecuteDeposit(
      _key: BytesLike,
      _params: GmxOracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelDeposit(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createDeposit(
      _account: string,
      _params: IGmxDepositHandler.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeDeposit(
      _key: BytesLike,
      _oracleParams: GmxOracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    simulateExecuteDeposit(
      _key: BytesLike,
      _params: GmxOracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
