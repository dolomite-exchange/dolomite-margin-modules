/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IGmxExchangeRouter {
  export type CreateDepositParamsStruct = {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minMarketTokens: BigNumberish;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type CreateDepositParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[],
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minMarketTokens: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type CreateWithdrawalParamsStruct = {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minLongTokenAmount: BigNumberish;
    minShortTokenAmount: BigNumberish;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type CreateWithdrawalParamsStructOutput = [
    string,
    string,
    string,
    string,
    string[],
    string[],
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };
}

export interface IGmxExchangeRouterInterface extends utils.Interface {
  functions: {
    "cancelDeposit(bytes32)": FunctionFragment;
    "cancelWithdrawal(bytes32)": FunctionFragment;
    "createDeposit((address,address,address,address,address,address,address[],address[],uint256,bool,uint256,uint256))": FunctionFragment;
    "createWithdrawal((address,address,address,address,address[],address[],uint256,uint256,bool,uint256,uint256))": FunctionFragment;
    "depositHandler()": FunctionFragment;
    "sendTokens(address,address,uint256)": FunctionFragment;
    "sendWnt(address,uint256)": FunctionFragment;
    "withdrawalHandler()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelDeposit"
      | "cancelWithdrawal"
      | "createDeposit"
      | "createWithdrawal"
      | "depositHandler"
      | "sendTokens"
      | "sendWnt"
      | "withdrawalHandler"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelDeposit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeposit",
    values: [IGmxExchangeRouter.CreateDepositParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawal",
    values: [IGmxExchangeRouter.CreateWithdrawalParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendWnt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalHandler",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendWnt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalHandler",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGmxExchangeRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGmxExchangeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelDeposit(
      _key: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelWithdrawal(
      _key: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    createDeposit(
      _params: IGmxExchangeRouter.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createWithdrawal(
      _params: IGmxExchangeRouter.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositHandler(overrides?: CallOverrides): Promise<[string]>;

    sendTokens(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    sendWnt(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawalHandler(overrides?: CallOverrides): Promise<[string]>;
  };

  cancelDeposit(
    _key: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelWithdrawal(
    _key: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  createDeposit(
    _params: IGmxExchangeRouter.CreateDepositParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createWithdrawal(
    _params: IGmxExchangeRouter.CreateWithdrawalParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositHandler(overrides?: CallOverrides): Promise<string>;

  sendTokens(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  sendWnt(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawalHandler(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cancelDeposit(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    cancelWithdrawal(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    createDeposit(
      _params: IGmxExchangeRouter.CreateDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createWithdrawal(
      _params: IGmxExchangeRouter.CreateWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    depositHandler(overrides?: CallOverrides): Promise<string>;

    sendTokens(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendWnt(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalHandler(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    cancelDeposit(
      _key: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    cancelWithdrawal(
      _key: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    createDeposit(
      _params: IGmxExchangeRouter.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createWithdrawal(
      _params: IGmxExchangeRouter.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositHandler(overrides?: CallOverrides): Promise<BigNumber>;

    sendTokens(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    sendWnt(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawalHandler(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelDeposit(
      _key: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelWithdrawal(
      _key: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createDeposit(
      _params: IGmxExchangeRouter.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createWithdrawal(
      _params: IGmxExchangeRouter.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendTokens(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sendWnt(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
