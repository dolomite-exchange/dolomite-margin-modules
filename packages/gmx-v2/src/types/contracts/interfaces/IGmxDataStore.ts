/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IGmxDataStoreInterface extends utils.Interface {
  functions: {
    "getBool(bytes32)": FunctionFragment;
    "getUint(bytes32)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setBool(bytes32,bool)": FunctionFragment;
    "setUint(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBool"
      | "getUint"
      | "roleStore"
      | "setBool"
      | "setUint"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getBool", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getUint", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBool",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUint",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUint", data: BytesLike): Result;

  events: {};
}

export interface IGmxDataStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGmxDataStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBool(_key: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    getUint(_key: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    setBool(
      _key: BytesLike,
      _bool: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUint(
      _key: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getBool(_key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getUint(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  setBool(
    _key: BytesLike,
    _bool: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUint(
    _key: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBool(_key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getUint(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    setBool(
      _key: BytesLike,
      _bool: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUint(
      _key: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getBool(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getUint(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    setBool(
      _key: BytesLike,
      _bool: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUint(
      _key: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBool(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUint(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBool(
      _key: BytesLike,
      _bool: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUint(
      _key: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
