/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseLiquidatorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseLiquidatorProxy__factory>;
    getContractFactory(
      name: "BaseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRegistry__factory>;
    getContractFactory(
      name: "HandlerRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HandlerRegistry__factory>;
    getContractFactory(
      name: "HasLiquidatorRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasLiquidatorRegistry__factory>;
    getContractFactory(
      name: "MinimalERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalERC20__factory>;
    getContractFactory(
      name: "OnlyDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyDolomiteMargin__factory>;
    getContractFactory(
      name: "OnlyDolomiteMarginForUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyDolomiteMarginForUpgradeable__factory>;
    getContractFactory(
      name: "IAuthorizationBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizationBase__factory>;
    getContractFactory(
      name: "IBaseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistry__factory>;
    getContractFactory(
      name: "IBorrowPositionProxyV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowPositionProxyV1__factory>;
    getContractFactory(
      name: "IBorrowPositionProxyV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowPositionProxyV2__factory>;
    getContractFactory(
      name: "IDolomiteRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteRegistry__factory>;
    getContractFactory(
      name: "IEventEmitterRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEventEmitterRegistry__factory>;
    getContractFactory(
      name: "IExpiry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExpiry__factory>;
    getContractFactory(
      name: "IGenericTraderProxyV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericTraderProxyV1__factory>;
    getContractFactory(
      name: "IHandlerRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHandlerRegistry__factory>;
    getContractFactory(
      name: "ILiquidatorAssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidatorAssetRegistry__factory>;
    getContractFactory(
      name: "IOnlyDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOnlyDolomiteMargin__factory>;
    getContractFactory(
      name: "AsyncIsolationModeTraderBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsyncIsolationModeTraderBase__factory>;
    getContractFactory(
      name: "FreezableIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FreezableIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "AsyncIsolationModeUnwrapperTraderImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsyncIsolationModeUnwrapperTraderImpl__factory>;
    getContractFactory(
      name: "AsyncIsolationModeWrapperTraderImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsyncIsolationModeWrapperTraderImpl__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1ActionsImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1ActionsImpl__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1WithFreezable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1WithFreezable__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1WithFreezableAndPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1WithFreezableAndPausable__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1WithPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1WithPausable__factory>;
    getContractFactory(
      name: "IsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "UpgradeableAsyncIsolationModeUnwrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableAsyncIsolationModeUnwrapperTrader__factory>;
    getContractFactory(
      name: "UpgradeableAsyncIsolationModeWrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableAsyncIsolationModeWrapperTrader__factory>;
    getContractFactory(
      name: "IAsyncIsolationModeTraderBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAsyncIsolationModeTraderBase__factory>;
    getContractFactory(
      name: "IFreezableIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFreezableIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1WithFreezable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithFreezable__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1WithFreezableAndPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithFreezableAndPausable__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1WithPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithPausable__factory>;
    getContractFactory(
      name: "IIsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "IIsolationModeUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeUpgradeableProxy__factory>;
    getContractFactory(
      name: "IIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IIsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "IUpgradeableAsyncIsolationModeUnwrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeUnwrapperTrader__factory>;
    getContractFactory(
      name: "IUpgradeableAsyncIsolationModeWrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeWrapperTrader__factory>;
    getContractFactory(
      name: "IsolationModeUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeUpgradeableProxy__factory>;
    getContractFactory(
      name: "SimpleIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IDolomiteInterestSetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteInterestSetter__factory>;
    getContractFactory(
      name: "IDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMargin__factory>;
    getContractFactory(
      name: "IDolomiteMarginAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginAdmin__factory>;
    getContractFactory(
      name: "IDolomiteMarginExchangeWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginExchangeWrapper__factory>;
    getContractFactory(
      name: "IDolomitePriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomitePriceOracle__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "GmxV2IsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxV2IsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "GmxV2IsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxV2IsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "GmxV2IsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxV2IsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "GmxV2IsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxV2IsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "GmxV2Library",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxV2Library__factory>;
    getContractFactory(
      name: "GmxV2MarketTokenPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxV2MarketTokenPriceOracle__factory>;
    getContractFactory(
      name: "GmxV2Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxV2Registry__factory>;
    getContractFactory(
      name: "IGmxDataStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxDataStore__factory>;
    getContractFactory(
      name: "IGmxDepositCallbackReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxDepositCallbackReceiver__factory>;
    getContractFactory(
      name: "IGmxDepositHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxDepositHandler__factory>;
    getContractFactory(
      name: "IGmxEventEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxEventEmitter__factory>;
    getContractFactory(
      name: "IGmxExchangeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxExchangeRouter__factory>;
    getContractFactory(
      name: "IGmxMarketToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxMarketToken__factory>;
    getContractFactory(
      name: "IGmxOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxOracle__factory>;
    getContractFactory(
      name: "IGmxReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxReader__factory>;
    getContractFactory(
      name: "IGmxRoleStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxRoleStore__factory>;
    getContractFactory(
      name: "IGmxRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxRouter__factory>;
    getContractFactory(
      name: "IGmxV2IsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxV2IsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "IGmxV2IsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxV2IsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "IGmxV2IsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxV2IsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IGmxV2IsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxV2IsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "IGmxV2MarketTokenPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxV2MarketTokenPriceOracle__factory>;
    getContractFactory(
      name: "IGmxV2Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxV2Registry__factory>;
    getContractFactory(
      name: "IGmxWithdrawalCallbackReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxWithdrawalCallbackReceiver__factory>;
    getContractFactory(
      name: "IGmxWithdrawalHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxWithdrawalHandler__factory>;

    getContractAt(
      name: "BaseLiquidatorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseLiquidatorProxy>;
    getContractAt(
      name: "BaseRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRegistry>;
    getContractAt(
      name: "HandlerRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HandlerRegistry>;
    getContractAt(
      name: "HasLiquidatorRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HasLiquidatorRegistry>;
    getContractAt(
      name: "MinimalERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalERC20>;
    getContractAt(
      name: "OnlyDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyDolomiteMargin>;
    getContractAt(
      name: "OnlyDolomiteMarginForUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyDolomiteMarginForUpgradeable>;
    getContractAt(
      name: "IAuthorizationBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizationBase>;
    getContractAt(
      name: "IBaseRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistry>;
    getContractAt(
      name: "IBorrowPositionProxyV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowPositionProxyV1>;
    getContractAt(
      name: "IBorrowPositionProxyV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowPositionProxyV2>;
    getContractAt(
      name: "IDolomiteRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteRegistry>;
    getContractAt(
      name: "IEventEmitterRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEventEmitterRegistry>;
    getContractAt(
      name: "IExpiry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExpiry>;
    getContractAt(
      name: "IGenericTraderProxyV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericTraderProxyV1>;
    getContractAt(
      name: "IHandlerRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHandlerRegistry>;
    getContractAt(
      name: "ILiquidatorAssetRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidatorAssetRegistry>;
    getContractAt(
      name: "IOnlyDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOnlyDolomiteMargin>;
    getContractAt(
      name: "AsyncIsolationModeTraderBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AsyncIsolationModeTraderBase>;
    getContractAt(
      name: "FreezableIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FreezableIsolationModeVaultFactory>;
    getContractAt(
      name: "AsyncIsolationModeUnwrapperTraderImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AsyncIsolationModeUnwrapperTraderImpl>;
    getContractAt(
      name: "AsyncIsolationModeWrapperTraderImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AsyncIsolationModeWrapperTraderImpl>;
    getContractAt(
      name: "IsolationModeTokenVaultV1ActionsImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1ActionsImpl>;
    getContractAt(
      name: "IsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1>;
    getContractAt(
      name: "IsolationModeTokenVaultV1WithFreezable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1WithFreezable>;
    getContractAt(
      name: "IsolationModeTokenVaultV1WithFreezableAndPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1WithFreezableAndPausable>;
    getContractAt(
      name: "IsolationModeTokenVaultV1WithPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1WithPausable>;
    getContractAt(
      name: "IsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeVaultFactory>;
    getContractAt(
      name: "UpgradeableAsyncIsolationModeUnwrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableAsyncIsolationModeUnwrapperTrader>;
    getContractAt(
      name: "UpgradeableAsyncIsolationModeWrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableAsyncIsolationModeWrapperTrader>;
    getContractAt(
      name: "IAsyncIsolationModeTraderBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAsyncIsolationModeTraderBase>;
    getContractAt(
      name: "IFreezableIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFreezableIsolationModeVaultFactory>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1WithFreezable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithFreezable>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1WithFreezableAndPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithFreezableAndPausable>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1WithPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithPausable>;
    getContractAt(
      name: "IIsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "IIsolationModeUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeUpgradeableProxy>;
    getContractAt(
      name: "IIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeVaultFactory>;
    getContractAt(
      name: "IIsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeWrapperTraderV2>;
    getContractAt(
      name: "IUpgradeableAsyncIsolationModeUnwrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeUnwrapperTrader>;
    getContractAt(
      name: "IUpgradeableAsyncIsolationModeWrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeWrapperTrader>;
    getContractAt(
      name: "IsolationModeUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeUpgradeableProxy>;
    getContractAt(
      name: "SimpleIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleIsolationModeVaultFactory>;
    getContractAt(
      name: "IDolomiteInterestSetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteInterestSetter>;
    getContractAt(
      name: "IDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMargin>;
    getContractAt(
      name: "IDolomiteMarginAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginAdmin>;
    getContractAt(
      name: "IDolomiteMarginExchangeWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginExchangeWrapper>;
    getContractAt(
      name: "IDolomitePriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomitePriceOracle>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "GmxV2IsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxV2IsolationModeTokenVaultV1>;
    getContractAt(
      name: "GmxV2IsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxV2IsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "GmxV2IsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxV2IsolationModeVaultFactory>;
    getContractAt(
      name: "GmxV2IsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxV2IsolationModeWrapperTraderV2>;
    getContractAt(
      name: "GmxV2Library",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxV2Library>;
    getContractAt(
      name: "GmxV2MarketTokenPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxV2MarketTokenPriceOracle>;
    getContractAt(
      name: "GmxV2Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxV2Registry>;
    getContractAt(
      name: "IGmxDataStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxDataStore>;
    getContractAt(
      name: "IGmxDepositCallbackReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxDepositCallbackReceiver>;
    getContractAt(
      name: "IGmxDepositHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxDepositHandler>;
    getContractAt(
      name: "IGmxEventEmitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxEventEmitter>;
    getContractAt(
      name: "IGmxExchangeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxExchangeRouter>;
    getContractAt(
      name: "IGmxMarketToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxMarketToken>;
    getContractAt(
      name: "IGmxOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxOracle>;
    getContractAt(
      name: "IGmxReader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxReader>;
    getContractAt(
      name: "IGmxRoleStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxRoleStore>;
    getContractAt(
      name: "IGmxRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxRouter>;
    getContractAt(
      name: "IGmxV2IsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxV2IsolationModeTokenVaultV1>;
    getContractAt(
      name: "IGmxV2IsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxV2IsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "IGmxV2IsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxV2IsolationModeVaultFactory>;
    getContractAt(
      name: "IGmxV2IsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxV2IsolationModeWrapperTraderV2>;
    getContractAt(
      name: "IGmxV2MarketTokenPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxV2MarketTokenPriceOracle>;
    getContractAt(
      name: "IGmxV2Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxV2Registry>;
    getContractAt(
      name: "IGmxWithdrawalCallbackReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxWithdrawalCallbackReceiver>;
    getContractAt(
      name: "IGmxWithdrawalHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxWithdrawalHandler>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
