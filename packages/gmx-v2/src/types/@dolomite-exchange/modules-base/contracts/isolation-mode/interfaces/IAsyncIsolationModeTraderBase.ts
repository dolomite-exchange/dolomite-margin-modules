/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface IAsyncIsolationModeTraderBaseInterface
  extends utils.Interface {
  functions: {
    "HANDLER_REGISTRY()": FunctionFragment;
    "WETH()": FunctionFragment;
    "callbackGasLimit()": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "ownerWithdrawETH(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HANDLER_REGISTRY"
      | "WETH"
      | "callbackGasLimit"
      | "isHandler"
      | "ownerWithdrawETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HANDLER_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawETH",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "HANDLER_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "OwnerWithdrawETH(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerWithdrawETH"): EventFragment;
}

export interface OwnerWithdrawETHEventObject {
  _receiver: string;
  _bal: BigNumber;
}
export type OwnerWithdrawETHEvent = TypedEvent<
  [string, BigNumber],
  OwnerWithdrawETHEventObject
>;

export type OwnerWithdrawETHEventFilter =
  TypedEventFilter<OwnerWithdrawETHEvent>;

export interface IAsyncIsolationModeTraderBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAsyncIsolationModeTraderBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HANDLER_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    callbackGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<[boolean]>;

    ownerWithdrawETH(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  HANDLER_REGISTRY(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  isHandler(_handler: string, overrides?: CallOverrides): Promise<boolean>;

  ownerWithdrawETH(
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    HANDLER_REGISTRY(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<boolean>;

    ownerWithdrawETH(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerWithdrawETH(address,uint256)"(
      _receiver?: null,
      _bal?: null
    ): OwnerWithdrawETHEventFilter;
    OwnerWithdrawETH(
      _receiver?: null,
      _bal?: null
    ): OwnerWithdrawETHEventFilter;
  };

  estimateGas: {
    HANDLER_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdrawETH(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HANDLER_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callbackGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isHandler(
      _handler: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerWithdrawETH(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
