/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BaseRegistry,
  BaseRegistryInterface,
} from "../../../../../@dolomite-exchange/modules-base/contracts/general/BaseRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_dolomiteRegistry",
        type: "address",
      },
    ],
    name: "DolomiteRegistrySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "DOLOMITE_MARGIN",
    outputs: [
      {
        internalType: "contract IDolomiteMargin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DOLOMITE_MARGIN_OWNER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dolomiteRegistry",
    outputs: [
      {
        internalType: "contract IDolomiteRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dolomiteRegistry",
        type: "address",
      },
    ],
    name: "ownerSetDolomiteRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506109b5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806315c14a4a14610051578063bd12584f1461006f578063cbffd92114610077578063ffd1271b1461008c575b600080fd5b6100596100a1565b6040516100669190610695565b60405180910390f35b6100596100da565b61007f61010a565b60405161006691906106bd565b61009f61009a3660046106ed565b610184565b005b60006100d56100d160017f01095cd170b13c49f67c675e3bc004094df00c531fa118e86b230655aba7aa1761072c565b5490565b905090565b60006100d56100d160017f12525b307d8d9fd813165be18b676c012a1c9861f010452b12618f637a593b2a61072c565b60006101146100a1565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561014c57600080fd5b505afa158015610160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d5919061074e565b336101e161019061010a565b6001600160a01b0316826001600160a01b0316147127b7363ca237b637b6b4ba32a6b0b933b4b760711b7f43616c6c6572206973206e6f74206f776e6572206f6620446f6c6f6d69746500846101ee565b6101ea82610269565b5050565b83610263576101fc83610353565b6101d160f51b61020b84610353565b61080f60f21b61021a856103ee565b604051610234959493929190601f60f91b906020016107dd565b60408051601f198184030181529082905262461bcd60e51b825261025a9160040161086d565b60405180910390fd5b50505050565b6102ae6001600160a01b03821615156b42617365526567697374727960a01b7f496e76616c696420646f6c6f6d69746552656769737472790000000000000000610534565b60006102d182632f32699960e01b60405180602001604052806000815250610568565b9050808060200190518101906102e7919061074e565b5061031b61031660017f12525b307d8d9fd813165be18b676c012a1c9861f010452b12618f637a593b2a61072c565b839055565b6040516001600160a01b038316907fd4968e6ff4b2df084b2b71aa90bc2137eee816091d7f1c17f0b66a602f9dbaeb90600090a25050565b6060600082604051602001610368919061088b565b60408051601f19818403018152919052905060205b80156103d3578061038d816108a0565b9150508181815181106103a2576103a26108b7565b01602001516001600160f81b031916156103ce5760006103c38260016108cd565b835250909392505050565b61037d565b5060408051600080825260208201909252905b509392505050565b60408051602a80825260608281019093526001600160a01b03841691600091602082018180368337019050509050603060f81b81600081518110610434576104346108b7565b60200101906001600160f81b031916908160001a905350607860f81b81600181518110610463576104636108b7565b60200101906001600160f81b031916908160001a90535060005b60148110156103e65760006104938260026108e5565b90506104a1600f8516610633565b836104ad83602961072c565b815181106104bd576104bd6108b7565b60200101906001600160f81b031916908160001a905350600484901c93506104e7600f8516610633565b836104f383602861072c565b81518110610503576105036108b7565b60200101906001600160f81b031916908160001a9053505060049290921c918061052c81610904565b91505061047d565b826105635761054282610353565b6101d160f51b61055183610353565b6040516020016102349392919061091f565b505050565b6060600080856001600160a01b0316858560405160200161058a929190610957565b60408051601f19818403018152908290526105a491610973565b600060405180830381855afa9150503d80600081146105df576040519150601f19603f3d011682016040523d82523d6000602084013e6105e4565b606091505b509150915061062a8280156105fa575060008251115b6c2b30b634b230ba34b7b72634b160991b7410d85b1b081d1bc81d185c99d95d0819985a5b1959605a1b896101ee565b95945050505050565b6000600a821015610652576106496030836108cd565b60f81b92915050565b6106496057836108cd565b60006001600160a01b0382165b92915050565b600061066a8261065d565b600061066a82610670565b61068f8161067b565b82525050565b6020810161066a8284610686565b60006001600160a01b03821661066a565b61068f816106a3565b6020810161066a82846106b4565b6106d4816106a3565b81146106df57600080fd5b50565b803561066a816106cb565b60006020828403121561070257610702600080fd5b600061070e84846106e2565b949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561073e5761073e610716565b500390565b805161066a816106cb565b60006020828403121561076357610763600080fd5b600061070e8484610743565b60005b8381101561078a578181015183820152602001610772565b838111156102635750506000910152565b60006107a5825190565b6107b381856020860161076f565b9290920192915050565b6001600160f01b0319811661068f565b6001600160f81b0319811661068f565b60006107e9828961079b565b91506107f582886107bd565b600282019150610805828761079b565b915061081182866107bd565b600282019150610821828561079b565b915061082d82846107cd565b506001019695505050505050565b6000610845825190565b80845260208401935061085c81856020860161076f565b601f01601f19169290920192915050565b6020808252810161087e818461083b565b9392505050565b8061068f565b60006108978284610885565b50602001919050565b6000816108af576108af610716565b506000190190565b634e487b7160e01b600052603260045260246000fd5b600082198211156108e0576108e0610716565b500190565b60008160001904831182151516156108ff576108ff610716565b500290565b600060001982141561091857610918610716565b5060010190565b600061092b828661079b565b915061093782856107bd565b60028201915061062a828461079b565b6001600160e01b0319811661068f565b60006109638285610947565b60048201915061070e828461079b565b600061087e828461079b56fea264697066735822122025ca9a902be370840e89ba7199fb24d7917ab887d64168dc5092b846aa86cd8164736f6c63430008090033";

type BaseRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseRegistry__factory extends ContractFactory {
  constructor(...args: BaseRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<BaseRegistry> {
    return super.deploy(overrides || {}) as Promise<BaseRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BaseRegistry {
    return super.attach(address) as BaseRegistry;
  }
  override connect(signer: Signer): BaseRegistry__factory {
    return super.connect(signer) as BaseRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseRegistryInterface {
    return new utils.Interface(_abi) as BaseRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseRegistry {
    return new Contract(address, _abi, signerOrProvider) as BaseRegistry;
  }
}
