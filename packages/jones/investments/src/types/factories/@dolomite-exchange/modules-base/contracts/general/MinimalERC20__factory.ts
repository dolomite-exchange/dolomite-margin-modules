/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MinimalERC20,
  MinimalERC20Interface,
} from "../../../../../@dolomite-exchange/modules-base/contracts/general/MinimalERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c2d38038062000c2d833981016040819052620000349162000297565b620000418383836200004a565b5050506200036d565b82516200005f9060039060208601906200008e565b508151620000759060049060208501906200008e565b506005805460ff191660ff929092169190911790555050565b8280546200009c906200033c565b90600052602060002090601f016020900481019282620000c057600085556200010b565b82601f10620000db57805160ff19168380011785556200010b565b828001600101855582156200010b579182015b828111156200010b578251825591602001919060010190620000ee565b50620001199291506200011d565b5090565b5b808211156200011957600081556001016200011e565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171562000172576200017262000134565b6040525050565b60006200018560405190565b90506200019382826200014a565b919050565b60006001600160401b03821115620001b457620001b462000134565b601f19601f83011660200192915050565b60005b83811015620001e2578181015183820152602001620001c8565b83811115620001f2576000848401525b50505050565b60006200020f620002098462000198565b62000179565b9050828152602081018484840111156200022c576200022c600080fd5b62000239848285620001c5565b509392505050565b600082601f830112620002575762000257600080fd5b815162000269848260208601620001f8565b949350505050565b60ff811681146200028157600080fd5b50565b8051620002918162000271565b92915050565b600080600060608486031215620002b157620002b1600080fd5b83516001600160401b03811115620002cc57620002cc600080fd5b620002da8682870162000241565b93505060208401516001600160401b03811115620002fb57620002fb600080fd5b620003098682870162000241565b92505060406200031c8682870162000284565b9150509250925092565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200035157607f821691505b6020821081141562000367576200036762000326565b50919050565b6108b0806200037d6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fa57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d657806323b872dd146100e7575b600080fd5b6100a061018a565b6040516100ad91906104dc565b60405180910390f35b6100c96100c4366004610538565b61021c565b6040516100ad919061057f565b6002545b6040516100ad9190610593565b6100c96100f53660046105a1565b610236565b60055460ff166040516100ad91906105fa565b6100da61011b366004610608565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c366004610538565b610269565b6100da61015f366004610631565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101999061067a565b80601f01602080910402602001604051908101604052809291908181526020018280546101c59061067a565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610334565b61024f85858561038d565b506001949350505050565b6060600480546101999061067a565b60003361022a81858561038d565b6001600160a01b0383166102a65760405162461bcd60e51b815260040161029d906106eb565b60405180910390fd5b6001600160a01b0382166102cc5760405162461bcd60e51b815260040161029d9061073a565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610327908590610593565b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220548181101561037a5760405162461bcd60e51b815260040161029d9061074a565b6103878484848403610277565b50505050565b6001600160a01b0383166103b35760405162461bcd60e51b815260040161029d906107c7565b6001600160a01b0382166103d95760405162461bcd60e51b815260040161029d90610817565b6001600160a01b038316600090815260208190526040902054818110156104125760405162461bcd60e51b815260040161029d9061086a565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610470908690610593565b60405180910390a350505050565b60005b83811015610499578181015183820152602001610481565b838111156103875750506000910152565b60006104b4825190565b8084526020840193506104cb81856020860161047e565b601f01601f19169290920192915050565b602080825281016104ed81846104aa565b9392505050565b60006001600160a01b038216610230565b61050e816104f4565b811461051957600080fd5b50565b803561023081610505565b8061050e565b803561023081610527565b6000806040838503121561054e5761054e600080fd5b600061055a858561051c565b925050602061056b8582860161052d565b9150509250929050565b8015155b82525050565b602081016102308284610575565b80610579565b60208101610230828461058d565b6000806000606084860312156105b9576105b9600080fd5b60006105c5868661051c565b93505060206105d68682870161051c565b92505060406105e78682870161052d565b9150509250925092565b60ff8116610579565b6020810161023082846105f1565b60006020828403121561061d5761061d600080fd5b6000610629848461051c565b949350505050565b6000806040838503121561064757610647600080fd5b6000610653858561051c565b925050602061056b8582860161051c565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061068e57607f821691505b602082108114156106a1576106a1610664565b50919050565b602481526000602082017f45524332303a20417070726f76652066726f6d20746865207a65726f206164648152637265737360e01b602082015291505b5060400190565b60208082528101610230816106a7565b602281526000602082017f45524332303a20417070726f766520746f20746865207a65726f206164647265815261737360f01b602082015291506106e4565b60208082528101610230816106fb565b6020808252810161023081601d81527f45524332303a20496e73756666696369656e7420616c6c6f77616e6365000000602082015260400190565b602581526000602082017f45524332303a205472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b602082015291506106e4565b6020808252810161023081610785565b602381526000602082017f45524332303a205472616e7366657220746f20746865207a65726f206164647281526265737360e81b602082015291506106e4565b60208082528101610230816107d7565b602681526000602082017f45524332303a205472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b602082015291506106e4565b602080825281016102308161082756fea26469706673582212204066af0cceb70a44261e466cde11e5d65ecbb37e125551dff41823a4625e3a3d64736f6c63430008090033";

type MinimalERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinimalERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinimalERC20__factory extends ContractFactory {
  constructor(...args: MinimalERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<MinimalERC20> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    ) as Promise<MinimalERC20>;
  }
  override getDeployTransaction(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    );
  }
  override attach(address: string): MinimalERC20 {
    return super.attach(address) as MinimalERC20;
  }
  override connect(signer: Signer): MinimalERC20__factory {
    return super.connect(signer) as MinimalERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinimalERC20Interface {
    return new utils.Interface(_abi) as MinimalERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MinimalERC20 {
    return new Contract(address, _abi, signerOrProvider) as MinimalERC20;
  }
}
