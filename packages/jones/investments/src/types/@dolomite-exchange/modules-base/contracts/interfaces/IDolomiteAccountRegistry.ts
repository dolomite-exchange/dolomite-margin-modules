/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IDolomiteAccountRegistryInterface extends utils.Interface {
  functions: {
    "getAccountByVault(address)": FunctionFragment;
    "getFactories()": FunctionFragment;
    "getVaultsByAccount(address)": FunctionFragment;
    "isAccountInRegistry(address)": FunctionFragment;
    "isIsolationModeVault(address)": FunctionFragment;
    "isMarketIdIsolationMode(uint256)": FunctionFragment;
    "isRestrictedAccount(address)": FunctionFragment;
    "isTokenIsolationMode(address)": FunctionFragment;
    "ownerSetRestrictedAccount(address,bool)": FunctionFragment;
    "registerVault(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountByVault"
      | "getFactories"
      | "getVaultsByAccount"
      | "isAccountInRegistry"
      | "isIsolationModeVault"
      | "isMarketIdIsolationMode"
      | "isRestrictedAccount"
      | "isTokenIsolationMode"
      | "ownerSetRestrictedAccount"
      | "registerVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountByVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountInRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isIsolationModeVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketIdIsolationMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRestrictedAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenIsolationMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetRestrictedAccount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVault",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountByVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountInRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIsolationModeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketIdIsolationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRestrictedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenIsolationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetRestrictedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVault",
    data: BytesLike
  ): Result;

  events: {
    "RestrictedAccountSet(address,bool)": EventFragment;
    "VaultAddedToAccount(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RestrictedAccountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAddedToAccount"): EventFragment;
}

export interface RestrictedAccountSetEventObject {
  _account: string;
  _isRestricted: boolean;
}
export type RestrictedAccountSetEvent = TypedEvent<
  [string, boolean],
  RestrictedAccountSetEventObject
>;

export type RestrictedAccountSetEventFilter =
  TypedEventFilter<RestrictedAccountSetEvent>;

export interface VaultAddedToAccountEventObject {
  _account: string;
  _vault: string;
}
export type VaultAddedToAccountEvent = TypedEvent<
  [string, string],
  VaultAddedToAccountEventObject
>;

export type VaultAddedToAccountEventFilter =
  TypedEventFilter<VaultAddedToAccountEvent>;

export interface IDolomiteAccountRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDolomiteAccountRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFactories(overrides?: CallOverrides): Promise<[string[]]>;

    getVaultsByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isAccountInRegistry(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIsolationModeVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketIdIsolationMode(
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRestrictedAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenIsolationMode(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerSetRestrictedAccount(
      _account: string,
      _isRestricted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerVault(
      _account: string,
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getAccountByVault(_vault: string, overrides?: CallOverrides): Promise<string>;

  getFactories(overrides?: CallOverrides): Promise<string[]>;

  getVaultsByAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isAccountInRegistry(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIsolationModeVault(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketIdIsolationMode(
    _marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRestrictedAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenIsolationMode(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ownerSetRestrictedAccount(
    _account: string,
    _isRestricted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerVault(
    _account: string,
    _vault: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getFactories(overrides?: CallOverrides): Promise<string[]>;

    getVaultsByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isAccountInRegistry(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIsolationModeVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketIdIsolationMode(
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRestrictedAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenIsolationMode(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerSetRestrictedAccount(
      _account: string,
      _isRestricted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVault(
      _account: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RestrictedAccountSet(address,bool)"(
      _account?: null,
      _isRestricted?: null
    ): RestrictedAccountSetEventFilter;
    RestrictedAccountSet(
      _account?: null,
      _isRestricted?: null
    ): RestrictedAccountSetEventFilter;

    "VaultAddedToAccount(address,address)"(
      _account?: null,
      _vault?: null
    ): VaultAddedToAccountEventFilter;
    VaultAddedToAccount(
      _account?: null,
      _vault?: null
    ): VaultAddedToAccountEventFilter;
  };

  estimateGas: {
    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFactories(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultsByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountInRegistry(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIsolationModeVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketIdIsolationMode(
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRestrictedAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenIsolationMode(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerSetRestrictedAccount(
      _account: string,
      _isRestricted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerVault(
      _account: string,
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactories(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultsByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountInRegistry(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIsolationModeVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketIdIsolationMode(
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRestrictedAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenIsolationMode(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetRestrictedAccount(
      _account: string,
      _isRestricted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerVault(
      _account: string,
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
