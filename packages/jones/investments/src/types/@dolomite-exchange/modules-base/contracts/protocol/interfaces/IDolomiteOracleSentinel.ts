/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface IDolomiteOracleSentinelInterface extends utils.Interface {
  functions: {
    "gracePeriod()": FunctionFragment;
    "isBorrowAllowed()": FunctionFragment;
    "isLiquidationAllowed()": FunctionFragment;
    "ownerSetGracePeriod(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "gracePeriod"
      | "isBorrowAllowed"
      | "isLiquidationAllowed"
      | "ownerSetGracePeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidationAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGracePeriod",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidationAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGracePeriod",
    data: BytesLike
  ): Result;

  events: {
    "GracePeriodSet(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GracePeriodSet"): EventFragment;
}

export interface GracePeriodSetEventObject {
  gracePeriod: BigNumber;
}
export type GracePeriodSetEvent = TypedEvent<
  [BigNumber],
  GracePeriodSetEventObject
>;

export type GracePeriodSetEventFilter = TypedEventFilter<GracePeriodSetEvent>;

export interface IDolomiteOracleSentinel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDolomiteOracleSentinelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBorrowAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidationAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    ownerSetGracePeriod(
      _gracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  isBorrowAllowed(overrides?: CallOverrides): Promise<boolean>;

  isLiquidationAllowed(overrides?: CallOverrides): Promise<boolean>;

  ownerSetGracePeriod(
    _gracePeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isBorrowAllowed(overrides?: CallOverrides): Promise<boolean>;

    isLiquidationAllowed(overrides?: CallOverrides): Promise<boolean>;

    ownerSetGracePeriod(
      _gracePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GracePeriodSet(uint256)"(gracePeriod?: null): GracePeriodSetEventFilter;
    GracePeriodSet(gracePeriod?: null): GracePeriodSetEventFilter;
  };

  estimateGas: {
    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isBorrowAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidationAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetGracePeriod(
      _gracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBorrowAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidationAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetGracePeriod(
      _gracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
