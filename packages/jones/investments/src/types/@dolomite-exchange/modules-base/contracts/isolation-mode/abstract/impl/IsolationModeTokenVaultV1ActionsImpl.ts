/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };
}

export interface IsolationModeTokenVaultV1ActionsImplInterface
  extends utils.Interface {
  functions: {
    "requireMinAmountIsNotTooLargeForLiquidation(IDolomiteMargin,uint256,(address,uint256),uint256,uint256,uint256,uint256)": FunctionFragment;
    "requireMinAmountIsNotTooLargeForWrapToUnderlying(IDolomiteRegistry,IDolomiteMargin,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "validateIsNotLiquidatable(IIsolationModeTokenVaultV1,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "requireMinAmountIsNotTooLargeForLiquidation"
      | "requireMinAmountIsNotTooLargeForWrapToUnderlying"
      | "validateIsNotLiquidatable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "requireMinAmountIsNotTooLargeForLiquidation",
    values: [
      string,
      BigNumberish,
      IDolomiteStructs.AccountInfoStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requireMinAmountIsNotTooLargeForWrapToUnderlying",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIsNotLiquidatable",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "requireMinAmountIsNotTooLargeForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireMinAmountIsNotTooLargeForWrapToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIsNotLiquidatable",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IsolationModeTokenVaultV1ActionsImpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IsolationModeTokenVaultV1ActionsImplInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    requireMinAmountIsNotTooLargeForLiquidation(
      _dolomiteMargin: string,
      _chainId: BigNumberish,
      _liquidAccount: IDolomiteStructs.AccountInfoStruct,
      _inputMarketId: BigNumberish,
      _outputMarketId: BigNumberish,
      _inputTokenAmount: BigNumberish,
      _minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireMinAmountIsNotTooLargeForWrapToUnderlying(
      _dolomiteRegistry: string,
      _dolomiteMargin: string,
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputMarketId: BigNumberish,
      _outputMarketId: BigNumberish,
      _inputAmount: BigNumberish,
      _minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateIsNotLiquidatable(
      _vault: string,
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  requireMinAmountIsNotTooLargeForLiquidation(
    _dolomiteMargin: string,
    _chainId: BigNumberish,
    _liquidAccount: IDolomiteStructs.AccountInfoStruct,
    _inputMarketId: BigNumberish,
    _outputMarketId: BigNumberish,
    _inputTokenAmount: BigNumberish,
    _minOutputAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  requireMinAmountIsNotTooLargeForWrapToUnderlying(
    _dolomiteRegistry: string,
    _dolomiteMargin: string,
    _accountOwner: string,
    _accountNumber: BigNumberish,
    _inputMarketId: BigNumberish,
    _outputMarketId: BigNumberish,
    _inputAmount: BigNumberish,
    _minOutputAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  validateIsNotLiquidatable(
    _vault: string,
    _accountNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    requireMinAmountIsNotTooLargeForLiquidation(
      _dolomiteMargin: string,
      _chainId: BigNumberish,
      _liquidAccount: IDolomiteStructs.AccountInfoStruct,
      _inputMarketId: BigNumberish,
      _outputMarketId: BigNumberish,
      _inputTokenAmount: BigNumberish,
      _minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requireMinAmountIsNotTooLargeForWrapToUnderlying(
      _dolomiteRegistry: string,
      _dolomiteMargin: string,
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputMarketId: BigNumberish,
      _outputMarketId: BigNumberish,
      _inputAmount: BigNumberish,
      _minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateIsNotLiquidatable(
      _vault: string,
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    requireMinAmountIsNotTooLargeForLiquidation(
      _dolomiteMargin: string,
      _chainId: BigNumberish,
      _liquidAccount: IDolomiteStructs.AccountInfoStruct,
      _inputMarketId: BigNumberish,
      _outputMarketId: BigNumberish,
      _inputTokenAmount: BigNumberish,
      _minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireMinAmountIsNotTooLargeForWrapToUnderlying(
      _dolomiteRegistry: string,
      _dolomiteMargin: string,
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputMarketId: BigNumberish,
      _outputMarketId: BigNumberish,
      _inputAmount: BigNumberish,
      _minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateIsNotLiquidatable(
      _vault: string,
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    requireMinAmountIsNotTooLargeForLiquidation(
      _dolomiteMargin: string,
      _chainId: BigNumberish,
      _liquidAccount: IDolomiteStructs.AccountInfoStruct,
      _inputMarketId: BigNumberish,
      _outputMarketId: BigNumberish,
      _inputTokenAmount: BigNumberish,
      _minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireMinAmountIsNotTooLargeForWrapToUnderlying(
      _dolomiteRegistry: string,
      _dolomiteMargin: string,
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputMarketId: BigNumberish,
      _outputMarketId: BigNumberish,
      _inputAmount: BigNumberish,
      _minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateIsNotLiquidatable(
      _vault: string,
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
