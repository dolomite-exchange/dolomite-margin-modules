/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export declare namespace IDolomiteStructs {
  export type DecimalStruct = { value: BigNumberish };

  export type DecimalStructOutput = [BigNumber] & { value: BigNumber };
}

export interface IDolomiteAccountRiskOverrideSetterInterface
  extends utils.Interface {
  functions: {
    "getAccountRiskOverride(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getAccountRiskOverride"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountRiskOverride",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountRiskOverride",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDolomiteAccountRiskOverrideSetter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDolomiteAccountRiskOverrideSetterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountRiskOverride(
      _accountOwner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.DecimalStructOutput,
        IDolomiteStructs.DecimalStructOutput
      ] & {
        marginRatioOverride: IDolomiteStructs.DecimalStructOutput;
        liquidationSpreadOverride: IDolomiteStructs.DecimalStructOutput;
      }
    >;
  };

  getAccountRiskOverride(
    _accountOwner: string,
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.DecimalStructOutput,
      IDolomiteStructs.DecimalStructOutput
    ] & {
      marginRatioOverride: IDolomiteStructs.DecimalStructOutput;
      liquidationSpreadOverride: IDolomiteStructs.DecimalStructOutput;
    }
  >;

  callStatic: {
    getAccountRiskOverride(
      _accountOwner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.DecimalStructOutput,
        IDolomiteStructs.DecimalStructOutput
      ] & {
        marginRatioOverride: IDolomiteStructs.DecimalStructOutput;
        liquidationSpreadOverride: IDolomiteStructs.DecimalStructOutput;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getAccountRiskOverride(
      _accountOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountRiskOverride(
      _accountOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
