/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IGmxRewardRouterV2Interface extends utils.Interface {
  functions: {
    "acceptTransfer(address)": FunctionFragment;
    "handleRewards(bool,bool,bool,bool,bool,bool,bool)": FunctionFragment;
    "pendingReceivers(address)": FunctionFragment;
    "signalTransfer(address)": FunctionFragment;
    "stakeEsGmx(uint256)": FunctionFragment;
    "stakeGmx(uint256)": FunctionFragment;
    "unstakeEsGmx(uint256)": FunctionFragment;
    "unstakeGmx(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptTransfer"
      | "handleRewards"
      | "pendingReceivers"
      | "signalTransfer"
      | "stakeEsGmx"
      | "stakeGmx"
      | "unstakeEsGmx"
      | "unstakeGmx"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleRewards",
    values: [boolean, boolean, boolean, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReceivers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeEsGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeEsGmx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeGmx",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeEsGmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeEsGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeGmx", data: BytesLike): Result;

  events: {};
}

export interface IGmxRewardRouterV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGmxRewardRouterV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptTransfer(
      _sender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    handleRewards(
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pendingReceivers(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _receiver: string }>;

    signalTransfer(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptTransfer(
    _sender: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  handleRewards(
    _shouldClaimGmx: boolean,
    _shouldStakeGmx: boolean,
    _shouldClaimEsGmx: boolean,
    _shouldStakeEsGmx: boolean,
    _shouldStakeMultiplierPoints: boolean,
    _shouldClaimWeth: boolean,
    _shouldConvertWethToEth: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pendingReceivers(_sender: string, overrides?: CallOverrides): Promise<string>;

  signalTransfer(
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeEsGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeEsGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeGmx(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptTransfer(_sender: string, overrides?: CallOverrides): Promise<void>;

    handleRewards(
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingReceivers(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<string>;

    signalTransfer(_receiver: string, overrides?: CallOverrides): Promise<void>;

    stakeEsGmx(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeGmx(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstakeEsGmx(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeGmx(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptTransfer(
      _sender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    handleRewards(
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pendingReceivers(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signalTransfer(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptTransfer(
      _sender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    handleRewards(
      _shouldClaimGmx: boolean,
      _shouldStakeGmx: boolean,
      _shouldClaimEsGmx: boolean,
      _shouldStakeEsGmx: boolean,
      _shouldStakeMultiplierPoints: boolean,
      _shouldClaimWeth: boolean,
      _shouldConvertWethToEth: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pendingReceivers(
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signalTransfer(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeEsGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeGmx(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
