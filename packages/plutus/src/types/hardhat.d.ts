/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseLiquidatorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseLiquidatorProxy__factory>;
    getContractFactory(
      name: "BaseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRegistry__factory>;
    getContractFactory(
      name: "HasLiquidatorRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasLiquidatorRegistry__factory>;
    getContractFactory(
      name: "MinimalERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalERC20__factory>;
    getContractFactory(
      name: "OnlyDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyDolomiteMargin__factory>;
    getContractFactory(
      name: "OnlyDolomiteMarginForUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyDolomiteMarginForUpgradeable__factory>;
    getContractFactory(
      name: "IAuthorizationBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizationBase__factory>;
    getContractFactory(
      name: "IBaseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistry__factory>;
    getContractFactory(
      name: "IBorrowPositionProxyV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowPositionProxyV1__factory>;
    getContractFactory(
      name: "IBorrowPositionProxyV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowPositionProxyV2__factory>;
    getContractFactory(
      name: "IDolomiteMarginUnwrapperTraderForLiquidatorV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginUnwrapperTraderForLiquidatorV3__factory>;
    getContractFactory(
      name: "IDolomiteMarginWrapperTraderForLiquidatorV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginWrapperTraderForLiquidatorV3__factory>;
    getContractFactory(
      name: "IDolomiteRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteRegistry__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "IEventEmitterRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEventEmitterRegistry__factory>;
    getContractFactory(
      name: "IExpiry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExpiry__factory>;
    getContractFactory(
      name: "IGenericTraderProxyV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericTraderProxyV1__factory>;
    getContractFactory(
      name: "ILiquidatorAssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidatorAssetRegistry__factory>;
    getContractFactory(
      name: "IOnlyDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOnlyDolomiteMargin__factory>;
    getContractFactory(
      name: "IWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWhitelist__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1ActionsImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1ActionsImpl__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "IsolationModeTokenVaultV1WithPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTokenVaultV1WithPausable__factory>;
    getContractFactory(
      name: "IsolationModeTraderBaseV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeTraderBaseV2__factory>;
    getContractFactory(
      name: "IsolationModeUnwrapperTraderV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeUnwrapperTraderV1__factory>;
    getContractFactory(
      name: "IsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "IsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IsolationModeWrapperTraderV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeWrapperTraderV1__factory>;
    getContractFactory(
      name: "IsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "IIsolationModeTokenVaultV1WithPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithPausable__factory>;
    getContractFactory(
      name: "IIsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "IIsolationModeUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeUpgradeableProxy__factory>;
    getContractFactory(
      name: "IIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IIsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "IUpgradeableAsyncIsolationModeUnwrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeUnwrapperTrader__factory>;
    getContractFactory(
      name: "IUpgradeableAsyncIsolationModeWrapperTrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeWrapperTrader__factory>;
    getContractFactory(
      name: "IsolationModeUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeUpgradeableProxy__factory>;
    getContractFactory(
      name: "IDolomiteInterestSetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteInterestSetter__factory>;
    getContractFactory(
      name: "IDolomiteMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMargin__factory>;
    getContractFactory(
      name: "IDolomiteMarginAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginAdmin__factory>;
    getContractFactory(
      name: "IDolomiteMarginCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginCallee__factory>;
    getContractFactory(
      name: "IDolomiteMarginExchangeWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomiteMarginExchangeWrapper__factory>;
    getContractFactory(
      name: "IDolomitePriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDolomitePriceOracle__factory>;
    getContractFactory(
      name: "GLPMathLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GLPMathLib__factory>;
    getContractFactory(
      name: "IGLPIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGLPIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IGLPManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGLPManager__factory>;
    getContractFactory(
      name: "IGLPRewardsRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGLPRewardsRouterV2__factory>;
    getContractFactory(
      name: "IGMXIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGMXIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IGmxRegistryV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxRegistryV1__factory>;
    getContractFactory(
      name: "IGmxRewardRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxRewardRouterV2__factory>;
    getContractFactory(
      name: "IGmxVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxVault__factory>;
    getContractFactory(
      name: "ChainlinkAutomationPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkAutomationPriceOracle__factory>;
    getContractFactory(
      name: "IChainlinkAutomation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAutomation__factory>;
    getContractFactory(
      name: "IChainlinkAutomationPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAutomationPriceOracle__factory>;
    getContractFactory(
      name: "IChainlinkRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkRegistry__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DolomiteCompatibleWhitelistForPlutusDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DolomiteCompatibleWhitelistForPlutusDAO__factory>;
    getContractFactory(
      name: "IPlutusVaultGLP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlutusVaultGLP__factory>;
    getContractFactory(
      name: "IPlutusVaultGLPFarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlutusVaultGLPFarm__factory>;
    getContractFactory(
      name: "IPlutusVaultGLPIsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlutusVaultGLPIsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "IPlutusVaultGLPIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlutusVaultGLPIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "IPlutusVaultGLPRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlutusVaultGLPRouter__factory>;
    getContractFactory(
      name: "IPlutusVaultRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlutusVaultRegistry__factory>;
    getContractFactory(
      name: "PlutusVaultGLPIsolationModeTokenVaultV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultGLPIsolationModeTokenVaultV1__factory>;
    getContractFactory(
      name: "PlutusVaultGLPIsolationModeUnwrapperTraderV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultGLPIsolationModeUnwrapperTraderV1__factory>;
    getContractFactory(
      name: "PlutusVaultGLPIsolationModeUnwrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultGLPIsolationModeUnwrapperTraderV2__factory>;
    getContractFactory(
      name: "PlutusVaultGLPIsolationModeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultGLPIsolationModeVaultFactory__factory>;
    getContractFactory(
      name: "PlutusVaultGLPIsolationModeWrapperTraderV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultGLPIsolationModeWrapperTraderV1__factory>;
    getContractFactory(
      name: "PlutusVaultGLPIsolationModeWrapperTraderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultGLPIsolationModeWrapperTraderV2__factory>;
    getContractFactory(
      name: "PlutusVaultGLPPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultGLPPriceOracle__factory>;
    getContractFactory(
      name: "PlutusVaultGLPWithChainlinkAutomationPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultGLPWithChainlinkAutomationPriceOracle__factory>;
    getContractFactory(
      name: "PlutusVaultRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlutusVaultRegistry__factory>;

    getContractAt(
      name: "BaseLiquidatorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseLiquidatorProxy>;
    getContractAt(
      name: "BaseRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRegistry>;
    getContractAt(
      name: "HasLiquidatorRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HasLiquidatorRegistry>;
    getContractAt(
      name: "MinimalERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalERC20>;
    getContractAt(
      name: "OnlyDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyDolomiteMargin>;
    getContractAt(
      name: "OnlyDolomiteMarginForUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyDolomiteMarginForUpgradeable>;
    getContractAt(
      name: "IAuthorizationBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizationBase>;
    getContractAt(
      name: "IBaseRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistry>;
    getContractAt(
      name: "IBorrowPositionProxyV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowPositionProxyV1>;
    getContractAt(
      name: "IBorrowPositionProxyV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowPositionProxyV2>;
    getContractAt(
      name: "IDolomiteMarginUnwrapperTraderForLiquidatorV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginUnwrapperTraderForLiquidatorV3>;
    getContractAt(
      name: "IDolomiteMarginWrapperTraderForLiquidatorV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginWrapperTraderForLiquidatorV3>;
    getContractAt(
      name: "IDolomiteRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteRegistry>;
    getContractAt(
      name: "IERC4626",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "IEventEmitterRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEventEmitterRegistry>;
    getContractAt(
      name: "IExpiry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExpiry>;
    getContractAt(
      name: "IGenericTraderProxyV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericTraderProxyV1>;
    getContractAt(
      name: "ILiquidatorAssetRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidatorAssetRegistry>;
    getContractAt(
      name: "IOnlyDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOnlyDolomiteMargin>;
    getContractAt(
      name: "IWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWhitelist>;
    getContractAt(
      name: "IsolationModeTokenVaultV1ActionsImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1ActionsImpl>;
    getContractAt(
      name: "IsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1>;
    getContractAt(
      name: "IsolationModeTokenVaultV1WithPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTokenVaultV1WithPausable>;
    getContractAt(
      name: "IsolationModeTraderBaseV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeTraderBaseV2>;
    getContractAt(
      name: "IsolationModeUnwrapperTraderV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeUnwrapperTraderV1>;
    getContractAt(
      name: "IsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "IsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeVaultFactory>;
    getContractAt(
      name: "IsolationModeWrapperTraderV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeWrapperTraderV1>;
    getContractAt(
      name: "IsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeWrapperTraderV2>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1>;
    getContractAt(
      name: "IIsolationModeTokenVaultV1WithPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeTokenVaultV1WithPausable>;
    getContractAt(
      name: "IIsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "IIsolationModeUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeUpgradeableProxy>;
    getContractAt(
      name: "IIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeVaultFactory>;
    getContractAt(
      name: "IIsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIsolationModeWrapperTraderV2>;
    getContractAt(
      name: "IUpgradeableAsyncIsolationModeUnwrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeUnwrapperTrader>;
    getContractAt(
      name: "IUpgradeableAsyncIsolationModeWrapperTrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradeableAsyncIsolationModeWrapperTrader>;
    getContractAt(
      name: "IsolationModeUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeUpgradeableProxy>;
    getContractAt(
      name: "IDolomiteInterestSetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteInterestSetter>;
    getContractAt(
      name: "IDolomiteMargin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMargin>;
    getContractAt(
      name: "IDolomiteMarginAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginAdmin>;
    getContractAt(
      name: "IDolomiteMarginCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginCallee>;
    getContractAt(
      name: "IDolomiteMarginExchangeWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomiteMarginExchangeWrapper>;
    getContractAt(
      name: "IDolomitePriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDolomitePriceOracle>;
    getContractAt(
      name: "GLPMathLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GLPMathLib>;
    getContractAt(
      name: "IGLPIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGLPIsolationModeVaultFactory>;
    getContractAt(
      name: "IGLPManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGLPManager>;
    getContractAt(
      name: "IGLPRewardsRouterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGLPRewardsRouterV2>;
    getContractAt(
      name: "IGMXIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGMXIsolationModeVaultFactory>;
    getContractAt(
      name: "IGmxRegistryV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxRegistryV1>;
    getContractAt(
      name: "IGmxRewardRouterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxRewardRouterV2>;
    getContractAt(
      name: "IGmxVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxVault>;
    getContractAt(
      name: "ChainlinkAutomationPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkAutomationPriceOracle>;
    getContractAt(
      name: "IChainlinkAutomation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkAutomation>;
    getContractAt(
      name: "IChainlinkAutomationPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkAutomationPriceOracle>;
    getContractAt(
      name: "IChainlinkRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkRegistry>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "DolomiteCompatibleWhitelistForPlutusDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DolomiteCompatibleWhitelistForPlutusDAO>;
    getContractAt(
      name: "IPlutusVaultGLP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlutusVaultGLP>;
    getContractAt(
      name: "IPlutusVaultGLPFarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlutusVaultGLPFarm>;
    getContractAt(
      name: "IPlutusVaultGLPIsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlutusVaultGLPIsolationModeTokenVaultV1>;
    getContractAt(
      name: "IPlutusVaultGLPIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlutusVaultGLPIsolationModeVaultFactory>;
    getContractAt(
      name: "IPlutusVaultGLPRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlutusVaultGLPRouter>;
    getContractAt(
      name: "IPlutusVaultRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlutusVaultRegistry>;
    getContractAt(
      name: "PlutusVaultGLPIsolationModeTokenVaultV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultGLPIsolationModeTokenVaultV1>;
    getContractAt(
      name: "PlutusVaultGLPIsolationModeUnwrapperTraderV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultGLPIsolationModeUnwrapperTraderV1>;
    getContractAt(
      name: "PlutusVaultGLPIsolationModeUnwrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultGLPIsolationModeUnwrapperTraderV2>;
    getContractAt(
      name: "PlutusVaultGLPIsolationModeVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultGLPIsolationModeVaultFactory>;
    getContractAt(
      name: "PlutusVaultGLPIsolationModeWrapperTraderV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultGLPIsolationModeWrapperTraderV1>;
    getContractAt(
      name: "PlutusVaultGLPIsolationModeWrapperTraderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultGLPIsolationModeWrapperTraderV2>;
    getContractAt(
      name: "PlutusVaultGLPPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultGLPPriceOracle>;
    getContractAt(
      name: "PlutusVaultGLPWithChainlinkAutomationPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultGLPWithChainlinkAutomationPriceOracle>;
    getContractAt(
      name: "PlutusVaultRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlutusVaultRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
