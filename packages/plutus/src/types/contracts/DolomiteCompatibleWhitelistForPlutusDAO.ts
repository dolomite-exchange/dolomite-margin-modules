/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface DolomiteCompatibleWhitelistForPlutusDAOInterface
  extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "DOLOMITE_PLV_GLP_WRAPPER()": FunctionFragment;
    "PLUTUS_WHITELIST()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "ownerSetPlvGlpUnwrapperTrader(address)": FunctionFragment;
    "ownerSetPlvGlpWrapperTrader(address)": FunctionFragment;
    "plvGlpUnwrapperTrader()": FunctionFragment;
    "plvGlpWrapperTrader()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "DOLOMITE_PLV_GLP_WRAPPER"
      | "PLUTUS_WHITELIST"
      | "isWhitelisted"
      | "ownerSetPlvGlpUnwrapperTrader"
      | "ownerSetPlvGlpWrapperTrader"
      | "plvGlpUnwrapperTrader"
      | "plvGlpWrapperTrader"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLOMITE_PLV_GLP_WRAPPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLUTUS_WHITELIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPlvGlpUnwrapperTrader",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPlvGlpWrapperTrader",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "plvGlpUnwrapperTrader",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "plvGlpWrapperTrader",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLOMITE_PLV_GLP_WRAPPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLUTUS_WHITELIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPlvGlpUnwrapperTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPlvGlpWrapperTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "plvGlpUnwrapperTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "plvGlpWrapperTrader",
    data: BytesLike
  ): Result;

  events: {
    "PlvGlpUnwrapperTraderSet(address)": EventFragment;
    "PlvGlpWrapperTraderSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PlvGlpUnwrapperTraderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlvGlpWrapperTraderSet"): EventFragment;
}

export interface PlvGlpUnwrapperTraderSetEventObject {
  plvGlpUnwrapperTrader: string;
}
export type PlvGlpUnwrapperTraderSetEvent = TypedEvent<
  [string],
  PlvGlpUnwrapperTraderSetEventObject
>;

export type PlvGlpUnwrapperTraderSetEventFilter =
  TypedEventFilter<PlvGlpUnwrapperTraderSetEvent>;

export interface PlvGlpWrapperTraderSetEventObject {
  plvGlpWrapperTrader: string;
}
export type PlvGlpWrapperTraderSetEvent = TypedEvent<
  [string],
  PlvGlpWrapperTraderSetEventObject
>;

export type PlvGlpWrapperTraderSetEventFilter =
  TypedEventFilter<PlvGlpWrapperTraderSetEvent>;

export interface DolomiteCompatibleWhitelistForPlutusDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DolomiteCompatibleWhitelistForPlutusDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_PLV_GLP_WRAPPER(overrides?: CallOverrides): Promise<[string]>;

    PLUTUS_WHITELIST(overrides?: CallOverrides): Promise<[string]>;

    isWhitelisted(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerSetPlvGlpUnwrapperTrader(
      _plvGlpUnwrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetPlvGlpWrapperTrader(
      _plvGlpWrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    plvGlpUnwrapperTrader(overrides?: CallOverrides): Promise<[string]>;

    plvGlpWrapperTrader(overrides?: CallOverrides): Promise<[string]>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_PLV_GLP_WRAPPER(overrides?: CallOverrides): Promise<string>;

  PLUTUS_WHITELIST(overrides?: CallOverrides): Promise<string>;

  isWhitelisted(_caller: string, overrides?: CallOverrides): Promise<boolean>;

  ownerSetPlvGlpUnwrapperTrader(
    _plvGlpUnwrapperTrader: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetPlvGlpWrapperTrader(
    _plvGlpWrapperTrader: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  plvGlpUnwrapperTrader(overrides?: CallOverrides): Promise<string>;

  plvGlpWrapperTrader(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_PLV_GLP_WRAPPER(overrides?: CallOverrides): Promise<string>;

    PLUTUS_WHITELIST(overrides?: CallOverrides): Promise<string>;

    isWhitelisted(_caller: string, overrides?: CallOverrides): Promise<boolean>;

    ownerSetPlvGlpUnwrapperTrader(
      _plvGlpUnwrapperTrader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetPlvGlpWrapperTrader(
      _plvGlpWrapperTrader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    plvGlpUnwrapperTrader(overrides?: CallOverrides): Promise<string>;

    plvGlpWrapperTrader(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PlvGlpUnwrapperTraderSet(address)"(
      plvGlpUnwrapperTrader?: string | null
    ): PlvGlpUnwrapperTraderSetEventFilter;
    PlvGlpUnwrapperTraderSet(
      plvGlpUnwrapperTrader?: string | null
    ): PlvGlpUnwrapperTraderSetEventFilter;

    "PlvGlpWrapperTraderSet(address)"(
      plvGlpWrapperTrader?: string | null
    ): PlvGlpWrapperTraderSetEventFilter;
    PlvGlpWrapperTraderSet(
      plvGlpWrapperTrader?: string | null
    ): PlvGlpWrapperTraderSetEventFilter;
  };

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_PLV_GLP_WRAPPER(overrides?: CallOverrides): Promise<BigNumber>;

    PLUTUS_WHITELIST(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerSetPlvGlpUnwrapperTrader(
      _plvGlpUnwrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetPlvGlpWrapperTrader(
      _plvGlpWrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    plvGlpUnwrapperTrader(overrides?: CallOverrides): Promise<BigNumber>;

    plvGlpWrapperTrader(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOLOMITE_PLV_GLP_WRAPPER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PLUTUS_WHITELIST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetPlvGlpUnwrapperTrader(
      _plvGlpUnwrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetPlvGlpWrapperTrader(
      _plvGlpWrapperTrader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    plvGlpUnwrapperTrader(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    plvGlpWrapperTrader(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
