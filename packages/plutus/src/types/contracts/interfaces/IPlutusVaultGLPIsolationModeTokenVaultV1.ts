/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IPlutusVaultGLPIsolationModeTokenVaultV1Interface
  extends utils.Interface {
  functions: {
    "harvest()": FunctionFragment;
    "pls()": FunctionFragment;
    "plvGlpFarm()": FunctionFragment;
    "registry()": FunctionFragment;
    "stakePlvGlp(uint256)": FunctionFragment;
    "unstakePlvGlp(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "harvest"
      | "pls"
      | "plvGlpFarm"
      | "registry"
      | "stakePlvGlp"
      | "unstakePlvGlp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "pls", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "plvGlpFarm",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakePlvGlp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakePlvGlp",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plvGlpFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakePlvGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakePlvGlp",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPlutusVaultGLPIsolationModeTokenVaultV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPlutusVaultGLPIsolationModeTokenVaultV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    harvest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pls(overrides?: CallOverrides): Promise<[string]>;

    plvGlpFarm(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    stakePlvGlp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakePlvGlp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  harvest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pls(overrides?: CallOverrides): Promise<string>;

  plvGlpFarm(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  stakePlvGlp(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakePlvGlp(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    harvest(overrides?: CallOverrides): Promise<void>;

    pls(overrides?: CallOverrides): Promise<string>;

    plvGlpFarm(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    stakePlvGlp(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakePlvGlp(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    harvest(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    pls(overrides?: CallOverrides): Promise<BigNumber>;

    plvGlpFarm(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    stakePlvGlp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakePlvGlp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    harvest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plvGlpFarm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakePlvGlp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakePlvGlp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
