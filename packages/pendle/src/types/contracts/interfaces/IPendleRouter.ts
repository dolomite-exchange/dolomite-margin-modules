/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IPendleRouter {
  export type SwapDataStruct = {
    swapType: BigNumberish;
    extRouter: string;
    extCalldata: BytesLike;
    needScale: boolean;
  };

  export type SwapDataStructOutput = [number, string, string, boolean] & {
    swapType: number;
    extRouter: string;
    extCalldata: string;
    needScale: boolean;
  };

  export type TokenOutputStruct = {
    tokenOut: string;
    minTokenOut: BigNumberish;
    tokenRedeemSy: string;
    bulk: string;
    pendleSwap: string;
    swapData: IPendleRouter.SwapDataStruct;
  };

  export type TokenOutputStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    IPendleRouter.SwapDataStructOutput
  ] & {
    tokenOut: string;
    minTokenOut: BigNumber;
    tokenRedeemSy: string;
    bulk: string;
    pendleSwap: string;
    swapData: IPendleRouter.SwapDataStructOutput;
  };

  export type ApproxParamsStruct = {
    guessMin: BigNumberish;
    guessMax: BigNumberish;
    guessOffchain: BigNumberish;
    maxIteration: BigNumberish;
    eps: BigNumberish;
  };

  export type ApproxParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    guessMin: BigNumber;
    guessMax: BigNumber;
    guessOffchain: BigNumber;
    maxIteration: BigNumber;
    eps: BigNumber;
  };

  export type TokenInputStruct = {
    tokenIn: string;
    netTokenIn: BigNumberish;
    tokenMintSy: string;
    bulk: string;
    pendleSwap: string;
    swapData: IPendleRouter.SwapDataStruct;
  };

  export type TokenInputStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    IPendleRouter.SwapDataStructOutput
  ] & {
    tokenIn: string;
    netTokenIn: BigNumber;
    tokenMintSy: string;
    bulk: string;
    pendleSwap: string;
    swapData: IPendleRouter.SwapDataStructOutput;
  };
}

export interface IPendleRouterInterface extends utils.Interface {
  functions: {
    "mintPyFromSy(address,address,uint256,uint256)": FunctionFragment;
    "swapExactPtForToken(address,address,uint256,(address,uint256,address,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
    "swapExactTokenForPt(address,address,uint256,(uint256,uint256,uint256,uint256,uint256),(address,uint256,address,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
    "swapExactTokenForYt(address,address,uint256,(uint256,uint256,uint256,uint256,uint256),(address,uint256,address,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
    "swapExactYtForToken(address,address,uint256,(address,uint256,address,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "mintPyFromSy"
      | "swapExactPtForToken"
      | "swapExactTokenForPt"
      | "swapExactTokenForYt"
      | "swapExactYtForToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mintPyFromSy",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForToken",
    values: [string, string, BigNumberish, IPendleRouter.TokenOutputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPt",
    values: [
      string,
      string,
      BigNumberish,
      IPendleRouter.ApproxParamsStruct,
      IPendleRouter.TokenInputStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForYt",
    values: [
      string,
      string,
      BigNumberish,
      IPendleRouter.ApproxParamsStruct,
      IPendleRouter.TokenInputStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForToken",
    values: [string, string, BigNumberish, IPendleRouter.TokenOutputStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "mintPyFromSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPendleRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPendleRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mintPyFromSy(
      receiver: string,
      YT: string,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactPtForToken(
      receiver: string,
      market: string,
      exactPtIn: BigNumberish,
      output: IPendleRouter.TokenOutputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactTokenForPt(
      receiver: string,
      market: string,
      minPtOut: BigNumberish,
      guessPtOut: IPendleRouter.ApproxParamsStruct,
      input: IPendleRouter.TokenInputStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactTokenForYt(
      receiver: string,
      market: string,
      minYtOut: BigNumberish,
      guessYtOut: IPendleRouter.ApproxParamsStruct,
      input: IPendleRouter.TokenInputStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactYtForToken(
      receiver: string,
      market: string,
      netYtIn: BigNumberish,
      output: IPendleRouter.TokenOutputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  mintPyFromSy(
    receiver: string,
    YT: string,
    netSyIn: BigNumberish,
    minPyOut: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactPtForToken(
    receiver: string,
    market: string,
    exactPtIn: BigNumberish,
    output: IPendleRouter.TokenOutputStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactTokenForPt(
    receiver: string,
    market: string,
    minPtOut: BigNumberish,
    guessPtOut: IPendleRouter.ApproxParamsStruct,
    input: IPendleRouter.TokenInputStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactTokenForYt(
    receiver: string,
    market: string,
    minYtOut: BigNumberish,
    guessYtOut: IPendleRouter.ApproxParamsStruct,
    input: IPendleRouter.TokenInputStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactYtForToken(
    receiver: string,
    market: string,
    netYtIn: BigNumberish,
    output: IPendleRouter.TokenOutputStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    mintPyFromSy(
      receiver: string,
      YT: string,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactPtForToken(
      receiver: string,
      market: string,
      exactPtIn: BigNumberish,
      output: IPendleRouter.TokenOutputStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netTokenOut: BigNumber; netSyFee: BigNumber }
    >;

    swapExactTokenForPt(
      receiver: string,
      market: string,
      minPtOut: BigNumberish,
      guessPtOut: IPendleRouter.ApproxParamsStruct,
      input: IPendleRouter.TokenInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netPtOut: BigNumber; netSyFee: BigNumber }
    >;

    swapExactTokenForYt(
      receiver: string,
      market: string,
      minYtOut: BigNumberish,
      guessYtOut: IPendleRouter.ApproxParamsStruct,
      input: IPendleRouter.TokenInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netYtOut: BigNumber; netSyFee: BigNumber }
    >;

    swapExactYtForToken(
      receiver: string,
      market: string,
      netYtIn: BigNumberish,
      output: IPendleRouter.TokenOutputStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netTokenOut: BigNumber; netSyFee: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    mintPyFromSy(
      receiver: string,
      YT: string,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactPtForToken(
      receiver: string,
      market: string,
      exactPtIn: BigNumberish,
      output: IPendleRouter.TokenOutputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactTokenForPt(
      receiver: string,
      market: string,
      minPtOut: BigNumberish,
      guessPtOut: IPendleRouter.ApproxParamsStruct,
      input: IPendleRouter.TokenInputStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactTokenForYt(
      receiver: string,
      market: string,
      minYtOut: BigNumberish,
      guessYtOut: IPendleRouter.ApproxParamsStruct,
      input: IPendleRouter.TokenInputStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactYtForToken(
      receiver: string,
      market: string,
      netYtIn: BigNumberish,
      output: IPendleRouter.TokenOutputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mintPyFromSy(
      receiver: string,
      YT: string,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactPtForToken(
      receiver: string,
      market: string,
      exactPtIn: BigNumberish,
      output: IPendleRouter.TokenOutputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactTokenForPt(
      receiver: string,
      market: string,
      minPtOut: BigNumberish,
      guessPtOut: IPendleRouter.ApproxParamsStruct,
      input: IPendleRouter.TokenInputStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactTokenForYt(
      receiver: string,
      market: string,
      minYtOut: BigNumberish,
      guessYtOut: IPendleRouter.ApproxParamsStruct,
      input: IPendleRouter.TokenInputStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactYtForToken(
      receiver: string,
      market: string,
      netYtIn: BigNumberish,
      output: IPendleRouter.TokenOutputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
