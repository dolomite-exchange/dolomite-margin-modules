/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IPendleRegistryInterface extends utils.Interface {
  functions: {
    "dolomiteRegistry()": FunctionFragment;
    "ownerSetDolomiteRegistry(address)": FunctionFragment;
    "ownerSetPendleRouter(address)": FunctionFragment;
    "ownerSetPtMarket(address)": FunctionFragment;
    "ownerSetPtOracle(address)": FunctionFragment;
    "ownerSetSyToken(address)": FunctionFragment;
    "pendleRouter()": FunctionFragment;
    "ptMarket()": FunctionFragment;
    "ptOracle()": FunctionFragment;
    "syToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dolomiteRegistry"
      | "ownerSetDolomiteRegistry"
      | "ownerSetPendleRouter"
      | "ownerSetPtMarket"
      | "ownerSetPtOracle"
      | "ownerSetSyToken"
      | "pendleRouter"
      | "ptMarket"
      | "ptOracle"
      | "syToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "dolomiteRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetDolomiteRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPendleRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPtMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPtOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetSyToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendleRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ptMarket", values?: undefined): string;
  encodeFunctionData(functionFragment: "ptOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "syToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "dolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetDolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPendleRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPtMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPtOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetSyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendleRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ptMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ptOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "syToken", data: BytesLike): Result;

  events: {
    "DolomiteRegistrySet(address)": EventFragment;
    "PendleRouterSet(address)": EventFragment;
    "PtMarketSet(address)": EventFragment;
    "PtOracleSet(address)": EventFragment;
    "SyTokenSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DolomiteRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendleRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PtMarketSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PtOracleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SyTokenSet"): EventFragment;
}

export interface DolomiteRegistrySetEventObject {
  _dolomiteRegistry: string;
}
export type DolomiteRegistrySetEvent = TypedEvent<
  [string],
  DolomiteRegistrySetEventObject
>;

export type DolomiteRegistrySetEventFilter =
  TypedEventFilter<DolomiteRegistrySetEvent>;

export interface PendleRouterSetEventObject {
  _pendleRouter: string;
}
export type PendleRouterSetEvent = TypedEvent<
  [string],
  PendleRouterSetEventObject
>;

export type PendleRouterSetEventFilter = TypedEventFilter<PendleRouterSetEvent>;

export interface PtMarketSetEventObject {
  _ptMarket: string;
}
export type PtMarketSetEvent = TypedEvent<[string], PtMarketSetEventObject>;

export type PtMarketSetEventFilter = TypedEventFilter<PtMarketSetEvent>;

export interface PtOracleSetEventObject {
  _ptOracle: string;
}
export type PtOracleSetEvent = TypedEvent<[string], PtOracleSetEventObject>;

export type PtOracleSetEventFilter = TypedEventFilter<PtOracleSetEvent>;

export interface SyTokenSetEventObject {
  _syToken: string;
}
export type SyTokenSetEvent = TypedEvent<[string], SyTokenSetEventObject>;

export type SyTokenSetEventFilter = TypedEventFilter<SyTokenSetEvent>;

export interface IPendleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPendleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dolomiteRegistry(overrides?: CallOverrides): Promise<[string]>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetPendleRouter(
      _pendleRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetPtMarket(
      _ptMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetPtOracle(
      _ptOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetSyToken(
      _syToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pendleRouter(overrides?: CallOverrides): Promise<[string]>;

    ptMarket(overrides?: CallOverrides): Promise<[string]>;

    ptOracle(overrides?: CallOverrides): Promise<[string]>;

    syToken(overrides?: CallOverrides): Promise<[string]>;
  };

  dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

  ownerSetDolomiteRegistry(
    _dolomiteRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetPendleRouter(
    _pendleRouter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetPtMarket(
    _ptMarket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetPtOracle(
    _ptOracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetSyToken(
    _syToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pendleRouter(overrides?: CallOverrides): Promise<string>;

  ptMarket(overrides?: CallOverrides): Promise<string>;

  ptOracle(overrides?: CallOverrides): Promise<string>;

  syToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetPendleRouter(
      _pendleRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetPtMarket(
      _ptMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetPtOracle(
      _ptOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetSyToken(_syToken: string, overrides?: CallOverrides): Promise<void>;

    pendleRouter(overrides?: CallOverrides): Promise<string>;

    ptMarket(overrides?: CallOverrides): Promise<string>;

    ptOracle(overrides?: CallOverrides): Promise<string>;

    syToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DolomiteRegistrySet(address)"(
      _dolomiteRegistry?: string | null
    ): DolomiteRegistrySetEventFilter;
    DolomiteRegistrySet(
      _dolomiteRegistry?: string | null
    ): DolomiteRegistrySetEventFilter;

    "PendleRouterSet(address)"(
      _pendleRouter?: string | null
    ): PendleRouterSetEventFilter;
    PendleRouterSet(_pendleRouter?: string | null): PendleRouterSetEventFilter;

    "PtMarketSet(address)"(_ptMarket?: string | null): PtMarketSetEventFilter;
    PtMarketSet(_ptMarket?: string | null): PtMarketSetEventFilter;

    "PtOracleSet(address)"(_ptOracle?: string | null): PtOracleSetEventFilter;
    PtOracleSet(_ptOracle?: string | null): PtOracleSetEventFilter;

    "SyTokenSet(address)"(_syToken?: string | null): SyTokenSetEventFilter;
    SyTokenSet(_syToken?: string | null): SyTokenSetEventFilter;
  };

  estimateGas: {
    dolomiteRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetPendleRouter(
      _pendleRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetPtMarket(
      _ptMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetPtOracle(
      _ptOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetSyToken(
      _syToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pendleRouter(overrides?: CallOverrides): Promise<BigNumber>;

    ptMarket(overrides?: CallOverrides): Promise<BigNumber>;

    ptOracle(overrides?: CallOverrides): Promise<BigNumber>;

    syToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dolomiteRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetPendleRouter(
      _pendleRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetPtMarket(
      _ptMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetPtOracle(
      _ptOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetSyToken(
      _syToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pendleRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ptMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ptOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
