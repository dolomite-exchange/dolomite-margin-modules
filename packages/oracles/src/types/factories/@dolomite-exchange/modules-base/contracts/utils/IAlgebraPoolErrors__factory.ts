/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAlgebraPoolErrors,
  IAlgebraPoolErrorsInterface,
} from "../../../../../@dolomite-exchange/modules-base/contracts/utils/IAlgebraPoolErrors";

const _abi = [
  {
    inputs: [],
    name: "alreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "arithmeticError",
    type: "error",
  },
  {
    inputs: [],
    name: "bottomTickLowerThanMIN",
    type: "error",
  },
  {
    inputs: [],
    name: "dynamicFeeActive",
    type: "error",
  },
  {
    inputs: [],
    name: "dynamicFeeDisabled",
    type: "error",
  },
  {
    inputs: [],
    name: "flashInsufficientPaid0",
    type: "error",
  },
  {
    inputs: [],
    name: "flashInsufficientPaid1",
    type: "error",
  },
  {
    inputs: [],
    name: "insufficientInputAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "invalidAmountRequired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "expectedSelector",
        type: "bytes4",
      },
    ],
    name: "invalidHookResponse",
    type: "error",
  },
  {
    inputs: [],
    name: "invalidLimitSqrtPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "invalidNewCommunityFee",
    type: "error",
  },
  {
    inputs: [],
    name: "invalidNewTickSpacing",
    type: "error",
  },
  {
    inputs: [],
    name: "liquidityAdd",
    type: "error",
  },
  {
    inputs: [],
    name: "liquidityOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "liquiditySub",
    type: "error",
  },
  {
    inputs: [],
    name: "locked",
    type: "error",
  },
  {
    inputs: [],
    name: "notAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "notInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "pluginIsNotConnected",
    type: "error",
  },
  {
    inputs: [],
    name: "priceOutOfRange",
    type: "error",
  },
  {
    inputs: [],
    name: "tickInvalidLinks",
    type: "error",
  },
  {
    inputs: [],
    name: "tickIsNotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "tickIsNotSpaced",
    type: "error",
  },
  {
    inputs: [],
    name: "tickOutOfRange",
    type: "error",
  },
  {
    inputs: [],
    name: "topTickAboveMAX",
    type: "error",
  },
  {
    inputs: [],
    name: "topTickLowerOrEqBottomTick",
    type: "error",
  },
  {
    inputs: [],
    name: "transferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "zeroAmountRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "zeroLiquidityActual",
    type: "error",
  },
  {
    inputs: [],
    name: "zeroLiquidityDesired",
    type: "error",
  },
] as const;

export class IAlgebraPoolErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IAlgebraPoolErrorsInterface {
    return new utils.Interface(_abi) as IAlgebraPoolErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAlgebraPoolErrors {
    return new Contract(address, _abi, signerOrProvider) as IAlgebraPoolErrors;
  }
}
