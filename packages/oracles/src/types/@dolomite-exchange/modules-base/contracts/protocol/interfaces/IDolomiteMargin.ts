/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type ParStruct = { sign: boolean; value: BigNumberish };

  export type ParStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type WeiStruct = { sign: boolean; value: BigNumberish };

  export type WeiStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type MonetaryValueStruct = { value: BigNumberish };

  export type MonetaryValueStructOutput = [BigNumber] & { value: BigNumber };

  export type DecimalStruct = { value: BigNumberish };

  export type DecimalStructOutput = [BigNumber] & { value: BigNumber };

  export type TotalParStruct = { borrow: BigNumberish; supply: BigNumberish };

  export type TotalParStructOutput = [BigNumber, BigNumber] & {
    borrow: BigNumber;
    supply: BigNumber;
  };

  export type InterestIndexStruct = {
    borrow: BigNumberish;
    supply: BigNumberish;
    lastUpdate: BigNumberish;
  };

  export type InterestIndexStructOutput = [BigNumber, BigNumber, number] & {
    borrow: BigNumber;
    supply: BigNumber;
    lastUpdate: number;
  };

  export type MarketStruct = {
    token: string;
    isClosing: boolean;
    isRecyclable: boolean;
    totalPar: IDolomiteStructs.TotalParStruct;
    index: IDolomiteStructs.InterestIndexStruct;
    priceOracle: string;
    interestSetter: string;
    marginPremium: IDolomiteStructs.DecimalStruct;
    spreadPremium: IDolomiteStructs.DecimalStruct;
    maxWei: IDolomiteStructs.WeiStruct;
  };

  export type MarketStructOutput = [
    string,
    boolean,
    boolean,
    IDolomiteStructs.TotalParStructOutput,
    IDolomiteStructs.InterestIndexStructOutput,
    string,
    string,
    IDolomiteStructs.DecimalStructOutput,
    IDolomiteStructs.DecimalStructOutput,
    IDolomiteStructs.WeiStructOutput
  ] & {
    token: string;
    isClosing: boolean;
    isRecyclable: boolean;
    totalPar: IDolomiteStructs.TotalParStructOutput;
    index: IDolomiteStructs.InterestIndexStructOutput;
    priceOracle: string;
    interestSetter: string;
    marginPremium: IDolomiteStructs.DecimalStructOutput;
    spreadPremium: IDolomiteStructs.DecimalStructOutput;
    maxWei: IDolomiteStructs.WeiStructOutput;
  };

  export type MonetaryPriceStruct = { value: BigNumberish };

  export type MonetaryPriceStructOutput = [BigNumber] & { value: BigNumber };

  export type RiskLimitsStruct = {
    marginRatioMax: BigNumberish;
    liquidationSpreadMax: BigNumberish;
    earningsRateMax: BigNumberish;
    marginPremiumMax: BigNumberish;
    spreadPremiumMax: BigNumberish;
    minBorrowedValueMax: BigNumberish;
  };

  export type RiskLimitsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marginRatioMax: BigNumber;
    liquidationSpreadMax: BigNumber;
    earningsRateMax: BigNumber;
    marginPremiumMax: BigNumber;
    spreadPremiumMax: BigNumber;
    minBorrowedValueMax: BigNumber;
  };

  export type RiskParamsStruct = {
    marginRatio: IDolomiteStructs.DecimalStruct;
    liquidationSpread: IDolomiteStructs.DecimalStruct;
    earningsRate: IDolomiteStructs.DecimalStruct;
    minBorrowedValue: IDolomiteStructs.MonetaryValueStruct;
    accountMaxNumberOfMarketsWithBalances: BigNumberish;
  };

  export type RiskParamsStructOutput = [
    IDolomiteStructs.DecimalStructOutput,
    IDolomiteStructs.DecimalStructOutput,
    IDolomiteStructs.DecimalStructOutput,
    IDolomiteStructs.MonetaryValueStructOutput,
    BigNumber
  ] & {
    marginRatio: IDolomiteStructs.DecimalStructOutput;
    liquidationSpread: IDolomiteStructs.DecimalStructOutput;
    earningsRate: IDolomiteStructs.DecimalStructOutput;
    minBorrowedValue: IDolomiteStructs.MonetaryValueStructOutput;
    accountMaxNumberOfMarketsWithBalances: BigNumber;
  };

  export type AssetAmountStruct = {
    sign: boolean;
    denomination: BigNumberish;
    ref: BigNumberish;
    value: BigNumberish;
  };

  export type AssetAmountStructOutput = [boolean, number, number, BigNumber] & {
    sign: boolean;
    denomination: number;
    ref: number;
    value: BigNumber;
  };

  export type ActionArgsStruct = {
    actionType: BigNumberish;
    accountId: BigNumberish;
    amount: IDolomiteStructs.AssetAmountStruct;
    primaryMarketId: BigNumberish;
    secondaryMarketId: BigNumberish;
    otherAddress: string;
    otherAccountId: BigNumberish;
    data: BytesLike;
  };

  export type ActionArgsStructOutput = [
    number,
    BigNumber,
    IDolomiteStructs.AssetAmountStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    actionType: number;
    accountId: BigNumber;
    amount: IDolomiteStructs.AssetAmountStructOutput;
    primaryMarketId: BigNumber;
    secondaryMarketId: BigNumber;
    otherAddress: string;
    otherAccountId: BigNumber;
    data: string;
  };

  export type OperatorArgStruct = { operator: string; trusted: boolean };

  export type OperatorArgStructOutput = [string, boolean] & {
    operator: string;
    trusted: boolean;
  };
}

export declare namespace IDolomiteInterestSetter {
  export type InterestRateStruct = { value: BigNumberish };

  export type InterestRateStructOutput = [BigNumber] & { value: BigNumber };
}

export interface IDolomiteMarginInterface extends utils.Interface {
  functions: {
    "getAccountBalances((address,uint256))": FunctionFragment;
    "getAccountMarketWithBalanceAtIndex((address,uint256),uint256)": FunctionFragment;
    "getAccountMarketsWithBalances((address,uint256))": FunctionFragment;
    "getAccountNumberOfMarketsWithBalances((address,uint256))": FunctionFragment;
    "getAccountNumberOfMarketsWithDebt((address,uint256))": FunctionFragment;
    "getAccountPar((address,uint256),uint256)": FunctionFragment;
    "getAccountParNoMarketCheck((address,uint256),uint256)": FunctionFragment;
    "getAccountStatus((address,uint256))": FunctionFragment;
    "getAccountValues((address,uint256))": FunctionFragment;
    "getAccountWei((address,uint256),uint256)": FunctionFragment;
    "getAdjustedAccountValues((address,uint256))": FunctionFragment;
    "getEarningsRate()": FunctionFragment;
    "getIsAutoTraderSpecial(address)": FunctionFragment;
    "getIsGlobalOperator(address)": FunctionFragment;
    "getIsLocalOperator(address,address)": FunctionFragment;
    "getLiquidationSpread()": FunctionFragment;
    "getLiquidationSpreadForPair(uint256,uint256)": FunctionFragment;
    "getMarginRatio()": FunctionFragment;
    "getMarket(uint256)": FunctionFragment;
    "getMarketCachedIndex(uint256)": FunctionFragment;
    "getMarketCurrentIndex(uint256)": FunctionFragment;
    "getMarketIdByTokenAddress(address)": FunctionFragment;
    "getMarketInterestRate(uint256)": FunctionFragment;
    "getMarketInterestSetter(uint256)": FunctionFragment;
    "getMarketIsClosing(uint256)": FunctionFragment;
    "getMarketIsRecyclable(uint256)": FunctionFragment;
    "getMarketMarginPremium(uint256)": FunctionFragment;
    "getMarketMaxWei(uint256)": FunctionFragment;
    "getMarketPrice(uint256)": FunctionFragment;
    "getMarketPriceOracle(uint256)": FunctionFragment;
    "getMarketSpreadPremium(uint256)": FunctionFragment;
    "getMarketTokenAddress(uint256)": FunctionFragment;
    "getMarketTotalPar(uint256)": FunctionFragment;
    "getMarketWithInfo(uint256)": FunctionFragment;
    "getMinBorrowedValue()": FunctionFragment;
    "getNumExcessTokens(uint256)": FunctionFragment;
    "getNumMarkets()": FunctionFragment;
    "getRecyclableMarkets(uint256)": FunctionFragment;
    "getRiskLimits()": FunctionFragment;
    "getRiskParams()": FunctionFragment;
    "operate((address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerAddMarket(address,address,address,(uint256),(uint256),uint256,bool,bool)": FunctionFragment;
    "ownerRemoveMarkets(uint256[],address)": FunctionFragment;
    "ownerSetAccountMaxNumberOfMarketsWithBalances(uint256)": FunctionFragment;
    "ownerSetAutoTraderSpecial(address,bool)": FunctionFragment;
    "ownerSetEarningsRate((uint256))": FunctionFragment;
    "ownerSetGlobalOperator(address,bool)": FunctionFragment;
    "ownerSetInterestSetter(uint256,address)": FunctionFragment;
    "ownerSetIsClosing(uint256,bool)": FunctionFragment;
    "ownerSetLiquidationSpread((uint256))": FunctionFragment;
    "ownerSetMarginPremium(uint256,(uint256))": FunctionFragment;
    "ownerSetMarginRatio((uint256))": FunctionFragment;
    "ownerSetMaxWei(uint256,uint256)": FunctionFragment;
    "ownerSetMinBorrowedValue((uint256))": FunctionFragment;
    "ownerSetPriceOracle(uint256,address)": FunctionFragment;
    "ownerSetSpreadPremium(uint256,(uint256))": FunctionFragment;
    "ownerWithdrawExcessTokens(uint256,address)": FunctionFragment;
    "ownerWithdrawUnsupportedTokens(address,address)": FunctionFragment;
    "setOperators((address,bool)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountBalances"
      | "getAccountMarketWithBalanceAtIndex"
      | "getAccountMarketsWithBalances"
      | "getAccountNumberOfMarketsWithBalances"
      | "getAccountNumberOfMarketsWithDebt"
      | "getAccountPar"
      | "getAccountParNoMarketCheck"
      | "getAccountStatus"
      | "getAccountValues"
      | "getAccountWei"
      | "getAdjustedAccountValues"
      | "getEarningsRate"
      | "getIsAutoTraderSpecial"
      | "getIsGlobalOperator"
      | "getIsLocalOperator"
      | "getLiquidationSpread"
      | "getLiquidationSpreadForPair"
      | "getMarginRatio"
      | "getMarket"
      | "getMarketCachedIndex"
      | "getMarketCurrentIndex"
      | "getMarketIdByTokenAddress"
      | "getMarketInterestRate"
      | "getMarketInterestSetter"
      | "getMarketIsClosing"
      | "getMarketIsRecyclable"
      | "getMarketMarginPremium"
      | "getMarketMaxWei"
      | "getMarketPrice"
      | "getMarketPriceOracle"
      | "getMarketSpreadPremium"
      | "getMarketTokenAddress"
      | "getMarketTotalPar"
      | "getMarketWithInfo"
      | "getMinBorrowedValue"
      | "getNumExcessTokens"
      | "getNumMarkets"
      | "getRecyclableMarkets"
      | "getRiskLimits"
      | "getRiskParams"
      | "operate"
      | "owner"
      | "ownerAddMarket"
      | "ownerRemoveMarkets"
      | "ownerSetAccountMaxNumberOfMarketsWithBalances"
      | "ownerSetAutoTraderSpecial"
      | "ownerSetEarningsRate"
      | "ownerSetGlobalOperator"
      | "ownerSetInterestSetter"
      | "ownerSetIsClosing"
      | "ownerSetLiquidationSpread"
      | "ownerSetMarginPremium"
      | "ownerSetMarginRatio"
      | "ownerSetMaxWei"
      | "ownerSetMinBorrowedValue"
      | "ownerSetPriceOracle"
      | "ownerSetSpreadPremium"
      | "ownerWithdrawExcessTokens"
      | "ownerWithdrawUnsupportedTokens"
      | "setOperators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountBalances",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountMarketWithBalanceAtIndex",
    values: [IDolomiteStructs.AccountInfoStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountMarketsWithBalances",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountNumberOfMarketsWithBalances",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountNumberOfMarketsWithDebt",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPar",
    values: [IDolomiteStructs.AccountInfoStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountParNoMarketCheck",
    values: [IDolomiteStructs.AccountInfoStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountStatus",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValues",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountWei",
    values: [IDolomiteStructs.AccountInfoStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdjustedAccountValues",
    values: [IDolomiteStructs.AccountInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarningsRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsAutoTraderSpecial",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsGlobalOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsLocalOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationSpread",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationSpreadForPair",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCachedIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCurrentIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketIdByTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInterestRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInterestSetter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketIsClosing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketIsRecyclable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketMarginPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketMaxWei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPriceOracle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketSpreadPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTokenAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTotalPar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketWithInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBorrowedValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumExcessTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecyclableMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [
      IDolomiteStructs.AccountInfoStruct[],
      IDolomiteStructs.ActionArgsStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerAddMarket",
    values: [
      string,
      string,
      string,
      IDolomiteStructs.DecimalStruct,
      IDolomiteStructs.DecimalStruct,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerRemoveMarkets",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetAccountMaxNumberOfMarketsWithBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetAutoTraderSpecial",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetEarningsRate",
    values: [IDolomiteStructs.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlobalOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetInterestSetter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetIsClosing",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetLiquidationSpread",
    values: [IDolomiteStructs.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMarginPremium",
    values: [BigNumberish, IDolomiteStructs.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMarginRatio",
    values: [IDolomiteStructs.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMaxWei",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMinBorrowedValue",
    values: [IDolomiteStructs.MonetaryValueStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPriceOracle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetSpreadPremium",
    values: [BigNumberish, IDolomiteStructs.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawExcessTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawUnsupportedTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperators",
    values: [IDolomiteStructs.OperatorArgStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountMarketWithBalanceAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountMarketsWithBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountNumberOfMarketsWithBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountNumberOfMarketsWithDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountParNoMarketCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdjustedAccountValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarningsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsAutoTraderSpecial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsGlobalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsLocalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationSpreadForPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCachedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCurrentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketIdByTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInterestSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketIsClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketIsRecyclable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketMarginPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketMaxWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketSpreadPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTotalPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketWithInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBorrowedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumExcessTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecyclableMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerAddMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerRemoveMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetAccountMaxNumberOfMarketsWithBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetAutoTraderSpecial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetEarningsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlobalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetInterestSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetIsClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetLiquidationSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMarginPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMaxWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMinBorrowedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetSpreadPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawExcessTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawUnsupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperators",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDolomiteMargin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDolomiteMarginInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        IDolomiteStructs.ParStructOutput[],
        IDolomiteStructs.WeiStructOutput[]
      ]
    >;

    getAccountMarketWithBalanceAtIndex(
      account: IDolomiteStructs.AccountInfoStruct,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountMarketsWithBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAccountNumberOfMarketsWithBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountNumberOfMarketsWithDebt(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountPar(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.ParStructOutput]>;

    getAccountParNoMarketCheck(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.ParStructOutput]>;

    getAccountStatus(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAccountValues(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryValueStructOutput,
        IDolomiteStructs.MonetaryValueStructOutput
      ]
    >;

    getAccountWei(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.WeiStructOutput]>;

    getAdjustedAccountValues(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryValueStructOutput,
        IDolomiteStructs.MonetaryValueStructOutput
      ]
    >;

    getEarningsRate(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.DecimalStructOutput]>;

    getIsAutoTraderSpecial(
      autoTrader: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.DecimalStructOutput]>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.DecimalStructOutput]>;

    getMarginRatio(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.DecimalStructOutput]>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.MarketStructOutput]>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.InterestIndexStructOutput]>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.InterestIndexStructOutput]>;

    getMarketIdByTokenAddress(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteInterestSetter.InterestRateStructOutput]>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMarketIsRecyclable(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.DecimalStructOutput]>;

    getMarketMaxWei(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.WeiStructOutput]>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.MonetaryPriceStructOutput]>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.DecimalStructOutput]>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.TotalParStructOutput]>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MarketStructOutput,
        IDolomiteStructs.InterestIndexStructOutput,
        IDolomiteStructs.MonetaryPriceStructOutput,
        IDolomiteInterestSetter.InterestRateStructOutput
      ]
    >;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.MonetaryValueStructOutput]>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.WeiStructOutput]>;

    getNumMarkets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRecyclableMarkets(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRiskLimits(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.RiskLimitsStructOutput]>;

    getRiskParams(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.RiskParamsStructOutput]>;

    operate(
      accounts: IDolomiteStructs.AccountInfoStruct[],
      actions: IDolomiteStructs.ActionArgsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: IDolomiteStructs.DecimalStruct,
      spreadPremium: IDolomiteStructs.DecimalStruct,
      maxWei: BigNumberish,
      isClosing: boolean,
      isRecyclable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerRemoveMarkets(
      marketIds: BigNumberish[],
      salvager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetAccountMaxNumberOfMarketsWithBalances(
      accountMaxNumberOfMarketsWithBalances: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetAutoTraderSpecial(
      autoTrader: string,
      special: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetEarningsRate(
      earningsRate: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetLiquidationSpread(
      spread: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetMarginRatio(
      ratio: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetMaxWei(
      marketId: BigNumberish,
      maxWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: IDolomiteStructs.MonetaryValueStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOperators(
      args: IDolomiteStructs.OperatorArgStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getAccountBalances(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      string[],
      IDolomiteStructs.ParStructOutput[],
      IDolomiteStructs.WeiStructOutput[]
    ]
  >;

  getAccountMarketWithBalanceAtIndex(
    account: IDolomiteStructs.AccountInfoStruct,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountMarketsWithBalances(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAccountNumberOfMarketsWithBalances(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountNumberOfMarketsWithDebt(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountPar(
    account: IDolomiteStructs.AccountInfoStruct,
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.ParStructOutput>;

  getAccountParNoMarketCheck(
    account: IDolomiteStructs.AccountInfoStruct,
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.ParStructOutput>;

  getAccountStatus(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  getAccountValues(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.MonetaryValueStructOutput,
      IDolomiteStructs.MonetaryValueStructOutput
    ]
  >;

  getAccountWei(
    account: IDolomiteStructs.AccountInfoStruct,
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.WeiStructOutput>;

  getAdjustedAccountValues(
    account: IDolomiteStructs.AccountInfoStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.MonetaryValueStructOutput,
      IDolomiteStructs.MonetaryValueStructOutput
    ]
  >;

  getEarningsRate(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.DecimalStructOutput>;

  getIsAutoTraderSpecial(
    autoTrader: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsGlobalOperator(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsLocalOperator(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLiquidationSpread(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.DecimalStructOutput>;

  getLiquidationSpreadForPair(
    heldMarketId: BigNumberish,
    owedMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.DecimalStructOutput>;

  getMarginRatio(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.DecimalStructOutput>;

  getMarket(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.MarketStructOutput>;

  getMarketCachedIndex(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.InterestIndexStructOutput>;

  getMarketCurrentIndex(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.InterestIndexStructOutput>;

  getMarketIdByTokenAddress(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketInterestRate(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteInterestSetter.InterestRateStructOutput>;

  getMarketInterestSetter(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketIsClosing(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMarketIsRecyclable(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMarketMarginPremium(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.DecimalStructOutput>;

  getMarketMaxWei(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.WeiStructOutput>;

  getMarketPrice(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.MonetaryPriceStructOutput>;

  getMarketPriceOracle(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketSpreadPremium(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.DecimalStructOutput>;

  getMarketTokenAddress(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketTotalPar(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.TotalParStructOutput>;

  getMarketWithInfo(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.MarketStructOutput,
      IDolomiteStructs.InterestIndexStructOutput,
      IDolomiteStructs.MonetaryPriceStructOutput,
      IDolomiteInterestSetter.InterestRateStructOutput
    ]
  >;

  getMinBorrowedValue(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.MonetaryValueStructOutput>;

  getNumExcessTokens(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.WeiStructOutput>;

  getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

  getRecyclableMarkets(
    n: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRiskLimits(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.RiskLimitsStructOutput>;

  getRiskParams(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.RiskParamsStructOutput>;

  operate(
    accounts: IDolomiteStructs.AccountInfoStruct[],
    actions: IDolomiteStructs.ActionArgsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerAddMarket(
    token: string,
    priceOracle: string,
    interestSetter: string,
    marginPremium: IDolomiteStructs.DecimalStruct,
    spreadPremium: IDolomiteStructs.DecimalStruct,
    maxWei: BigNumberish,
    isClosing: boolean,
    isRecyclable: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerRemoveMarkets(
    marketIds: BigNumberish[],
    salvager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetAccountMaxNumberOfMarketsWithBalances(
    accountMaxNumberOfMarketsWithBalances: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetAutoTraderSpecial(
    autoTrader: string,
    special: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetEarningsRate(
    earningsRate: IDolomiteStructs.DecimalStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlobalOperator(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetInterestSetter(
    marketId: BigNumberish,
    interestSetter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetIsClosing(
    marketId: BigNumberish,
    isClosing: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetLiquidationSpread(
    spread: IDolomiteStructs.DecimalStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetMarginPremium(
    marketId: BigNumberish,
    marginPremium: IDolomiteStructs.DecimalStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetMarginRatio(
    ratio: IDolomiteStructs.DecimalStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetMaxWei(
    marketId: BigNumberish,
    maxWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetMinBorrowedValue(
    minBorrowedValue: IDolomiteStructs.MonetaryValueStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetPriceOracle(
    marketId: BigNumberish,
    priceOracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetSpreadPremium(
    marketId: BigNumberish,
    spreadPremium: IDolomiteStructs.DecimalStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerWithdrawExcessTokens(
    marketId: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerWithdrawUnsupportedTokens(
    token: string,
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOperators(
    args: IDolomiteStructs.OperatorArgStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        IDolomiteStructs.ParStructOutput[],
        IDolomiteStructs.WeiStructOutput[]
      ]
    >;

    getAccountMarketWithBalanceAtIndex(
      account: IDolomiteStructs.AccountInfoStruct,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketsWithBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAccountNumberOfMarketsWithBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNumberOfMarketsWithDebt(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPar(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.ParStructOutput>;

    getAccountParNoMarketCheck(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.ParStructOutput>;

    getAccountStatus(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    getAccountValues(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryValueStructOutput,
        IDolomiteStructs.MonetaryValueStructOutput
      ]
    >;

    getAccountWei(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.WeiStructOutput>;

    getAdjustedAccountValues(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MonetaryValueStructOutput,
        IDolomiteStructs.MonetaryValueStructOutput
      ]
    >;

    getEarningsRate(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.DecimalStructOutput>;

    getIsAutoTraderSpecial(
      autoTrader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.DecimalStructOutput>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.DecimalStructOutput>;

    getMarginRatio(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.DecimalStructOutput>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.MarketStructOutput>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.InterestIndexStructOutput>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.InterestIndexStructOutput>;

    getMarketIdByTokenAddress(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteInterestSetter.InterestRateStructOutput>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMarketIsRecyclable(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.DecimalStructOutput>;

    getMarketMaxWei(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.WeiStructOutput>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.MonetaryPriceStructOutput>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.DecimalStructOutput>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.TotalParStructOutput>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.MarketStructOutput,
        IDolomiteStructs.InterestIndexStructOutput,
        IDolomiteStructs.MonetaryPriceStructOutput,
        IDolomiteInterestSetter.InterestRateStructOutput
      ]
    >;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.MonetaryValueStructOutput>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.WeiStructOutput>;

    getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getRecyclableMarkets(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRiskLimits(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.RiskLimitsStructOutput>;

    getRiskParams(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.RiskParamsStructOutput>;

    operate(
      accounts: IDolomiteStructs.AccountInfoStruct[],
      actions: IDolomiteStructs.ActionArgsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: IDolomiteStructs.DecimalStruct,
      spreadPremium: IDolomiteStructs.DecimalStruct,
      maxWei: BigNumberish,
      isClosing: boolean,
      isRecyclable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerRemoveMarkets(
      marketIds: BigNumberish[],
      salvager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetAccountMaxNumberOfMarketsWithBalances(
      accountMaxNumberOfMarketsWithBalances: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetAutoTraderSpecial(
      autoTrader: string,
      special: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetEarningsRate(
      earningsRate: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetLiquidationSpread(
      spread: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetMarginRatio(
      ratio: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetMaxWei(
      marketId: BigNumberish,
      maxWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: IDolomiteStructs.MonetaryValueStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: IDolomiteStructs.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperators(
      args: IDolomiteStructs.OperatorArgStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAccountBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketWithBalanceAtIndex(
      account: IDolomiteStructs.AccountInfoStruct,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketsWithBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNumberOfMarketsWithBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNumberOfMarketsWithDebt(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPar(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountParNoMarketCheck(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountStatus(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountValues(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountWei(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdjustedAccountValues(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEarningsRate(overrides?: CallOverrides): Promise<BigNumber>;

    getIsAutoTraderSpecial(
      autoTrader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationSpread(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketIdByTokenAddress(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketIsRecyclable(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketMaxWei(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBorrowedValue(overrides?: CallOverrides): Promise<BigNumber>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getRecyclableMarkets(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskLimits(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskParams(overrides?: CallOverrides): Promise<BigNumber>;

    operate(
      accounts: IDolomiteStructs.AccountInfoStruct[],
      actions: IDolomiteStructs.ActionArgsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: IDolomiteStructs.DecimalStruct,
      spreadPremium: IDolomiteStructs.DecimalStruct,
      maxWei: BigNumberish,
      isClosing: boolean,
      isRecyclable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerRemoveMarkets(
      marketIds: BigNumberish[],
      salvager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetAccountMaxNumberOfMarketsWithBalances(
      accountMaxNumberOfMarketsWithBalances: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetAutoTraderSpecial(
      autoTrader: string,
      special: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetEarningsRate(
      earningsRate: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetLiquidationSpread(
      spread: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetMarginRatio(
      ratio: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetMaxWei(
      marketId: BigNumberish,
      maxWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: IDolomiteStructs.MonetaryValueStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOperators(
      args: IDolomiteStructs.OperatorArgStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketWithBalanceAtIndex(
      account: IDolomiteStructs.AccountInfoStruct,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketsWithBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNumberOfMarketsWithBalances(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNumberOfMarketsWithDebt(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountPar(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountParNoMarketCheck(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountStatus(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountValues(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountWei(
      account: IDolomiteStructs.AccountInfoStruct,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdjustedAccountValues(
      account: IDolomiteStructs.AccountInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEarningsRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsAutoTraderSpecial(
      autoTrader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketIdByTokenAddress(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketIsRecyclable(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketMaxWei(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecyclableMarkets(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operate(
      accounts: IDolomiteStructs.AccountInfoStruct[],
      actions: IDolomiteStructs.ActionArgsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: IDolomiteStructs.DecimalStruct,
      spreadPremium: IDolomiteStructs.DecimalStruct,
      maxWei: BigNumberish,
      isClosing: boolean,
      isRecyclable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerRemoveMarkets(
      marketIds: BigNumberish[],
      salvager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetAccountMaxNumberOfMarketsWithBalances(
      accountMaxNumberOfMarketsWithBalances: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetAutoTraderSpecial(
      autoTrader: string,
      special: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetEarningsRate(
      earningsRate: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetLiquidationSpread(
      spread: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetMarginRatio(
      ratio: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetMaxWei(
      marketId: BigNumberish,
      maxWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: IDolomiteStructs.MonetaryValueStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: IDolomiteStructs.DecimalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOperators(
      args: IDolomiteStructs.OperatorArgStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
