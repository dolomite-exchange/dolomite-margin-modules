/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GLPMathLib,
  GLPMathLibInterface,
} from "../../../../@dolomite-exchange/modules-glp/contracts/GLPMathLib";

const _abi = [
  {
    inputs: [],
    name: "BASIS_POINTS_DIVISOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRICE_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a5610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063126082cf14604257806395082d2514605c575b600080fd5b604a61271081565b60405190815260200160405180910390f35b604a6c0c9f2c9cd04674edea400000008156fea26469706673582212200df60f9a22f3c4a1ae6c38ff8d1b100262fd68d984cd56966d2200b676885a3a64736f6c63430008090033";

type GLPMathLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GLPMathLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GLPMathLib__factory extends ContractFactory {
  constructor(...args: GLPMathLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<GLPMathLib> {
    return super.deploy(overrides || {}) as Promise<GLPMathLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GLPMathLib {
    return super.attach(address) as GLPMathLib;
  }
  override connect(signer: Signer): GLPMathLib__factory {
    return super.connect(signer) as GLPMathLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GLPMathLibInterface {
    return new utils.Interface(_abi) as GLPMathLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GLPMathLib {
    return new Contract(address, _abi, signerOrProvider) as GLPMathLib;
  }
}
