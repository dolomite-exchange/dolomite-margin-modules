/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ParaswapAggregatorTrader,
  ParaswapAggregatorTraderInterface,
} from "../../../../contracts/external/traders/ParaswapAggregatorTrader";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_paraswapAugustusRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_paraswapTransferProxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dolomiteMargin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DOLOMITE_MARGIN",
    outputs: [
      {
        internalType: "contract IDolomiteMargin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PARASWAP_AUGUSTUS_ROUTER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PARASWAP_TRANSFER_PROXY",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_inputToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_inputAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_minAmountOutAndOrderData",
        type: "bytes",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getExchangeCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b50604051620015ec380380620015ec83398101604081905262000034916200008c565b6001600160a01b0390811660805291821660a0521660c052620000e4565b60006001600160a01b0382165b92915050565b620000708162000052565b81146200007c57600080fd5b50565b80516200005f8162000065565b600080600060608486031215620000a657620000a6600080fd5b6000620000b486866200007f565b9350506020620000c7868287016200007f565b9250506040620000da868287016200007f565b9150509250925092565b60805160a05160c0516114c6620001266000396000818160ff01526101fb015260008181609801526104e5015260008181605e015261019601526114c66000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806315c14a4a1461005c57806317f5e788146100935780633a8fdd7d146100c75780637d98ebac146100e757806384796caf146100fa575b600080fd5b7f000000000000000000000000000000000000000000000000000000000000000060405161008a9190610bb1565b60405180910390f35b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b60405161008a9190610bd9565b6100da6100d5366004610c6c565b610121565b60405161008a9190610cf6565b6100da6100f5366004610d04565b610186565b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b6000610147772830b930b9bbb0b820b3b3b932b3b0ba37b92a3930b232b960411b610344565b6040516020016101579190610dfd565b60408051601f198184030181529082905262461bcd60e51b825261017d91600401610e73565b60405180910390fd5b6000336101f56001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682147127b7363ca237b637b6b4ba32a6b0b933b4b760711b7f4f6e6c7920446f6c6f6d6974652063616e2063616c6c2066756e6374696f6e00846103df565b610220867f00000000000000000000000000000000000000000000000000000000000000008761042b565b60008061022f85870187610f77565b915091506000818060200190518101906102499190611027565b9050610254816104e0565b6040516370a0823160e01b81526000906001600160a01b038c16906370a0823190610283903090600401610bd9565b60206040518083038186803b15801561029b57600080fd5b505afa1580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d3919061106d565b905061032084821015772830b930b9bbb0b820b3b3b932b3b0ba37b92a3930b232b960411b7f496e73756666696369656e74206f757470757420616d6f756e7400000000000084886105f1565b6103346001600160a01b038c168d8361064f565b9c9b505050505050505050505050565b6060600082604051602001610359919061108e565b60408051601f19818403018152919052905060205b80156103c4578061037e816110b9565b915050818181518110610393576103936110d0565b01602001516001600160f81b031916156103bf5760006103b48260016110e6565b835250909392505050565b61036e565b5060408051600080825260208201909252905b509392505050565b83610425576103ed83610344565b6101d160f51b6103fc84610344565b61080f60f21b61040b85610749565b604051610157959493929190601f60f91b9060200161111e565b50505050565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e9061045c903090879060040161117c565b60206040518083038186803b15801561047457600080fd5b505afa158015610488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ac919061106d565b11156104c7576104c76001600160a01b03841683600061064f565b6104db6001600160a01b038416838361064f565b505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168360405161051b9190611197565b6000604051808303816000865af19150503d8060008114610558576040519150601f19603f3d011682016040523d82523d6000602084013e61055d565b606091505b5091509150816104db576044815110156105a557610595772830b930b9bbb0b820b3b3b932b3b0ba37b92a3930b232b960411b610344565b60405160200161015791906111a3565b6004016105cc772830b930b9bbb0b820b3b3b932b3b0ba37b92a3930b232b960411b610344565b818060200190518101906105e09190611027565b6040516020016101579291906111c8565b84610648576105ff84610344565b6101d160f51b61060e85610344565b61080f60f21b61061d8661088f565b61016160f51b61062c8761088f565b6040516101579796959493929190601f60f91b906020016111eb565b5050505050565b8015806106d75750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610685903090869060040161117c565b60206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d5919061106d565b155b6106f35760405162461bcd60e51b815260040161017d906112bd565b6104db8363095ea7b360e01b84846040516024016107129291906112cd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261099b565b60408051602a80825260608281019093526001600160a01b03841691600091602082018180368337019050509050603060f81b8160008151811061078f5761078f6110d0565b60200101906001600160f81b031916908160001a905350607860f81b816001815181106107be576107be6110d0565b60200101906001600160f81b031916908160001a90535060005b60148110156103d75760006107ee8260026112e8565b90506107fc600f8516610a2d565b83610808836029611307565b81518110610818576108186110d0565b60200101906001600160f81b031916908160001a905350600484901c9350610842600f8516610a2d565b8361084e836028611307565b8151811061085e5761085e6110d0565b60200101906001600160f81b031916908160001a9053505060049290921c91806108878161131e565b9150506107d8565b6060816108b35750506040805180820190915260018152600360fc1b602082015290565b8160005b81156108dd57806108c78161131e565b91506108d69050600a8361134f565b91506108b7565b60008167ffffffffffffffff8111156108f8576108f8610e84565b6040519080825280601f01601f191660200182016040528015610922576020820181803683370190505b508593509050815b8015610992578061093a816110b9565b91506109499050600a85611363565b6109549060306110e6565b60f81b828281518110610969576109696110d0565b60200101906001600160f81b031916908160001a90535061098b600a8561134f565b935061092a565b50949350505050565b60006109f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a579092919063ffffffff16565b9050805160001480610a11575080806020019051810190610a11919061138a565b6104db5760405162461bcd60e51b815260040161017d906113f2565b6000600a821015610a4c57610a436030836110e6565b60f81b92915050565b610a436057836110e6565b6060610a668484600085610a70565b90505b9392505050565b606082471015610a925760405162461bcd60e51b815260040161017d90611445565b600080866001600160a01b03168587604051610aae9190611197565b60006040518083038185875af1925050503d8060008114610aeb576040519150601f19603f3d011682016040523d82523d6000602084013e610af0565b606091505b5091509150610b0187838387610b0e565b925050505b949350505050565b60608315610b4a578251610b43576001600160a01b0385163b610b435760405162461bcd60e51b815260040161017d90611455565b5081610b06565b610b068383815115610b5f5781518083602001fd5b8060405162461bcd60e51b815260040161017d9190610e73565b60006001600160a01b0382165b92915050565b6000610b8682610b79565b6000610b8682610b8c565b610bab81610b97565b82525050565b60208101610b868284610ba2565b60006001600160a01b038216610b86565b610bab81610bbf565b60208101610b868284610bd0565b610bf081610bbf565b8114610bfb57600080fd5b50565b8035610b8681610be7565b80610bf0565b8035610b8681610c09565b60008083601f840112610c2f57610c2f600080fd5b50813567ffffffffffffffff811115610c4a57610c4a600080fd5b602083019150836001820283011115610c6557610c65600080fd5b9250929050565b600080600080600060808688031215610c8757610c87600080fd5b6000610c938888610bfe565b9550506020610ca488828901610bfe565b9450506040610cb588828901610c0f565b935050606086013567ffffffffffffffff811115610cd557610cd5600080fd5b610ce188828901610c1a565b92509250509295509295909350565b80610bab565b60208101610b868284610cf0565b600080600080600080600060c0888a031215610d2257610d22600080fd5b6000610d2e8a8a610bfe565b9750506020610d3f8a828b01610bfe565b9650506040610d508a828b01610bfe565b9550506060610d618a828b01610bfe565b9450506080610d728a828b01610c0f565b93505060a088013567ffffffffffffffff811115610d9257610d92600080fd5b610d9e8a828b01610c1a565b925092505092959891949750929550565b60005b83811015610dca578181015183820152602001610db2565b838111156104255750506000910152565b6000610de5825190565b610df3818560208601610daf565b9290920192915050565b6000610e098284610ddb565b7f3a2067657445786368616e6765436f7374206e6f7420696d706c656d656e74658152601960fa1b6020820152915060218201610a69565b6000610e4b825190565b808452602084019350610e62818560208601610daf565b601f01601f19169290920192915050565b60208082528101610a698184610e41565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610ec057610ec0610e84565b6040525050565b6000610ed260405190565b9050610ede8282610e9a565b919050565b600067ffffffffffffffff821115610efd57610efd610e84565b601f19601f83011660200192915050565b82818337506000910152565b6000610f2d610f2884610ee3565b610ec7565b905082815260208101848484011115610f4857610f48600080fd5b6103d7848285610f0e565b600082601f830112610f6757610f67600080fd5b8135610b06848260208601610f1a565b60008060408385031215610f8d57610f8d600080fd5b6000610f998585610c0f565b925050602083013567ffffffffffffffff811115610fb957610fb9600080fd5b610fc585828601610f53565b9150509250929050565b6000610fdd610f2884610ee3565b905082815260208101848484011115610ff857610ff8600080fd5b6103d7848285610daf565b600082601f83011261101757611017600080fd5b8151610b06848260208601610fcf565b60006020828403121561103c5761103c600080fd5b815167ffffffffffffffff81111561105657611056600080fd5b610b0684828501611003565b8051610b8681610c09565b60006020828403121561108257611082600080fd5b6000610b068484611062565b600061109a8284610cf0565b50602001919050565b634e487b7160e01b600052601160045260246000fd5b6000816110c8576110c86110a3565b506000190190565b634e487b7160e01b600052603260045260246000fd5b600082198211156110f9576110f96110a3565b500190565b6001600160f01b03198116610bab565b6001600160f81b03198116610bab565b600061112a8289610ddb565b915061113682886110fe565b6002820191506111468287610ddb565b915061115282866110fe565b6002820191506111628285610ddb565b915061116e828461110e565b506001019695505050505050565b6040810161118a8285610bd0565b610a696020830184610bd0565b6000610a698284610ddb565b60006111af8284610ddb565b670e881c995d995c9d60c21b8152915060088201610a69565b60006111d48285610ddb565b6101d160f51b81526002019150610b068284610ddb565b60006111f7828b610ddb565b9150611203828a6110fe565b6002820191506112138289610ddb565b915061121f82886110fe565b60028201915061122f8287610ddb565b915061123b82866110fe565b60028201915061124b8285610ddb565b9150611257828461110e565b5060010198975050505050505050565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b602082015291505b5060400190565b60208082528101610b8681611267565b604081016112db8285610bd0565b610a696020830184610cf0565b6000816000190483118215151615611302576113026110a3565b500290565b600082821015611319576113196110a3565b500390565b6000600019821415611332576113326110a3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261135e5761135e611339565b500490565b60008261137257611372611339565b500690565b801515610bf0565b8051610b8681611377565b60006020828403121561139f5761139f600080fd5b6000610b06848461137f565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506112b6565b60208082528101610b86816113ab565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015291506112b6565b60208082528101610b8681611402565b60208082528101610b8681601d81527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060208201526040019056fea26469706673582212209b0aaa056260bb1ebc2eb1fe2c408ba451e79d9f49a1abc6b6ae9561ca10b8d664736f6c63430008090033";

type ParaswapAggregatorTraderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ParaswapAggregatorTraderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ParaswapAggregatorTrader__factory extends ContractFactory {
  constructor(...args: ParaswapAggregatorTraderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _paraswapAugustusRouter: string,
    _paraswapTransferProxy: string,
    _dolomiteMargin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ParaswapAggregatorTrader> {
    return super.deploy(
      _paraswapAugustusRouter,
      _paraswapTransferProxy,
      _dolomiteMargin,
      overrides || {}
    ) as Promise<ParaswapAggregatorTrader>;
  }
  override getDeployTransaction(
    _paraswapAugustusRouter: string,
    _paraswapTransferProxy: string,
    _dolomiteMargin: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _paraswapAugustusRouter,
      _paraswapTransferProxy,
      _dolomiteMargin,
      overrides || {}
    );
  }
  override attach(address: string): ParaswapAggregatorTrader {
    return super.attach(address) as ParaswapAggregatorTrader;
  }
  override connect(signer: Signer): ParaswapAggregatorTrader__factory {
    return super.connect(signer) as ParaswapAggregatorTrader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ParaswapAggregatorTraderInterface {
    return new utils.Interface(_abi) as ParaswapAggregatorTraderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ParaswapAggregatorTrader {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ParaswapAggregatorTrader;
  }
}
