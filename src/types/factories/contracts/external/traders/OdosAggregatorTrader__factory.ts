/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OdosAggregatorTrader,
  OdosAggregatorTraderInterface,
} from "../../../../contracts/external/traders/OdosAggregatorTrader";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_odosRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dolomiteMargin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DOLOMITE_MARGIN",
    outputs: [
      {
        internalType: "contract IDolomiteMargin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ODOS_ROUTER",
    outputs: [
      {
        internalType: "contract IOdosRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_inputToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_inputAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_minAmountOutAndOrderData",
        type: "bytes",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getExchangeCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620014a2380380620014a2833981016040819052620000349162000086565b6001600160a01b039081166080521660a052620000c9565b60006001600160a01b0382165b92915050565b6200006a816200004c565b81146200007657600080fd5b50565b805162000059816200005f565b600080604083850312156200009e576200009e600080fd5b6000620000ac858562000079565b9250506020620000bf8582860162000079565b9150509250929050565b60805160a0516113a0620001026000396000818160ae015281816101b901526102520152600081816053015261015401526113a06000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806315c14a4a146100515780633a8fdd7d1461008957806358722a0a146100a95780637d98ebac146100d0575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b604051610080919061096d565b60405180910390f35b61009c610097366004610a11565b6100e3565b6040516100809190610a9b565b6100737f000000000000000000000000000000000000000000000000000000000000000081565b61009c6100de366004610aa9565b610144565b60006101057327b237b9a0b3b3b932b3b0ba37b92a3930b232b960611b610318565b6040516020016101159190610ba2565b60408051601f198184030181529082905262461bcd60e51b825261013b91600401610c18565b60405180910390fd5b6000336101b36001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682147127b7363ca237b637b6b4ba32a6b0b933b4b760711b7f4f6e6c7920446f6c6f6d6974652063616e2063616c6c2066756e6374696f6e00846103b3565b6101de867f0000000000000000000000000000000000000000000000000000000000000000876103ff565b6000806101ed85870187610d1c565b9150915060008060008060008580602001905181019061020d9190610ea7565b935093509350935061022884602001518d86608001516104b4565b608085015260a08401879052602084018c9052604051630ed8d73960e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633b635ce49061028d908790879087908790600401610fc1565b602060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102df9190611009565b945050505050828110156102f5576102f561102a565b6103096001600160a01b038b168c8361051b565b9b9a5050505050505050505050565b606060008260405160200161032d9190611040565b60408051601f19818403018152919052905060205b801561039857806103528161106b565b91505081818151811061036757610367611082565b01602001516001600160f81b03191615610393576000610388826001611098565b835250909392505050565b610342565b5060408051600080825260208201909252905b509392505050565b836103f9576103c183610318565b6101d160f51b6103d084610318565b61080f60f21b6103df85610615565b604051610115959493929190601f60f91b906020016110d0565b50505050565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90610430903090879060040161112e565b60206040518083038186803b15801561044857600080fd5b505afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104809190611009565b111561049b5761049b6001600160a01b03841683600061051b565b6104af6001600160a01b038416838361051b565b505050565b60008284106104c4575080610514565b6000846104e06ec097ce7bc90715b34b9f100000000086611149565b6104ea919061117e565b90506ec097ce7bc90715b34b9f10000000006105068285611149565b610510919061117e565b9150505b9392505050565b8015806105a35750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610551903090869060040161112e565b60206040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a19190611009565b155b6105bf5760405162461bcd60e51b815260040161013b906111e8565b6104af8363095ea7b360e01b84846040516024016105de9291906111f8565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261075b565b60408051602a80825260608281019093526001600160a01b03841691600091602082018180368337019050509050603060f81b8160008151811061065b5761065b611082565b60200101906001600160f81b031916908160001a905350607860f81b8160018151811061068a5761068a611082565b60200101906001600160f81b031916908160001a90535060005b60148110156103ab5760006106ba826002611149565b90506106c8600f85166107ed565b836106d4836029611213565b815181106106e4576106e4611082565b60200101906001600160f81b031916908160001a905350600484901c935061070e600f85166107ed565b8361071a836028611213565b8151811061072a5761072a611082565b60200101906001600160f81b031916908160001a9053505060049290921c91806107538161122a565b9150506106a4565b60006107b0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108179092919063ffffffff16565b90508051600014806107d15750808060200190518101906107d19190611258565b6104af5760405162461bcd60e51b815260040161013b906112c0565b6000600a82101561080c57610803603083611098565b60f81b92915050565b610803605783611098565b6060610826848460008561082e565b949350505050565b6060824710156108505760405162461bcd60e51b815260040161013b90611313565b600080866001600160a01b0316858760405161086c9190611323565b60006040518083038185875af1925050503d80600081146108a9576040519150601f19603f3d011682016040523d82523d6000602084013e6108ae565b606091505b50915091506108bf878383876108ca565b979650505050505050565b606083156109065782516108ff576001600160a01b0385163b6108ff5760405162461bcd60e51b815260040161013b9061132f565b5081610826565b610826838381511561091b5781518083602001fd5b8060405162461bcd60e51b815260040161013b9190610c18565b60006001600160a01b0382165b92915050565b600061094282610935565b600061094282610948565b61096781610953565b82525050565b60208101610942828461095e565b60006001600160a01b038216610942565b6109958161097b565b81146109a057600080fd5b50565b80356109428161098c565b80610995565b8035610942816109ae565b60008083601f8401126109d4576109d4600080fd5b50813567ffffffffffffffff8111156109ef576109ef600080fd5b602083019150836001820283011115610a0a57610a0a600080fd5b9250929050565b600080600080600060808688031215610a2c57610a2c600080fd5b6000610a3888886109a3565b9550506020610a49888289016109a3565b9450506040610a5a888289016109b4565b935050606086013567ffffffffffffffff811115610a7a57610a7a600080fd5b610a86888289016109bf565b92509250509295509295909350565b80610967565b602081016109428284610a95565b600080600080600080600060c0888a031215610ac757610ac7600080fd5b6000610ad38a8a6109a3565b9750506020610ae48a828b016109a3565b9650506040610af58a828b016109a3565b9550506060610b068a828b016109a3565b9450506080610b178a828b016109b4565b93505060a088013567ffffffffffffffff811115610b3757610b37600080fd5b610b438a828b016109bf565b925092505092959891949750929550565b60005b83811015610b6f578181015183820152602001610b57565b838111156103f95750506000910152565b6000610b8a825190565b610b98818560208601610b54565b9290920192915050565b6000610bae8284610b80565b7f3a2067657445786368616e6765436f7374206e6f7420696d706c656d656e74658152601960fa1b6020820152915060218201610514565b6000610bf0825190565b808452602084019350610c07818560208601610b54565b601f01601f19169290920192915050565b602080825281016105148184610be6565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610c6557610c65610c29565b6040525050565b6000610c7760405190565b9050610c838282610c3f565b919050565b600067ffffffffffffffff821115610ca257610ca2610c29565b601f19601f83011660200192915050565b82818337506000910152565b6000610cd2610ccd84610c88565b610c6c565b905082815260208101848484011115610ced57610ced600080fd5b6103ab848285610cb3565b600082601f830112610d0c57610d0c600080fd5b8135610826848260208601610cbf565b60008060408385031215610d3257610d32600080fd5b6000610d3e85856109b4565b925050602083013567ffffffffffffffff811115610d5e57610d5e600080fd5b610d6a85828601610cf8565b9150509250929050565b80516109428161098c565b8051610942816109ae565b600060e08284031215610d9f57610d9f600080fd5b610da960e0610c6c565b90506000610db78484610d74565b8252506020610dc884848301610d7f565b6020830152506040610ddc84828501610d74565b6040830152506060610df084828501610d74565b6060830152506080610e0484828501610d7f565b60808301525060a0610e1884828501610d7f565b60a08301525060c0610e2c84828501610d74565b60c08301525092915050565b6000610e46610ccd84610c88565b905082815260208101848484011115610e6157610e61600080fd5b6103ab848285610b54565b600082601f830112610e8057610e80600080fd5b8151610826848260208601610e38565b63ffffffff8116610995565b805161094281610e90565b6000806000806101408587031215610ec157610ec1600080fd5b6000610ecd8787610d8a565b94505060e085015167ffffffffffffffff811115610eed57610eed600080fd5b610ef987828801610e6c565b935050610100610f0b87828801610d74565b925050610120610f1d87828801610e9c565b91505092959194509250565b6109678161097b565b805160e0830190610f438482610f29565b506020820151610f566020850182610a95565b506040820151610f696040850182610f29565b506060820151610f7c6060850182610f29565b506080820151610f8f6080850182610a95565b5060a0820151610fa260a0850182610a95565b5060c08201516103f960c0850182610f29565b63ffffffff8116610967565b6101408101610fd08287610f32565b81810360e0830152610fe28186610be6565b9050610ff2610100830185610f29565b611000610120830184610fb5565b95945050505050565b60006020828403121561101e5761101e600080fd5b60006108268484610d7f565b634e487b7160e01b600052600160045260246000fd5b600061104c8284610a95565b50602001919050565b634e487b7160e01b600052601160045260246000fd5b60008161107a5761107a611055565b506000190190565b634e487b7160e01b600052603260045260246000fd5b600082198211156110ab576110ab611055565b500190565b6001600160f01b03198116610967565b6001600160f81b03198116610967565b60006110dc8289610b80565b91506110e882886110b0565b6002820191506110f88287610b80565b915061110482866110b0565b6002820191506111148285610b80565b915061112082846110c0565b506001019695505050505050565b6040810161113c8285610f29565b6105146020830184610f29565b600081600019048311821515161561116357611163611055565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261118d5761118d611168565b500490565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b602082015291505b5060400190565b6020808252810161094281611192565b604081016112068285610f29565b6105146020830184610a95565b60008282101561122557611225611055565b500390565b600060001982141561123e5761123e611055565b5060010190565b801515610995565b805161094281611245565b60006020828403121561126d5761126d600080fd5b6000610826848461124d565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506111e1565b6020808252810161094281611279565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015291506111e1565b60208082528101610942816112d0565b60006105148284610b80565b6020808252810161094281601d81527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060208201526040019056fea2646970667358221220f620e8772e86e2d3b69537e375d42b2056576544d980bddeaddb914ebfca792364736f6c63430008090033";

type OdosAggregatorTraderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OdosAggregatorTraderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OdosAggregatorTrader__factory extends ContractFactory {
  constructor(...args: OdosAggregatorTraderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _odosRouter: string,
    _dolomiteMargin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<OdosAggregatorTrader> {
    return super.deploy(
      _odosRouter,
      _dolomiteMargin,
      overrides || {}
    ) as Promise<OdosAggregatorTrader>;
  }
  override getDeployTransaction(
    _odosRouter: string,
    _dolomiteMargin: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _odosRouter,
      _dolomiteMargin,
      overrides || {}
    );
  }
  override attach(address: string): OdosAggregatorTrader {
    return super.attach(address) as OdosAggregatorTrader;
  }
  override connect(signer: Signer): OdosAggregatorTrader__factory {
    return super.connect(signer) as OdosAggregatorTrader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OdosAggregatorTraderInterface {
    return new utils.Interface(_abi) as OdosAggregatorTraderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OdosAggregatorTrader {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OdosAggregatorTrader;
  }
}
