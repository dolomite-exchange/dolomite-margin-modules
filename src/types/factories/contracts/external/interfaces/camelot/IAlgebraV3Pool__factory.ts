/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAlgebraV3Pool,
  IAlgebraV3PoolInterface,
} from "../../../../../contracts/external/interfaces/camelot/IAlgebraV3Pool";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "getTimepoints",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulatives",
        type: "uint160[]",
      },
      {
        internalType: "uint112[]",
        name: "volatilityCumulatives",
        type: "uint112[]",
      },
      {
        internalType: "uint256[]",
        name: "volumePerAvgLiquiditys",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IAlgebraV3Pool__factory {
  static readonly abi = _abi;
  static createInterface(): IAlgebraV3PoolInterface {
    return new utils.Interface(_abi) as IAlgebraV3PoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAlgebraV3Pool {
    return new Contract(address, _abi, signerOrProvider) as IAlgebraV3Pool;
  }
}
