/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestGmxDataStore,
  TestGmxDataStoreInterface,
} from "../../../contracts/test/TestGmxDataStore";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "boolValues",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "getBool",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_base",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
    ],
    name: "getUint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract IGmxRoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "_value",
        type: "bool",
      },
    ],
    name: "setBool",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setUint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "uintValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103bc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063baf81f651161005b578063baf81f651461010b578063bd02d0f51461012b578063d38eebc71461014b578063e2a4853a1461016b57600080fd5b806344a242b11461008d5780634a4a7b04146100c65780637ae1cfca146100d5578063abfdcced146100f8575b600080fd5b6100b061009b3660046101fe565b60006020819052908152604090205460ff1681565b6040516100bd9190610231565b60405180910390f35b60006040516100bd919061026f565b6100b06100e33660046101fe565b60009081526020819052604090205460ff1690565b6100b0610106366004610290565b61018e565b61011e6101193660046102e1565b6101b0565b6040516100bd919061031a565b61011e6101393660046101fe565b60009081526001602052604090205490565b61011e6101593660046101fe565b60016020526000908152604090205481565b61011e610179366004610328565b60009182526001602052604090912081905590565b6000828152602081905260409020805460ff1916821515179055805b92915050565b600082826040516020016101c5929190610364565b60405160208183030381529060405280519060200120905092915050565b805b81146101f057600080fd5b50565b80356101aa816101e3565b60006020828403121561021357610213600080fd5b600061021f84846101f3565b949350505050565b8015155b82525050565b602081016101aa8284610227565b60006001600160a01b0382166101aa565b60006101aa8261023f565b60006101aa82610250565b61022b8161025b565b602081016101aa8284610266565b8015156101e5565b80356101aa8161027d565b600080604083850312156102a6576102a6600080fd5b60006102b285856101f3565b92505060206102c385828601610285565b9150509250929050565b6101e58161023f565b80356101aa816102cd565b600080604083850312156102f7576102f7600080fd5b600061030385856101f3565b92505060206102c3858286016102d6565b8061022b565b602081016101aa8284610314565b6000806040838503121561033e5761033e600080fd5b600061034a85856101f3565b92505060206102c3858286016101f3565b61022b8161023f565b604081016103728285610314565b61037f602083018461035b565b939250505056fea264697066735822122008ea9cc28bca567573780e4d71d92babc1c5a0349746931f6498f79151075d4964736f6c63430008090033";

type TestGmxDataStoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestGmxDataStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestGmxDataStore__factory extends ContractFactory {
  constructor(...args: TestGmxDataStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestGmxDataStore> {
    return super.deploy(overrides || {}) as Promise<TestGmxDataStore>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestGmxDataStore {
    return super.attach(address) as TestGmxDataStore;
  }
  override connect(signer: Signer): TestGmxDataStore__factory {
    return super.connect(signer) as TestGmxDataStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestGmxDataStoreInterface {
    return new utils.Interface(_abi) as TestGmxDataStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestGmxDataStore {
    return new Contract(address, _abi, signerOrProvider) as TestGmxDataStore;
  }
}
