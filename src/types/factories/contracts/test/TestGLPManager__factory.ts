/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestGLPManager,
  TestGLPManagerInterface,
} from "../../../contracts/test/TestGLPManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "getAumInUsdg",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newAumInUsdg",
        type: "uint256",
      },
    ],
    name: "setAumInUsdg",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610120806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80633ed0c85e14603757806368a0a3e0146049575b600080fd5b60476042366004608d565b600055565b005b605b605436600460c2565b5060005490565b6040516066919060df565b60405180910390f35b805b8114607b57600080fd5b50565b8035608781606f565b92915050565b60006020828403121560a05760a0600080fd5b600060aa8484607e565b949350505050565b8015156071565b803560878160b2565b60006020828403121560d55760d5600080fd5b600060aa848460b9565b81815260208101608756fea264697066735822122097f84af61f055184772c8fc81ae2bf943171fe72ef99c021fae28684cfdba9a464736f6c63430008090033";

type TestGLPManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestGLPManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestGLPManager__factory extends ContractFactory {
  constructor(...args: TestGLPManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestGLPManager> {
    return super.deploy(overrides || {}) as Promise<TestGLPManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestGLPManager {
    return super.attach(address) as TestGLPManager;
  }
  override connect(signer: Signer): TestGLPManager__factory {
    return super.connect(signer) as TestGLPManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestGLPManagerInterface {
    return new utils.Interface(_abi) as TestGLPManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestGLPManager {
    return new Contract(address, _abi, signerOrProvider) as TestGLPManager;
  }
}
