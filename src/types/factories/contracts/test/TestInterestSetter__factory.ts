/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestInterestSetter,
  TestInterestSetterInterface,
} from "../../../contracts/test/TestInterestSetter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "g_interestRates",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getInterestRate",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
        ],
        internalType: "struct IDolomiteInterestSetter.InterestRate",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interestSetterType",
    outputs: [
      {
        internalType: "enum IDolomiteInterestSetter.InterestSetterType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
        ],
        internalType: "struct IDolomiteInterestSetter.InterestRate",
        name: "rate",
        type: "tuple",
      },
    ],
    name: "setInterestRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610355806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301fb557c146100515780638f8da88914610087578063e8177dcf1461009c578063ee15144b146100ec575b600080fd5b61007161005f36600461015a565b60006020819052908152604090205481565b60405161007e919061018b565b60405180910390f35b61009a6100953660046101b4565b6100fb565b005b6100df6100aa366004610202565b505060408051602080820183526000918290526001600160a01b03939093168152808352819020815192830190915254815290565b60405161007e9190610263565b600360405161007e91906102ba565b6001600160a01b0382166000908152602081905260409020819061011f8282610311565b50505050565b60006001600160a01b0382165b92915050565b61014181610125565b811461014c57600080fd5b50565b803561013281610138565b60006020828403121561016f5761016f600080fd5b600061017b848461014f565b949350505050565b805b82525050565b602081016101328284610183565b6000602082840312156101ae576101ae600080fd5b50919050565b600080604083850312156101ca576101ca600080fd5b60006101d6858561014f565b92505060206101e785828601610199565b9150509250929050565b80610141565b8035610132816101f1565b60008060006060848603121561021a5761021a600080fd5b6000610226868661014f565b9350506020610237868287016101f7565b9250506040610248868287016101f7565b9150509250925092565b8051602083019061011f8482610183565b602081016101328284610252565b634e487b7160e01b600052602160045260246000fd5b6004811061014c5761014c610271565b806102a181610287565b919050565b600061013282610297565b610185816102a6565b6020810161013282846102b1565b60008135610132816101f1565b60006101326102e18381565b90565b6102ed826102d5565b905550565b8082806102fe816102c8565b905061030a81846102e4565b5050505050565b61031b82826102f2565b505056fea264697066735822122023220186fd0d5fee73be4d864d31e67246b229f28d30bb0fb4b0873a0f78cb4d64736f6c63430008090033";

type TestInterestSetterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestInterestSetterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestInterestSetter__factory extends ContractFactory {
  constructor(...args: TestInterestSetterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestInterestSetter> {
    return super.deploy(overrides || {}) as Promise<TestInterestSetter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestInterestSetter {
    return super.attach(address) as TestInterestSetter;
  }
  override connect(signer: Signer): TestInterestSetter__factory {
    return super.connect(signer) as TestInterestSetter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterestSetterInterface {
    return new utils.Interface(_abi) as TestInterestSetterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestInterestSetter {
    return new Contract(address, _abi, signerOrProvider) as TestInterestSetter;
  }
}
