/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestPriceOracle,
  TestPriceOracleInterface,
} from "../../../contracts/test/TestPriceOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "g_prices",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
        ],
        internalType: "struct IDolomiteStructs.MonetaryPrice",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100405760003560e01c8062e4768b1461004557806338916d231461007157806341976e09146100a7575b600080fd5b61006f610053366004610138565b6001600160a01b03909116600090815260208190526040902055565b005b61009161007f366004610175565b60006020819052908152604090205481565b60405161009e919061019e565b60405180910390f35b6100e56100b5366004610175565b6040805160208082018352600091829052825180820184526001600160a01b039490941682528190522054815290565b60405161009e91906101aa565b60006001600160a01b0382165b92915050565b61010e816100f2565b811461011957600080fd5b50565b80356100ff81610105565b8061010e565b80356100ff81610127565b6000806040838503121561014e5761014e600080fd5b600061015a858561011c565b925050602061016b8582860161012d565b9150509250929050565b60006020828403121561018a5761018a600080fd5b6000610196848461011c565b949350505050565b818152602081016100ff565b81518152602081016100ff56fea2646970667358221220da181269d7b77814c0ccb5439f94cef7bfdad47dd56614c8647e3948900b037a64736f6c63430008090033";

type TestPriceOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPriceOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPriceOracle__factory extends ContractFactory {
  constructor(...args: TestPriceOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestPriceOracle> {
    return super.deploy(overrides || {}) as Promise<TestPriceOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestPriceOracle {
    return super.attach(address) as TestPriceOracle;
  }
  override connect(signer: Signer): TestPriceOracle__factory {
    return super.connect(signer) as TestPriceOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPriceOracleInterface {
    return new utils.Interface(_abi) as TestPriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPriceOracle {
    return new Contract(address, _abi, signerOrProvider) as TestPriceOracle;
  }
}
