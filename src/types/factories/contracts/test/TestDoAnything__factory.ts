/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestDoAnything,
  TestDoAnythingInterface,
} from "../../../contracts/test/TestDoAnything";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "callAnything",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063169d74f814610030575b600080fd5b61004361003e36600461022b565b610045565b005b600080836001600160a01b03168360405161006091906102d1565b6000604051808303816000865af19150503d806000811461009d576040519150601f19603f3d011682016040523d82523d6000602084013e6100a2565b606091505b5091509150816100ed576004810190506000818060200190518101906100c8919061033c565b90508060405162461bcd60e51b81526004016100e491906103a9565b60405180910390fd5b50505050565b60006001600160a01b0382165b92915050565b61010f816100f3565b811461011a57600080fd5b50565b803561010081610106565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561016457610164610128565b6040525050565b600061017660405190565b9050610182828261013e565b919050565b600067ffffffffffffffff8211156101a1576101a1610128565b601f19601f83011660200192915050565b82818337506000910152565b60006101d16101cc84610187565b61016b565b9050828152602081018484840111156101ec576101ec600080fd5b6101f78482856101b2565b509392505050565b600082601f83011261021357610213600080fd5b81356102238482602086016101be565b949350505050565b6000806040838503121561024157610241600080fd5b600061024d858561011d565b925050602083013567ffffffffffffffff81111561026d5761026d600080fd5b610279858286016101ff565b9150509250929050565b60005b8381101561029e578181015183820152602001610286565b838111156100ed5750506000910152565b60006102b9825190565b6102c7818560208601610283565b9290920192915050565b60006102dd82846102af565b9392505050565b60006102f26101cc84610187565b90508281526020810184848401111561030d5761030d600080fd5b6101f7848285610283565b600082601f83011261032c5761032c600080fd5b81516102238482602086016102e4565b60006020828403121561035157610351600080fd5b815167ffffffffffffffff81111561036b5761036b600080fd5b61022384828501610318565b6000610381825190565b808452602084019350610398818560208601610283565b601f01601f19169290920192915050565b602080825281016102dd818461037756fea26469706673582212209da868a1ba1ac542c67055be265720c3d68ef17523a922015fe54437f08bf9a864736f6c63430008090033";

type TestDoAnythingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestDoAnythingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestDoAnything__factory extends ContractFactory {
  constructor(...args: TestDoAnythingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestDoAnything> {
    return super.deploy(overrides || {}) as Promise<TestDoAnything>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestDoAnything {
    return super.attach(address) as TestDoAnything;
  }
  override connect(signer: Signer): TestDoAnything__factory {
    return super.connect(signer) as TestDoAnything__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDoAnythingInterface {
    return new utils.Interface(_abi) as TestDoAnythingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDoAnything {
    return new Contract(address, _abi, signerOrProvider) as TestDoAnything;
  }
}
