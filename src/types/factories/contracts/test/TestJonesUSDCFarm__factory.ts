/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestJonesUSDCFarm,
  TestJonesUSDCFarmInterface,
} from "../../../contracts/test/TestJonesUSDCFarm";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "harvest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "incentiveReceiver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "incentivesOn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pendingSushi",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "poolInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "accSushiPerShare",
            type: "uint128",
          },
          {
            internalType: "uint64",
            name: "lastRewardTime",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "allocPoint",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "depositIncentives",
            type: "uint256",
          },
        ],
        internalType: "struct IJonesUSDCFarm.PoolInfo",
        name: "p",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "toggleIncentives",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "rewardDebt",
            type: "int256",
          },
        ],
        internalType: "struct IJonesUSDCFarm.UserInfo",
        name: "u",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103b2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636cdfa1b7116100665780636cdfa1b71461012b5780638dbdbe6d1461009857806393f1a40b1461013a578063a5a362d6146100ab578063c4ade30b1461015a57600080fd5b80630ad58d2f146100985780631526fe27146100ad57806318fccc76146100f9578063195426ec1461010b575b600080fd5b6100ab6100a63660046101cb565b505050565b005b6100e36100bb36600461021b565b5060408051608081018252600080825260208201819052918101829052606081019190915290565b6040516100f091906102c4565b60405180910390f35b6100ab6101073660046102d2565b5050565b61011e6101193660046102d2565b610169565b6040516100f0919061030f565b60006040516100f09190610325565b61014d6101483660046102d2565b610172565b6040516100f09190610357565b60006040516100f0919061036e565b60005b92915050565b604080518082019091526000808252602082015261016c565b805b811461019857600080fd5b50565b803561016c8161018b565b60006001600160a01b03821661016c565b61018d816101a6565b803561016c816101b7565b6000806000606084860312156101e3576101e3600080fd5b60006101ef868661019b565b93505060206102008682870161019b565b9250506040610211868287016101c0565b9150509250925092565b60006020828403121561023057610230600080fd5b600061023c848461019b565b949350505050565b6fffffffffffffffffffffffffffffffff81165b82525050565b67ffffffffffffffff8116610258565b80610258565b805160808301906102858482610244565b506020820151610298602085018261025e565b5060408201516102ab604085018261025e565b5060608201516102be606085018261026e565b50505050565b6080810161016c8284610274565b600080604083850312156102e8576102e8600080fd5b60006102f4858561019b565b9250506020610305858286016101c0565b9150509250929050565b6020810161016c828461026e565b801515610258565b6020810161016c828461031d565b80516040830190610344848261026e565b5060208201516102be602085018261026e565b6040810161016c8284610333565b610258816101a6565b6020810161016c828461036556fea26469706673582212209f7f1af1e76ff61270019d58df9d64a9cf6e7fe6c3f2c69f8041b223d244cf1764736f6c63430008090033";

type TestJonesUSDCFarmConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestJonesUSDCFarmConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestJonesUSDCFarm__factory extends ContractFactory {
  constructor(...args: TestJonesUSDCFarmConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestJonesUSDCFarm> {
    return super.deploy(overrides || {}) as Promise<TestJonesUSDCFarm>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestJonesUSDCFarm {
    return super.attach(address) as TestJonesUSDCFarm;
  }
  override connect(signer: Signer): TestJonesUSDCFarm__factory {
    return super.connect(signer) as TestJonesUSDCFarm__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestJonesUSDCFarmInterface {
    return new utils.Interface(_abi) as TestJonesUSDCFarmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestJonesUSDCFarm {
    return new Contract(address, _abi, signerOrProvider) as TestJonesUSDCFarm;
  }
}
