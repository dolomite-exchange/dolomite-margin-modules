/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestRequire,
  TestRequireInterface,
} from "../../../contracts/test/TestRequire";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "payloadA",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "payloadB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "payloadC",
        type: "uint256",
      },
    ],
    name: "RequireNotThatB2",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
    ],
    name: "RequireThat0",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "payloadA",
        type: "uint256",
      },
    ],
    name: "RequireThat1",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "payloadA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "payloadB",
        type: "uint256",
      },
    ],
    name: "RequireThat2",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "payloadA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "payloadB",
        type: "uint256",
      },
    ],
    name: "RequireThat2IsTrue",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "payloadA",
        type: "address",
      },
    ],
    name: "RequireThatA0",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "payloadA",
        type: "address",
      },
    ],
    name: "RequireThatA0IsTrue",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "payloadA",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "payloadB",
        type: "uint256",
      },
    ],
    name: "RequireThatA1",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "payloadA",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "payloadB",
        type: "uint256",
      },
    ],
    name: "RequireThatA1IsTrue",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "payloadA",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "payloadB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "payloadC",
        type: "uint256",
      },
    ],
    name: "RequireThatA2",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "payloadA",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "payloadB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "payloadC",
        type: "uint256",
      },
    ],
    name: "RequireThatA2IsTrue",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "payloadA",
        type: "bytes32",
      },
    ],
    name: "RequireThatB0",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "payloadA",
        type: "bytes32",
      },
    ],
    name: "RequireThatB0IsTrue",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "payloadA",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "payloadB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "payloadC",
        type: "uint256",
      },
    ],
    name: "RequireThatB2",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610fb5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636f4667061161008c578063a0ea658d11610066578063a0ea658d146101af578063b474633a146101c2578063e4b4b192146101d5578063fa8529a4146101e857600080fd5b80636f46670614610176578063784ba813146101895780639627a1991461019c57600080fd5b80632a4e9808116100c85780632a4e98081461012a5780634f016c951461013d5780635604cbb2146101505780635f7d744c1461016357600080fd5b8063053c633a146100ef578063058b2b141461010457806319a665ef14610117575b600080fd5b6101026100fd366004610a28565b6101fb565b005b610102610112366004610a65565b61021a565b610102610125366004610ab5565b61023b565b610102610138366004610ab5565b61025e565b61010261014b366004610a28565b61027b565b61010261015e366004610b3e565b610296565b610102610171366004610a28565b6102b2565b610102610184366004610b73565b6102cd565b610102610197366004610b73565b6102ea565b6101026101aa366004610ba9565b610307565b6101026101bd366004610ba9565b610322565b6101026101d0366004610bdc565b61033d565b6101026101e3366004610a65565b61035a565b6101026101f6366004610b3e565b610376565b61021660016a546573745265717569726560a81b8484610392565b5050565b61023660006a546573745265717569726560a81b858585610407565b505050565b61025860016a546573745265717569726560a81b86868686610465565b50505050565b61025860006a546573745265717569726560a81b86868686610465565b61021660006a546573745265717569726560a81b84846104d5565b61023660006a546573745265717569726560a81b858585610501565b61021660006a546573745265717569726560a81b8484610392565b61025860006a546573745265717569726560a81b8686868661052d565b61025860016a546573745265717569726560a81b8686868661052d565b61021660016a546573745265717569726560a81b8484610559565b61021660006a546573745265717569726560a81b8484610559565b61035760006a546573745265717569726560a81b83610585565b50565b61023660016a546573745265717569726560a81b858585610407565b61023660016a546573745265717569726560a81b858585610501565b83610258576103a0836105b4565b6101d160f51b6103af846105b4565b61080f60f21b6103be8561064f565b6040516103d8959493929190601f60f91b90602001610c75565b60408051601f198184030181529082905262461bcd60e51b82526103fe91600401610d05565b60405180910390fd5b8461045e57610415846105b4565b6101d160f51b610424856105b4565b61080f60f21b6104338661078e565b61016160f51b6104428761078e565b6040516103d89796959493929190601f60f91b90602001610d1d565b5050505050565b856104cd57610473856105b4565b6101d160f51b610482866105b4565b61080f60f21b6104918761064f565b61016160f51b6104a08861078e565b61016160f51b6104af8961078e565b6040516103d899989796959493929190601f60f91b90602001610d99565b505050505050565b83610258576104e3836105b4565b6101d160f51b6104f2846105b4565b61080f60f21b6103be8561078e565b8461045e5761050f846105b4565b6101d160f51b61051e856105b4565b61080f60f21b6104338661089a565b856104cd5761053b856105b4565b6101d160f51b61054a866105b4565b61080f60f21b6104918761089a565b8361025857610567836105b4565b6101d160f51b610576846105b4565b61080f60f21b6103be8561089a565b8261023657610593826105b4565b6101d160f51b6105a2836105b4565b6040516020016103d893929190610e33565b60606000826040516020016105c99190610e6a565b60408051601f19818403018152919052905060205b801561063457806105ee81610e95565b91505081818151811061060357610603610eac565b01602001516001600160f81b0319161561062f576000610624826001610ec2565b835250909392505050565b6105de565b5060408051600080825260208201909252905b509392505050565b604080516042808252608082019092526060918391600091602082018180368337019050509050603060f81b8160008151811061068e5761068e610eac565b60200101906001600160f81b031916908160001a905350607860f81b816001815181106106bd576106bd610eac565b60200101906001600160f81b031916908160001a90535060005b60208110156106475760006106ed826002610ef0565b90506106fb600f85166109e0565b83610707836041610f0f565b8151811061071757610717610eac565b60200101906001600160f81b031916908160001a905350600484901c9350610741600f85166109e0565b8361074d836040610f0f565b8151811061075d5761075d610eac565b60200101906001600160f81b031916908160001a9053505060049290921c918061078681610f26565b9150506106d7565b6060816107b25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156107dc57806107c681610f26565b91506107d59050600a83610f57565b91506107b6565b60008167ffffffffffffffff8111156107f7576107f7610eda565b6040519080825280601f01601f191660200182016040528015610821576020820181803683370190505b508593509050815b8015610891578061083981610e95565b91506108489050600a85610f6b565b610853906030610ec2565b60f81b82828151811061086857610868610eac565b60200101906001600160f81b031916908160001a90535061088a600a85610f57565b9350610829565b50949350505050565b60408051602a80825260608281019093526001600160a01b03841691600091602082018180368337019050509050603060f81b816000815181106108e0576108e0610eac565b60200101906001600160f81b031916908160001a905350607860f81b8160018151811061090f5761090f610eac565b60200101906001600160f81b031916908160001a90535060005b601481101561064757600061093f826002610ef0565b905061094d600f85166109e0565b83610959836029610f0f565b8151811061096957610969610eac565b60200101906001600160f81b031916908160001a905350600484901c9350610993600f85166109e0565b8361099f836028610f0f565b815181106109af576109af610eac565b60200101906001600160f81b031916908160001a9053505060049290921c91806109d881610f26565b915050610929565b6000600a8210156109ff576109f6603083610ec2565b60f81b92915050565b6109f6605783610ec2565b805b811461035757600080fd5b8035610a2281610a0a565b92915050565b60008060408385031215610a3e57610a3e600080fd5b6000610a4a8585610a17565b9250506020610a5b85828601610a17565b9150509250929050565b600080600060608486031215610a7d57610a7d600080fd5b6000610a898686610a17565b9350506020610a9a86828701610a17565b9250506040610aab86828701610a17565b9150509250925092565b60008060008060808587031215610ace57610ace600080fd5b6000610ada8787610a17565b9450506020610aeb87828801610a17565b9350506040610afc87828801610a17565b9250506060610b0d87828801610a17565b91505092959194509250565b60006001600160a01b038216610a22565b610a0c81610b19565b8035610a2281610b2a565b600080600060608486031215610b5657610b56600080fd5b6000610b628686610a17565b9350506020610a9a86828701610b33565b60008060008060808587031215610b8c57610b8c600080fd5b6000610b988787610a17565b9450506020610aeb87828801610b33565b60008060408385031215610bbf57610bbf600080fd5b6000610bcb8585610a17565b9250506020610a5b85828601610b33565b600060208284031215610bf157610bf1600080fd5b6000610bfd8484610a17565b949350505050565b60005b83811015610c20578181015183820152602001610c08565b838111156102585750506000910152565b6000610c3b825190565b610c49818560208601610c05565b9290920192915050565b6001600160f01b031981165b82525050565b6001600160f81b03198116610c5f565b6000610c818289610c31565b9150610c8d8288610c53565b600282019150610c9d8287610c31565b9150610ca98286610c53565b600282019150610cb98285610c31565b9150610cc58284610c65565b506001019695505050505050565b6000610cdd825190565b808452602084019350610cf4818560208601610c05565b601f01601f19169290920192915050565b60208082528101610d168184610cd3565b9392505050565b6000610d29828b610c31565b9150610d35828a610c53565b600282019150610d458289610c31565b9150610d518288610c53565b600282019150610d618287610c31565b9150610d6d8286610c53565b600282019150610d7d8285610c31565b9150610d898284610c65565b5060010198975050505050505050565b6000610da5828d610c31565b9150610db1828c610c53565b600282019150610dc1828b610c31565b9150610dcd828a610c53565b600282019150610ddd8289610c31565b9150610de98288610c53565b600282019150610df98287610c31565b9150610e058286610c53565b600282019150610e158285610c31565b9150610e218284610c65565b506001019a9950505050505050505050565b6000610e3f8286610c31565b9150610e4b8285610c53565b600282019150610e5b8284610c31565b95945050505050565b80610c5f565b6000610e768284610e64565b50602001919050565b634e487b7160e01b600052601160045260246000fd5b600081610ea457610ea4610e7f565b506000190190565b634e487b7160e01b600052603260045260246000fd5b60008219821115610ed557610ed5610e7f565b500190565b634e487b7160e01b600052604160045260246000fd5b6000816000190483118215151615610f0a57610f0a610e7f565b500290565b600082821015610f2157610f21610e7f565b500390565b6000600019821415610f3a57610f3a610e7f565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610f6657610f66610f41565b500490565b600082610f7a57610f7a610f41565b50069056fea26469706673582212208c92130c1918b332e1a57c3ca3cf8339536b56991088653ebdcdb04f9fe2046264736f6c63430008090033";

type TestRequireConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestRequireConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestRequire__factory extends ContractFactory {
  constructor(...args: TestRequireConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestRequire> {
    return super.deploy(overrides || {}) as Promise<TestRequire>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestRequire {
    return super.attach(address) as TestRequire;
  }
  override connect(signer: Signer): TestRequire__factory {
    return super.connect(signer) as TestRequire__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRequireInterface {
    return new utils.Interface(_abi) as TestRequireInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestRequire {
    return new Contract(address, _abi, signerOrProvider) as TestRequire;
  }
}
