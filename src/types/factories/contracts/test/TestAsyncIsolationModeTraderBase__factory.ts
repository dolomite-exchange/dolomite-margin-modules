/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAsyncIsolationModeTraderBase,
  TestAsyncIsolationModeTraderBaseInterface,
} from "../../../contracts/test/TestAsyncIsolationModeTraderBase";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_bal",
        type: "uint256",
      },
    ],
    name: "OwnerWithdrawETH",
    type: "event",
  },
  {
    inputs: [],
    name: "DOLOMITE_MARGIN",
    outputs: [
      {
        internalType: "contract IDolomiteMargin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "HANDLER_REGISTRY",
    outputs: [
      {
        internalType: "contract IHandlerRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract IWETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "callbackGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gmxV2Registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dolomiteMargin",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_handler",
        type: "address",
      },
    ],
    name: "isHandler",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "ownerWithdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testOnlyHandler",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gmxV2Registry",
        type: "address",
      },
    ],
    name: "triggerInternalInitializer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type TestAsyncIsolationModeTraderBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAsyncIsolationModeTraderBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAsyncIsolationModeTraderBase__factory extends ContractFactory {
  constructor(...args: TestAsyncIsolationModeTraderBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _weth: string,
    overrides?: Overrides & { from?: string }
  ): Promise<TestAsyncIsolationModeTraderBase> {
    return super.deploy(
      _weth,
      overrides || {}
    ) as Promise<TestAsyncIsolationModeTraderBase>;
  }
  override getDeployTransaction(
    _weth: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_weth, overrides || {});
  }
  override attach(address: string): TestAsyncIsolationModeTraderBase {
    return super.attach(address) as TestAsyncIsolationModeTraderBase;
  }
  override connect(signer: Signer): TestAsyncIsolationModeTraderBase__factory {
    return super.connect(signer) as TestAsyncIsolationModeTraderBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAsyncIsolationModeTraderBaseInterface {
    return new utils.Interface(
      _abi
    ) as TestAsyncIsolationModeTraderBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAsyncIsolationModeTraderBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestAsyncIsolationModeTraderBase;
  }
}
