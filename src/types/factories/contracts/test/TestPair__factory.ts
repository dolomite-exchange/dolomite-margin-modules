/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestPair,
  TestPairInterface,
} from "../../../contracts/test/TestPair";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101b13803806101b183398101604081905261002f91610095565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100d2565b60006001600160a01b0382165b92915050565b61007c81610060565b811461008757600080fd5b50565b805161006d81610073565b600080604083850312156100ab576100ab600080fd5b60006100b7858561008a565b92505060206100c88582860161008a565b9150509250929050565b60d1806100e06000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80630dfe1681146037578063d21220a714605d575b600080fd5b6000546049906001600160a01b031681565b60405160549190608f565b60405180910390f35b6001546049906001600160a01b031681565b60006001600160a01b0382165b92915050565b608981606f565b82525050565b60208101607c8284608256fea2646970667358221220a0dc8376a3cb24e5fdde6971a0485a1d7340caa2354335106a968dd022f0b8d864736f6c63430008090033";

type TestPairConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPairConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPair__factory extends ContractFactory {
  constructor(...args: TestPairConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token0: string,
    _token1: string,
    overrides?: Overrides & { from?: string }
  ): Promise<TestPair> {
    return super.deploy(_token0, _token1, overrides || {}) as Promise<TestPair>;
  }
  override getDeployTransaction(
    _token0: string,
    _token1: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_token0, _token1, overrides || {});
  }
  override attach(address: string): TestPair {
    return super.attach(address) as TestPair;
  }
  override connect(signer: Signer): TestPair__factory {
    return super.connect(signer) as TestPair__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPairInterface {
    return new utils.Interface(_abi) as TestPairInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPair {
    return new Contract(address, _abi, signerOrProvider) as TestPair;
  }
}
