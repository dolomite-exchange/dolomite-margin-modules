/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CustomTestVaultToken,
  CustomTestVaultTokenInterface,
} from "../../../contracts/test/CustomTestVaultToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "asset_",
        type: "address",
      },
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "addBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "asset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalAssets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162001197380380620011978339810160408190526200003491620002b6565b8251839083906200004d90600390602085019062000082565b5080516200006390600490602084019062000082565b5050506001600160a01b03909316608052505060ff1660a052620003a3565b828054620000909062000372565b90600052602060002090601f016020900481019282620000b45760008555620000ff565b82601f10620000cf57805160ff1916838001178555620000ff565b82800160010185558215620000ff579182015b82811115620000ff578251825591602001919060010190620000e2565b506200010d92915062000111565b5090565b5b808211156200010d576000815560010162000112565b60006001600160a01b0382165b92915050565b620001468162000128565b81146200015257600080fd5b50565b805162000135816200013b565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620001a057620001a062000162565b6040525050565b6000620001b360405190565b9050620001c1828262000178565b919050565b60006001600160401b03821115620001e257620001e262000162565b601f19601f83011660200192915050565b60005b8381101562000210578181015183820152602001620001f6565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001c6565b620001a7565b9050828152602081018484840111156200025a576200025a600080fd5b62000267848285620001f3565b509392505050565b600082601f830112620002855762000285600080fd5b81516200029784826020860162000226565b949350505050565b60ff811662000146565b805162000135816200029f565b60008060008060808587031215620002d157620002d1600080fd5b6000620002df878762000155565b94505060208501516001600160401b03811115620003005762000300600080fd5b6200030e878288016200026f565b93505060408501516001600160401b038111156200032f576200032f600080fd5b6200033d878288016200026f565b92505060606200035087828801620002a9565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200038757607f821691505b602082108114156200039d576200039d6200035c565b50919050565b60805160a051610dca620003cd6000396000505060008181610191015261026a0152610dca6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806338d52e0f1161009757806395d89b411161006657806395d89b411461020f578063a457c2d714610217578063a9059cbb1461022a578063dd62ed3e1461023d57600080fd5b806338d52e0f1461018c57806339509351146101c057806342966c68146101d357806370a08231146101e657600080fd5b806318160ddd116100d357806318160ddd1461014d57806321e5383a1461015557806323b872dd1461016a578063313ce5671461017d57600080fd5b806301e1d114146100fa57806306fdde0314610118578063095ea7b31461012d575b600080fd5b610102610250565b60405161010f91906107d2565b60405180910390f35b6101206102f4565b60405161010f919061083e565b61014061013b366004610897565b610386565b60405161010f91906108dc565b600254610102565b610168610163366004610897565b6103a0565b005b6101406101783660046108ea565b6103ae565b601260405161010f9190610943565b6101b37f000000000000000000000000000000000000000000000000000000000000000081565b60405161010f919061095a565b6101406101ce366004610897565b6103d2565b6101686101e1366004610968565b6103f4565b6101026101f4366004610991565b6001600160a01b031660009081526020819052604090205490565b610120610401565b610140610225366004610897565b610410565b610140610238366004610897565b610456565b61010261024b3660046109b2565b610464565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061029f90309060040161095a565b60206040518083038186803b1580156102b757600080fd5b505afa1580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef91906109f0565b905090565b60606003805461030390610a27565b80601f016020809104026020016040519081016040528092919081815260200182805461032f90610a27565b801561037c5780601f106103515761010080835404028352916020019161037c565b820191906000526020600020905b81548152906001019060200180831161035f57829003601f168201915b5050505050905090565b60003361039481858561048f565b60019150505b92915050565b6103aa8282610543565b5050565b6000336103bc8582856105d9565b6103c7858585610623565b506001949350505050565b6000336103948185856103e58383610464565b6103ef9190610a6a565b61048f565b6103fe3382610713565b50565b60606004805461030390610a27565b6000338161041e8286610464565b9050838110156104495760405162461bcd60e51b815260040161044090610ac7565b60405180910390fd5b6103c7828686840361048f565b600033610394818585610623565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104b55760405162461bcd60e51b815260040161044090610b18565b6001600160a01b0382166104db5760405162461bcd60e51b815260040161044090610b67565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105369085906107d2565b60405180910390a3505050565b6001600160a01b0382166105695760405162461bcd60e51b815260040161044090610bae565b806002600082825461057b9190610a6a565b90915550506001600160a01b038216600081815260208190526040808220805485019055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105cd9085906107d2565b60405180910390a35050565b60006105e58484610464565b9050600019811461061d57818110156106105760405162461bcd60e51b815260040161044090610bf2565b61061d848484840361048f565b50505050565b6001600160a01b0383166106495760405162461bcd60e51b815260040161044090610c44565b6001600160a01b03821661066f5760405162461bcd60e51b815260040161044090610c94565b6001600160a01b038316600090815260208190526040902054818110156106a85760405162461bcd60e51b815260040161044090610ce7565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107069086906107d2565b60405180910390a361061d565b6001600160a01b0382166107395760405162461bcd60e51b815260040161044090610d35565b6001600160a01b038216600090815260208190526040902054818110156107725760405162461bcd60e51b815260040161044090610d84565b6001600160a01b0383166000818152602081905260408082208585039055600280548690039055519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105369086906107d2565b805b82525050565b6020810161039a82846107ca565b60005b838110156107fb5781810151838201526020016107e3565b8381111561061d5750506000910152565b6000610816825190565b80845260208401935061082d8185602086016107e0565b601f01601f19169290920192915050565b6020808252810161084f818461080c565b9392505050565b60006001600160a01b03821661039a565b61087081610856565b81146103fe57600080fd5b803561039a81610867565b80610870565b803561039a81610886565b600080604083850312156108ad576108ad600080fd5b60006108b9858561087b565b92505060206108ca8582860161088c565b9150509250929050565b8015156107cc565b6020810161039a82846108d4565b60008060006060848603121561090257610902600080fd5b600061090e868661087b565b935050602061091f8682870161087b565b92505060406109308682870161088c565b9150509250925092565b60ff81166107cc565b6020810161039a828461093a565b6107cc81610856565b6020810161039a8284610951565b60006020828403121561097d5761097d600080fd5b6000610989848461088c565b949350505050565b6000602082840312156109a6576109a6600080fd5b6000610989848461087b565b600080604083850312156109c8576109c8600080fd5b60006109d4858561087b565b92505060206108ca8582860161087b565b805161039a81610886565b600060208284031215610a0557610a05600080fd5b600061098984846109e5565b634e487b7160e01b600052602260045260246000fd5b600281046001821680610a3b57607f821691505b60208210811415610a4e57610a4e610a11565b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610a7d57610a7d610a54565b500190565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b602082015291505b5060400190565b6020808252810161039a81610a82565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b60208201529150610ac0565b6020808252810161039a81610ad7565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b60208201529150610ac0565b6020808252810161039a81610b28565b601f81526000602082017f45524332303a206d696e7420746f20746865207a65726f206164647265737300815291505b5060200190565b6020808252810161039a81610b77565b601d81526000602082017f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000081529150610ba7565b6020808252810161039a81610bbe565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b60208201529150610ac0565b6020808252810161039a81610c02565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b60208201529150610ac0565b6020808252810161039a81610c54565b602681526000602082017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b60208201529150610ac0565b6020808252810161039a81610ca4565b602181526000602082017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b60208201529150610ac0565b6020808252810161039a81610cf7565b602281526000602082017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e815261636560f01b60208201529150610ac0565b6020808252810161039a81610d4556fea26469706673582212200e6f6a7ceb922086f5c9da16db619ec511defc5311f930e5c62e3f6b9c9894aa64736f6c63430008090033";

type CustomTestVaultTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CustomTestVaultTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CustomTestVaultToken__factory extends ContractFactory {
  constructor(...args: CustomTestVaultTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    asset_: string,
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<CustomTestVaultToken> {
    return super.deploy(
      asset_,
      name_,
      symbol_,
      decimals_,
      overrides || {}
    ) as Promise<CustomTestVaultToken>;
  }
  override getDeployTransaction(
    asset_: string,
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      asset_,
      name_,
      symbol_,
      decimals_,
      overrides || {}
    );
  }
  override attach(address: string): CustomTestVaultToken {
    return super.attach(address) as CustomTestVaultToken;
  }
  override connect(signer: Signer): CustomTestVaultToken__factory {
    return super.connect(signer) as CustomTestVaultToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomTestVaultTokenInterface {
    return new utils.Interface(_abi) as CustomTestVaultTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CustomTestVaultToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CustomTestVaultToken;
  }
}
