/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestDolomiteMarginExchangeWrapper,
  TestDolomiteMarginExchangeWrapperInterface,
} from "../../../contracts/test/TestDolomiteMarginExchangeWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dolomiteMargin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DOLOMITE_MARGIN",
    outputs: [
      {
        internalType: "contract IDolomiteMargin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_orderData",
        type: "bytes",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_orderData",
        type: "bytes",
      },
    ],
    name: "getExchangeCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type TestDolomiteMarginExchangeWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestDolomiteMarginExchangeWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestDolomiteMarginExchangeWrapper__factory extends ContractFactory {
  constructor(...args: TestDolomiteMarginExchangeWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _dolomiteMargin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<TestDolomiteMarginExchangeWrapper> {
    return super.deploy(
      _dolomiteMargin,
      overrides || {}
    ) as Promise<TestDolomiteMarginExchangeWrapper>;
  }
  override getDeployTransaction(
    _dolomiteMargin: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_dolomiteMargin, overrides || {});
  }
  override attach(address: string): TestDolomiteMarginExchangeWrapper {
    return super.attach(address) as TestDolomiteMarginExchangeWrapper;
  }
  override connect(signer: Signer): TestDolomiteMarginExchangeWrapper__factory {
    return super.connect(signer) as TestDolomiteMarginExchangeWrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDolomiteMarginExchangeWrapperInterface {
    return new utils.Interface(
      _abi
    ) as TestDolomiteMarginExchangeWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDolomiteMarginExchangeWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestDolomiteMarginExchangeWrapper;
  }
}
