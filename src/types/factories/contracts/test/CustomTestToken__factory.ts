/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CustomTestToken,
  CustomTestTokenInterface,
} from "../../../contracts/test/CustomTestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "addBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000fea38038062000fea83398101604081905262000034916200027e565b8251839083906200004d90600390602085019062000075565b5080516200006390600490602084019062000075565b50505060ff1660805250620003549050565b828054620000839062000323565b90600052602060002090601f016020900481019282620000a75760008555620000f2565b82601f10620000c257805160ff1916838001178555620000f2565b82800160010185558215620000f2579182015b82811115620000f2578251825591602001919060010190620000d5565b506200010092915062000104565b5090565b5b8082111562000100576000815560010162000105565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156200015957620001596200011b565b6040525050565b60006200016c60405190565b90506200017a828262000131565b919050565b60006001600160401b038211156200019b576200019b6200011b565b601f19601f83011660200192915050565b60005b83811015620001c9578181015183820152602001620001af565b83811115620001d9576000848401525b50505050565b6000620001f6620001f0846200017f565b62000160565b905082815260208101848484011115620002135762000213600080fd5b62000220848285620001ac565b509392505050565b600082601f8301126200023e576200023e600080fd5b815162000250848260208601620001df565b949350505050565b60ff811681146200026857600080fd5b50565b8051620002788162000258565b92915050565b600080600060608486031215620002985762000298600080fd5b83516001600160401b03811115620002b357620002b3600080fd5b620002c18682870162000228565b93505060208401516001600160401b03811115620002e257620002e2600080fd5b620002f08682870162000228565b925050604062000303868287016200026b565b9150509250925092565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200033857607f821691505b602082108114156200034e576200034e6200030d565b50919050565b608051610c7d6200036d60003960005050610c7d6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101a9578063a457c2d7146101b1578063a9059cbb146101c4578063dd62ed3e146101d757600080fd5b8063395093511461015a57806342966c681461016d57806370a082311461018057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011257806321e5383a1461012357806323b872dd14610138578063313ce5671461014b575b600080fd5b6100dc6101ea565b6040516100e9919061071e565b60405180910390f35b610105610100366004610777565b61027c565b6040516100e991906107be565b6002545b6040516100e991906107d2565b610136610131366004610777565b610296565b005b6101056101463660046107e0565b6102a4565b60126040516100e99190610839565b610105610168366004610777565b6102c8565b61013661017b366004610847565b6102ea565b61011661018e366004610870565b6001600160a01b031660009081526020819052604090205490565b6100dc6102f7565b6101056101bf366004610777565b610306565b6101056101d2366004610777565b61034c565b6101166101e5366004610891565b61035a565b6060600380546101f9906108da565b80601f0160208091040260200160405190810160405280929190818152602001828054610225906108da565b80156102725780601f1061024757610100808354040283529160200191610272565b820191906000526020600020905b81548152906001019060200180831161025557829003601f168201915b5050505050905090565b60003361028a818585610385565b60019150505b92915050565b6102a08282610439565b5050565b6000336102b28582856104cf565b6102bd858585610519565b506001949350505050565b60003361028a8185856102db838361035a565b6102e5919061091d565b610385565b6102f43382610609565b50565b6060600480546101f9906108da565b60003381610314828661035a565b90508381101561033f5760405162461bcd60e51b81526004016103369061097a565b60405180910390fd5b6102bd8286868403610385565b60003361028a818585610519565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ab5760405162461bcd60e51b8152600401610336906109cb565b6001600160a01b0382166103d15760405162461bcd60e51b815260040161033690610a1a565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061042c9085906107d2565b60405180910390a3505050565b6001600160a01b03821661045f5760405162461bcd60e51b815260040161033690610a61565b8060026000828254610471919061091d565b90915550506001600160a01b038216600081815260208190526040808220805485019055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104c39085906107d2565b60405180910390a35050565b60006104db848461035a565b9050600019811461051357818110156105065760405162461bcd60e51b815260040161033690610aa5565b6105138484848403610385565b50505050565b6001600160a01b03831661053f5760405162461bcd60e51b815260040161033690610af7565b6001600160a01b0382166105655760405162461bcd60e51b815260040161033690610b47565b6001600160a01b0383166000908152602081905260409020548181101561059e5760405162461bcd60e51b815260040161033690610b9a565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105fc9086906107d2565b60405180910390a3610513565b6001600160a01b03821661062f5760405162461bcd60e51b815260040161033690610be8565b6001600160a01b038216600090815260208190526040902054818110156106685760405162461bcd60e51b815260040161033690610c37565b6001600160a01b0383166000818152602081905260408082208585039055600280548690039055519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061042c9086906107d2565b60005b838110156106db5781810151838201526020016106c3565b838111156105135750506000910152565b60006106f6825190565b80845260208401935061070d8185602086016106c0565b601f01601f19169290920192915050565b6020808252810161072f81846106ec565b9392505050565b60006001600160a01b038216610290565b61075081610736565b81146102f457600080fd5b803561029081610747565b80610750565b803561029081610766565b6000806040838503121561078d5761078d600080fd5b6000610799858561075b565b92505060206107aa8582860161076c565b9150509250929050565b8015155b82525050565b6020810161029082846107b4565b806107b8565b6020810161029082846107cc565b6000806000606084860312156107f8576107f8600080fd5b6000610804868661075b565b93505060206108158682870161075b565b92505060406108268682870161076c565b9150509250925092565b60ff81166107b8565b602081016102908284610830565b60006020828403121561085c5761085c600080fd5b6000610868848461076c565b949350505050565b60006020828403121561088557610885600080fd5b6000610868848461075b565b600080604083850312156108a7576108a7600080fd5b60006108b3858561075b565b92505060206107aa8582860161075b565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806108ee57607f821691505b60208210811415610901576109016108c4565b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561093057610930610907565b500190565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b602082015291505b5060400190565b6020808252810161029081610935565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b60208201529150610973565b602080825281016102908161098a565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b60208201529150610973565b60208082528101610290816109db565b601f81526000602082017f45524332303a206d696e7420746f20746865207a65726f206164647265737300815291505b5060200190565b6020808252810161029081610a2a565b601d81526000602082017f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000081529150610a5a565b6020808252810161029081610a71565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b60208201529150610973565b6020808252810161029081610ab5565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b60208201529150610973565b6020808252810161029081610b07565b602681526000602082017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b60208201529150610973565b6020808252810161029081610b57565b602181526000602082017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b60208201529150610973565b6020808252810161029081610baa565b602281526000602082017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e815261636560f01b60208201529150610973565b6020808252810161029081610bf856fea2646970667358221220eb51b6ee9e1c918c9f192bf7ef7cc2483092ebdf002222609c438b50424a67fe64736f6c63430008090033";

type CustomTestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CustomTestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CustomTestToken__factory extends ContractFactory {
  constructor(...args: CustomTestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<CustomTestToken> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    ) as Promise<CustomTestToken>;
  }
  override getDeployTransaction(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    );
  }
  override attach(address: string): CustomTestToken {
    return super.attach(address) as CustomTestToken;
  }
  override connect(signer: Signer): CustomTestToken__factory {
    return super.connect(signer) as CustomTestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomTestTokenInterface {
    return new utils.Interface(_abi) as CustomTestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CustomTestToken {
    return new Contract(address, _abi, signerOrProvider) as CustomTestToken;
  }
}
