/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestChainlinkAggregator,
  TestChainlinkAggregatorInterface,
} from "../../../contracts/test/TestChainlinkAggregator";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "aggregator",
    outputs: [
      {
        internalType: "contract IChainlinkAccessControlAggregator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxAnswer",
    outputs: [
      {
        internalType: "int192",
        name: "",
        type: "int192",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minAnswer",
    outputs: [
      {
        internalType: "int192",
        name: "",
        type: "int192",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "__decimals",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "__latestAnswer",
        type: "int256",
      },
    ],
    name: "setLatestAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int192",
        name: "__maxAnswer",
        type: "int192",
      },
    ],
    name: "setMaxAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int192",
        name: "__minAnswer",
        type: "int192",
      },
    ],
    name: "setMinAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600280546001600160c01b0319908116600117909155600380549091166001600160b01b0317905561041b806100486000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370da2f671161006657806370da2f67146101315780637284e4161461013c5780637a1395aa14610168578063eada48f014610196578063feaf968c146101c657600080fd5b806304ea97b0146100a357806322adbc78146100bc578063245a7bfc146100d9578063313ce567146100e75780636551453014610101575b600080fd5b6100ba6100b1366004610200565b60005542600155565b005b60025460170b5b6040516100d09190610239565b60405180910390f35b306040516100d09190610277565b600354600160c01b900460ff166040516100d0919061028e565b6100ba61010f3660046102b1565b600380546001600160c01b0319166001600160c01b0392909216919091179055565b60035460170b6100c3565b604080518082018252600a81526915195cdd080bc81554d160b21b602082015290516100d09190610334565b6100ba610176366004610360565b6003805460ff909216600160c01b0260ff60c01b19909216919091179055565b6100ba6101a43660046102b1565b600280546001600160c01b0319166001600160c01b0392909216919091179055565b600080546001546040516100d093929183918290610399565b805b81146101ec57600080fd5b50565b80356101fa816101df565b92915050565b60006020828403121561021557610215600080fd5b600061022184846101ef565b949350505050565b6102338160170b90565b82525050565b602081016101fa8284610229565b60006001600160a01b0382166101fa565b60006101fa82610247565b60006101fa82610258565b61023381610263565b602081016101fa828461026e565b60ff8116610233565b602081016101fa8284610285565b6101e18160170b90565b80356101fa8161029c565b6000602082840312156102c6576102c6600080fd5b600061022184846102a6565b60005b838110156102ed5781810151838201526020016102d5565b838111156102fc576000848401525b50505050565b600061030c825190565b8084526020840193506103238185602086016102d2565b601f01601f19169290920192915050565b602080825281016103458184610302565b9392505050565b60ff81166101e1565b80356101fa8161034c565b60006020828403121561037557610375600080fd5b60006102218484610355565b69ffffffffffffffffffff8116610233565b80610233565b60a081016103a78288610381565b6103b46020830187610393565b6103c16040830186610393565b6103ce6060830185610393565b6103db6080830184610381565b969550505050505056fea26469706673582212207dbdd30b8adb7be1e1b2f2804ce97e546c64bb782d4592d5eea3a724acadb2d364736f6c63430008090033";

type TestChainlinkAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestChainlinkAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestChainlinkAggregator__factory extends ContractFactory {
  constructor(...args: TestChainlinkAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestChainlinkAggregator> {
    return super.deploy(overrides || {}) as Promise<TestChainlinkAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestChainlinkAggregator {
    return super.attach(address) as TestChainlinkAggregator;
  }
  override connect(signer: Signer): TestChainlinkAggregator__factory {
    return super.connect(signer) as TestChainlinkAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestChainlinkAggregatorInterface {
    return new utils.Interface(_abi) as TestChainlinkAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestChainlinkAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestChainlinkAggregator;
  }
}
