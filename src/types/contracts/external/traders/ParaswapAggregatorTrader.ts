/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ParaswapAggregatorTraderInterface extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "PARASWAP_AUGUSTUS_ROUTER()": FunctionFragment;
    "PARASWAP_TRANSFER_PROXY()": FunctionFragment;
    "exchange(address,address,address,address,uint256,bytes)": FunctionFragment;
    "getExchangeCost(address,address,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "PARASWAP_AUGUSTUS_ROUTER"
      | "PARASWAP_TRANSFER_PROXY"
      | "exchange"
      | "getExchangeCost"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARASWAP_AUGUSTUS_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARASWAP_TRANSFER_PROXY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [string, string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeCost",
    values: [string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARASWAP_AUGUSTUS_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARASWAP_TRANSFER_PROXY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeCost",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ParaswapAggregatorTrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ParaswapAggregatorTraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    PARASWAP_AUGUSTUS_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    PARASWAP_TRANSFER_PROXY(overrides?: CallOverrides): Promise<[string]>;

    exchange(
      arg0: string,
      _receiver: string,
      _outputToken: string,
      _inputToken: string,
      _inputAmount: BigNumberish,
      _minAmountOutAndOrderData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getExchangeCost(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  PARASWAP_AUGUSTUS_ROUTER(overrides?: CallOverrides): Promise<string>;

  PARASWAP_TRANSFER_PROXY(overrides?: CallOverrides): Promise<string>;

  exchange(
    arg0: string,
    _receiver: string,
    _outputToken: string,
    _inputToken: string,
    _inputAmount: BigNumberish,
    _minAmountOutAndOrderData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getExchangeCost(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    PARASWAP_AUGUSTUS_ROUTER(overrides?: CallOverrides): Promise<string>;

    PARASWAP_TRANSFER_PROXY(overrides?: CallOverrides): Promise<string>;

    exchange(
      arg0: string,
      _receiver: string,
      _outputToken: string,
      _inputToken: string,
      _inputAmount: BigNumberish,
      _minAmountOutAndOrderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangeCost(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    PARASWAP_AUGUSTUS_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    PARASWAP_TRANSFER_PROXY(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(
      arg0: string,
      _receiver: string,
      _outputToken: string,
      _inputToken: string,
      _inputAmount: BigNumberish,
      _minAmountOutAndOrderData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getExchangeCost(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PARASWAP_AUGUSTUS_ROUTER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PARASWAP_TRANSFER_PROXY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      arg0: string,
      _receiver: string,
      _outputToken: string,
      _inputToken: string,
      _inputAmount: BigNumberish,
      _minAmountOutAndOrderData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getExchangeCost(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
