/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IIsolationModeVaultFactory {
  export type QueuedTransferStruct = {
    from: string;
    to: string;
    amount: BigNumberish;
    vault: string;
    isExecuted: boolean;
  };

  export type QueuedTransferStructOutput = [
    string,
    string,
    BigNumber,
    string,
    boolean
  ] & {
    from: string;
    to: string;
    amount: BigNumber;
    vault: string;
    isExecuted: boolean;
  };
}

export interface PendlePtIsolationModeVaultFactoryInterface
  extends utils.Interface {
  functions: {
    "BORROW_POSITION_PROXY()": FunctionFragment;
    "DOLOMITE_MARGIN()": FunctionFragment;
    "UNDERLYING_TOKEN()": FunctionFragment;
    "allowableCollateralMarketIds()": FunctionFragment;
    "allowableDebtMarketIds()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculateVaultByAccount(address)": FunctionFragment;
    "createVault(address)": FunctionFragment;
    "createVaultAndDepositIntoDolomiteMargin(uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "depositIntoDolomiteMargin(uint256,uint256)": FunctionFragment;
    "depositOtherTokenIntoDolomiteMarginForVaultOwner(uint256,uint256,uint256)": FunctionFragment;
    "enqueueTransferFromDolomiteMargin(address,uint256)": FunctionFragment;
    "enqueueTransferIntoDolomiteMargin(address,uint256)": FunctionFragment;
    "getAccountByVault(address)": FunctionFragment;
    "getProxyVaultInitCodeHash()": FunctionFragment;
    "getQueuedTransferByCursor(uint256)": FunctionFragment;
    "getVaultByAccount(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isIsolationAsset()": FunctionFragment;
    "isTokenConverterTrusted(address)": FunctionFragment;
    "marketId()": FunctionFragment;
    "name()": FunctionFragment;
    "ownerInitialize(address[])": FunctionFragment;
    "ownerSetIsTokenConverterTrusted(address,bool)": FunctionFragment;
    "ownerSetPendleRegistry(address)": FunctionFragment;
    "ownerSetUserVaultImplementation(address)": FunctionFragment;
    "pendleRegistry()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferCursor()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "userVaultImplementation()": FunctionFragment;
    "withdrawFromDolomiteMargin(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BORROW_POSITION_PROXY"
      | "DOLOMITE_MARGIN"
      | "UNDERLYING_TOKEN"
      | "allowableCollateralMarketIds"
      | "allowableDebtMarketIds"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "calculateVaultByAccount"
      | "createVault"
      | "createVaultAndDepositIntoDolomiteMargin"
      | "decimals"
      | "depositIntoDolomiteMargin"
      | "depositOtherTokenIntoDolomiteMarginForVaultOwner"
      | "enqueueTransferFromDolomiteMargin"
      | "enqueueTransferIntoDolomiteMargin"
      | "getAccountByVault"
      | "getProxyVaultInitCodeHash"
      | "getQueuedTransferByCursor"
      | "getVaultByAccount"
      | "isInitialized"
      | "isIsolationAsset"
      | "isTokenConverterTrusted"
      | "marketId"
      | "name"
      | "ownerInitialize"
      | "ownerSetIsTokenConverterTrusted"
      | "ownerSetPendleRegistry"
      | "ownerSetUserVaultImplementation"
      | "pendleRegistry"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferCursor"
      | "transferFrom"
      | "userVaultImplementation"
      | "withdrawFromDolomiteMargin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BORROW_POSITION_PROXY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNDERLYING_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowableCollateralMarketIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowableDebtMarketIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateVaultByAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "createVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createVaultAndDepositIntoDolomiteMargin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositIntoDolomiteMargin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOtherTokenIntoDolomiteMarginForVaultOwner",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enqueueTransferFromDolomiteMargin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enqueueTransferIntoDolomiteMargin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountByVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyVaultInitCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedTransferByCursor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIsolationAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenConverterTrusted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "marketId", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerInitialize",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetIsTokenConverterTrusted",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPendleRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetUserVaultImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendleRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCursor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userVaultImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromDolomiteMargin",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BORROW_POSITION_PROXY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNDERLYING_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowableCollateralMarketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowableDebtMarketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateVaultByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVaultAndDepositIntoDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositIntoDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOtherTokenIntoDolomiteMarginForVaultOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enqueueTransferFromDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enqueueTransferIntoDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountByVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyVaultInitCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedTransferByCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIsolationAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenConverterTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetIsTokenConverterTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPendleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetUserVaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromDolomiteMargin",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Initialized()": EventFragment;
    "PendleRegistrySet(address)": EventFragment;
    "TokenConverterSet(address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferQueued(uint256,address,address,uint256,address)": EventFragment;
    "UserVaultImplementationSet(address,address)": EventFragment;
    "VaultCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendleRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenConverterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserVaultImplementationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface InitializedEventObject {}
export type InitializedEvent = TypedEvent<[], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PendleRegistrySetEventObject {
  _pendleRETHRegistry: string;
}
export type PendleRegistrySetEvent = TypedEvent<
  [string],
  PendleRegistrySetEventObject
>;

export type PendleRegistrySetEventFilter =
  TypedEventFilter<PendleRegistrySetEvent>;

export interface TokenConverterSetEventObject {
  tokenConverter: string;
  isTrusted: boolean;
}
export type TokenConverterSetEvent = TypedEvent<
  [string, boolean],
  TokenConverterSetEventObject
>;

export type TokenConverterSetEventFilter =
  TypedEventFilter<TokenConverterSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferQueuedEventObject {
  transferCursor: BigNumber;
  from: string;
  to: string;
  amountWei: BigNumber;
  vault: string;
}
export type TransferQueuedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  TransferQueuedEventObject
>;

export type TransferQueuedEventFilter = TypedEventFilter<TransferQueuedEvent>;

export interface UserVaultImplementationSetEventObject {
  previousUserVaultImplementation: string;
  newUserVaultImplementation: string;
}
export type UserVaultImplementationSetEvent = TypedEvent<
  [string, string],
  UserVaultImplementationSetEventObject
>;

export type UserVaultImplementationSetEventFilter =
  TypedEventFilter<UserVaultImplementationSetEvent>;

export interface VaultCreatedEventObject {
  account: string;
  vault: string;
}
export type VaultCreatedEvent = TypedEvent<
  [string, string],
  VaultCreatedEventObject
>;

export type VaultCreatedEventFilter = TypedEventFilter<VaultCreatedEvent>;

export interface PendlePtIsolationModeVaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PendlePtIsolationModeVaultFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    allowableCollateralMarketIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _vault: string }>;

    createVault(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    depositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: BigNumberish,
      _otherMarketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enqueueTransferFromDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enqueueTransferIntoDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _account: string }>;

    getProxyVaultInitCodeHash(overrides?: CallOverrides): Promise<[string]>;

    getQueuedTransferByCursor(
      _transferCursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IIsolationModeVaultFactory.QueuedTransferStructOutput]>;

    getVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _vault: string }>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isIsolationAsset(overrides?: CallOverrides): Promise<[boolean]>;

    isTokenConverterTrusted(
      _tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketId(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerInitialize(
      _tokenConverters: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetIsTokenConverterTrusted(
      _tokenConverter: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetPendleRegistry(
      _pendleRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetUserVaultImplementation(
      _userVaultImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pendleRegistry(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferCursor(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userVaultImplementation(overrides?: CallOverrides): Promise<[string]>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<string>;

  allowableCollateralMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  calculateVaultByAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  createVault(
    _account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createVaultAndDepositIntoDolomiteMargin(
    _toAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  depositIntoDolomiteMargin(
    _toAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositOtherTokenIntoDolomiteMarginForVaultOwner(
    _toAccountNumber: BigNumberish,
    _otherMarketId: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enqueueTransferFromDolomiteMargin(
    _vault: string,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enqueueTransferIntoDolomiteMargin(
    _vault: string,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAccountByVault(_vault: string, overrides?: CallOverrides): Promise<string>;

  getProxyVaultInitCodeHash(overrides?: CallOverrides): Promise<string>;

  getQueuedTransferByCursor(
    _transferCursor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IIsolationModeVaultFactory.QueuedTransferStructOutput>;

  getVaultByAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isIsolationAsset(overrides?: CallOverrides): Promise<boolean>;

  isTokenConverterTrusted(
    _tokenConverter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketId(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerInitialize(
    _tokenConverters: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetIsTokenConverterTrusted(
    _tokenConverter: string,
    _isTrusted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetPendleRegistry(
    _pendleRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetUserVaultImplementation(
    _userVaultImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pendleRegistry(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferCursor(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userVaultImplementation(overrides?: CallOverrides): Promise<string>;

  withdrawFromDolomiteMargin(
    _fromAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<string>;

    allowableCollateralMarketIds(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createVault(_account: string, overrides?: CallOverrides): Promise<string>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    depositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: BigNumberish,
      _otherMarketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enqueueTransferFromDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enqueueTransferIntoDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getProxyVaultInitCodeHash(overrides?: CallOverrides): Promise<string>;

    getQueuedTransferByCursor(
      _transferCursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IIsolationModeVaultFactory.QueuedTransferStructOutput>;

    getVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isIsolationAsset(overrides?: CallOverrides): Promise<boolean>;

    isTokenConverterTrusted(
      _tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketId(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerInitialize(
      _tokenConverters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetIsTokenConverterTrusted(
      _tokenConverter: string,
      _isTrusted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetPendleRegistry(
      _pendleRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetUserVaultImplementation(
      _userVaultImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pendleRegistry(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferCursor(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userVaultImplementation(overrides?: CallOverrides): Promise<string>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Initialized()"(): InitializedEventFilter;
    Initialized(): InitializedEventFilter;

    "PendleRegistrySet(address)"(
      _pendleRETHRegistry?: null
    ): PendleRegistrySetEventFilter;
    PendleRegistrySet(_pendleRETHRegistry?: null): PendleRegistrySetEventFilter;

    "TokenConverterSet(address,bool)"(
      tokenConverter?: string | null,
      isTrusted?: null
    ): TokenConverterSetEventFilter;
    TokenConverterSet(
      tokenConverter?: string | null,
      isTrusted?: null
    ): TokenConverterSetEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "TransferQueued(uint256,address,address,uint256,address)"(
      transferCursor?: BigNumberish | null,
      from?: null,
      to?: null,
      amountWei?: null,
      vault?: null
    ): TransferQueuedEventFilter;
    TransferQueued(
      transferCursor?: BigNumberish | null,
      from?: null,
      to?: null,
      amountWei?: null,
      vault?: null
    ): TransferQueuedEventFilter;

    "UserVaultImplementationSet(address,address)"(
      previousUserVaultImplementation?: string | null,
      newUserVaultImplementation?: string | null
    ): UserVaultImplementationSetEventFilter;
    UserVaultImplementationSet(
      previousUserVaultImplementation?: string | null,
      newUserVaultImplementation?: string | null
    ): UserVaultImplementationSetEventFilter;

    "VaultCreated(address,address)"(
      account?: string | null,
      vault?: null
    ): VaultCreatedEventFilter;
    VaultCreated(
      account?: string | null,
      vault?: null
    ): VaultCreatedEventFilter;
  };

  estimateGas: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    allowableCollateralMarketIds(overrides?: CallOverrides): Promise<BigNumber>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVault(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    depositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: BigNumberish,
      _otherMarketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enqueueTransferFromDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enqueueTransferIntoDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyVaultInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getQueuedTransferByCursor(
      _transferCursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isIsolationAsset(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenConverterTrusted(
      _tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketId(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerInitialize(
      _tokenConverters: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetIsTokenConverterTrusted(
      _tokenConverter: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetPendleRegistry(
      _pendleRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetUserVaultImplementation(
      _userVaultImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pendleRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferCursor(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userVaultImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROW_POSITION_PROXY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowableCollateralMarketIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowableDebtMarketIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVault(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositIntoDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: BigNumberish,
      _otherMarketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enqueueTransferFromDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enqueueTransferIntoDolomiteMargin(
      _vault: string,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAccountByVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyVaultInitCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueuedTransferByCursor(
      _transferCursor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultByAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isIsolationAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTokenConverterTrusted(
      _tokenConverter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerInitialize(
      _tokenConverters: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetIsTokenConverterTrusted(
      _tokenConverter: string,
      _isTrusted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetPendleRegistry(
      _pendleRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetUserVaultImplementation(
      _userVaultImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pendleRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferCursor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userVaultImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
