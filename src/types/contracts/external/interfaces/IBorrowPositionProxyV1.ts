/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IBorrowPositionProxyV1Interface extends utils.Interface {
  functions: {
    "closeBorrowPosition(uint256,uint256,uint256[])": FunctionFragment;
    "openBorrowPosition(uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "repayAllForBorrowPosition(uint256,uint256,uint256,uint8)": FunctionFragment;
    "transferBetweenAccounts(uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "closeBorrowPosition"
      | "openBorrowPosition"
      | "repayAllForBorrowPosition"
      | "transferBetweenAccounts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeBorrowPosition",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "openBorrowPosition",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAllForBorrowPosition",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBetweenAccounts",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeBorrowPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openBorrowPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAllForBorrowPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBetweenAccounts",
    data: BytesLike
  ): Result;

  events: {
    "BorrowPositionOpen(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowPositionOpen"): EventFragment;
}

export interface BorrowPositionOpenEventObject {
  _borrower: string;
  _borrowAccountNumber: BigNumber;
}
export type BorrowPositionOpenEvent = TypedEvent<
  [string, BigNumber],
  BorrowPositionOpenEventObject
>;

export type BorrowPositionOpenEventFilter =
  TypedEventFilter<BorrowPositionOpenEvent>;

export interface IBorrowPositionProxyV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBorrowPositionProxyV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeBorrowPosition(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _collateralMarketIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    openBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _collateralMarketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayAllForBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferBetweenAccounts(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  closeBorrowPosition(
    _borrowAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    _collateralMarketIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  openBorrowPosition(
    _fromAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    _collateralMarketId: BigNumberish,
    _amountWei: BigNumberish,
    _balanceCheckFlag: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayAllForBorrowPosition(
    _fromAccountNumber: BigNumberish,
    _borrowAccountNumber: BigNumberish,
    _marketId: BigNumberish,
    _balanceCheckFlag: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferBetweenAccounts(
    _fromAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    _marketId: BigNumberish,
    _amountWei: BigNumberish,
    _balanceCheckFlag: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    closeBorrowPosition(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _collateralMarketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    openBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _collateralMarketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayAllForBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferBetweenAccounts(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BorrowPositionOpen(address,uint256)"(
      _borrower?: string | null,
      _borrowAccountNumber?: BigNumberish | null
    ): BorrowPositionOpenEventFilter;
    BorrowPositionOpen(
      _borrower?: string | null,
      _borrowAccountNumber?: BigNumberish | null
    ): BorrowPositionOpenEventFilter;
  };

  estimateGas: {
    closeBorrowPosition(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _collateralMarketIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    openBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _collateralMarketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayAllForBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferBetweenAccounts(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeBorrowPosition(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _collateralMarketIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    openBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _collateralMarketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayAllForBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferBetweenAccounts(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
