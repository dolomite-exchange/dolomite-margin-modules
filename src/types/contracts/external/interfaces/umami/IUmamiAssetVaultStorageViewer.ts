/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IUmamiAssetVaultStorageViewer {
  export type VaultFeesStruct = {
    performanceFee: BigNumberish;
    managementFee: BigNumberish;
    withdrawalFee: BigNumberish;
    depositFee: BigNumberish;
    timelockBoostAmount: BigNumberish;
  };

  export type VaultFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    performanceFee: BigNumber;
    managementFee: BigNumber;
    withdrawalFee: BigNumber;
    depositFee: BigNumber;
    timelockBoostAmount: BigNumber;
  };
}

export interface IUmamiAssetVaultStorageViewerInterface
  extends utils.Interface {
  functions: {
    "getFeeHelper()": FunctionFragment;
    "getVaultFees()": FunctionFragment;
    "getWhitelist()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getFeeHelper" | "getVaultFees" | "getWhitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFeeHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelist",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelist",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IUmamiAssetVaultStorageViewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUmamiAssetVaultStorageViewerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFeeHelper(overrides?: CallOverrides): Promise<[string]>;

    getVaultFees(
      overrides?: CallOverrides
    ): Promise<[IUmamiAssetVaultStorageViewer.VaultFeesStructOutput]>;

    getWhitelist(overrides?: CallOverrides): Promise<[string]>;
  };

  getFeeHelper(overrides?: CallOverrides): Promise<string>;

  getVaultFees(
    overrides?: CallOverrides
  ): Promise<IUmamiAssetVaultStorageViewer.VaultFeesStructOutput>;

  getWhitelist(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getFeeHelper(overrides?: CallOverrides): Promise<string>;

    getVaultFees(
      overrides?: CallOverrides
    ): Promise<IUmamiAssetVaultStorageViewer.VaultFeesStructOutput>;

    getWhitelist(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getFeeHelper(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultFees(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelist(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getFeeHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
