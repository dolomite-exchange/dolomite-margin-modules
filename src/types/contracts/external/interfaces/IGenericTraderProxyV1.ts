/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IGenericTraderBase {
  export type TraderParamStruct = {
    traderType: BigNumberish;
    makerAccountIndex: BigNumberish;
    trader: string;
    tradeData: BytesLike;
  };

  export type TraderParamStructOutput = [number, BigNumber, string, string] & {
    traderType: number;
    makerAccountIndex: BigNumber;
    trader: string;
    tradeData: string;
  };
}

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };
}

export declare namespace IGenericTraderProxyV1 {
  export type UserConfigStruct = {
    deadline: BigNumberish;
    balanceCheckFlag: BigNumberish;
    eventType: BigNumberish;
  };

  export type UserConfigStructOutput = [BigNumber, number, number] & {
    deadline: BigNumber;
    balanceCheckFlag: number;
    eventType: number;
  };

  export type TransferAmountStruct = {
    marketId: BigNumberish;
    amountWei: BigNumberish;
  };

  export type TransferAmountStructOutput = [BigNumber, BigNumber] & {
    marketId: BigNumber;
    amountWei: BigNumber;
  };

  export type TransferCollateralParamStruct = {
    fromAccountNumber: BigNumberish;
    toAccountNumber: BigNumberish;
    transferAmounts: IGenericTraderProxyV1.TransferAmountStruct[];
  };

  export type TransferCollateralParamStructOutput = [
    BigNumber,
    BigNumber,
    IGenericTraderProxyV1.TransferAmountStructOutput[]
  ] & {
    fromAccountNumber: BigNumber;
    toAccountNumber: BigNumber;
    transferAmounts: IGenericTraderProxyV1.TransferAmountStructOutput[];
  };

  export type ExpiryParamStruct = {
    marketId: BigNumberish;
    expiryTimeDelta: BigNumberish;
  };

  export type ExpiryParamStructOutput = [BigNumber, number] & {
    marketId: BigNumber;
    expiryTimeDelta: number;
  };
}

export interface IGenericTraderProxyV1Interface extends utils.Interface {
  functions: {
    "EXPIRY()": FunctionFragment;
    "ownerSetEventEmitterRegistry(address)": FunctionFragment;
    "swapExactInputForOutput(uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint8,uint8))": FunctionFragment;
    "swapExactInputForOutputAndModifyPosition(uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint256,(uint256,uint256)[]),(uint256,uint32),(uint256,uint8,uint8))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXPIRY"
      | "ownerSetEventEmitterRegistry"
      | "swapExactInputForOutput"
      | "swapExactInputForOutputAndModifyPosition"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EXPIRY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerSetEventEmitterRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInputForOutput",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      IGenericTraderBase.TraderParamStruct[],
      IDolomiteStructs.AccountInfoStruct[],
      IGenericTraderProxyV1.UserConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInputForOutputAndModifyPosition",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      IGenericTraderBase.TraderParamStruct[],
      IDolomiteStructs.AccountInfoStruct[],
      IGenericTraderProxyV1.TransferCollateralParamStruct,
      IGenericTraderProxyV1.ExpiryParamStruct,
      IGenericTraderProxyV1.UserConfigStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "EXPIRY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetEventEmitterRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInputForOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInputForOutputAndModifyPosition",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGenericTraderProxyV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGenericTraderProxyV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXPIRY(overrides?: CallOverrides): Promise<[string]>;

    ownerSetEventEmitterRegistry(
      _eventEmitterRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactInputForOutput(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactInputForOutputAndModifyPosition(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _transferCollateralParams: IGenericTraderProxyV1.TransferCollateralParamStruct,
      _expiryParams: IGenericTraderProxyV1.ExpiryParamStruct,
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  EXPIRY(overrides?: CallOverrides): Promise<string>;

  ownerSetEventEmitterRegistry(
    _eventEmitterRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactInputForOutput(
    _tradeAccountNumber: BigNumberish,
    _marketIdsPath: BigNumberish[],
    _inputAmountWei: BigNumberish,
    _minOutputAmountWei: BigNumberish,
    _tradersPath: IGenericTraderBase.TraderParamStruct[],
    _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
    _userConfig: IGenericTraderProxyV1.UserConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactInputForOutputAndModifyPosition(
    _tradeAccountNumber: BigNumberish,
    _marketIdsPath: BigNumberish[],
    _inputAmountWei: BigNumberish,
    _minOutputAmountWei: BigNumberish,
    _tradersPath: IGenericTraderBase.TraderParamStruct[],
    _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
    _transferCollateralParams: IGenericTraderProxyV1.TransferCollateralParamStruct,
    _expiryParams: IGenericTraderProxyV1.ExpiryParamStruct,
    _userConfig: IGenericTraderProxyV1.UserConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXPIRY(overrides?: CallOverrides): Promise<string>;

    ownerSetEventEmitterRegistry(
      _eventEmitterRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactInputForOutput(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactInputForOutputAndModifyPosition(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _transferCollateralParams: IGenericTraderProxyV1.TransferCollateralParamStruct,
      _expiryParams: IGenericTraderProxyV1.ExpiryParamStruct,
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    EXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetEventEmitterRegistry(
      _eventEmitterRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactInputForOutput(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactInputForOutputAndModifyPosition(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _transferCollateralParams: IGenericTraderProxyV1.TransferCollateralParamStruct,
      _expiryParams: IGenericTraderProxyV1.ExpiryParamStruct,
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXPIRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerSetEventEmitterRegistry(
      _eventEmitterRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutput(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutputAndModifyPosition(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _transferCollateralParams: IGenericTraderProxyV1.TransferCollateralParamStruct,
      _expiryParams: IGenericTraderProxyV1.ExpiryParamStruct,
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
