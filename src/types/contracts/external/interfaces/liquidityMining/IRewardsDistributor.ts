/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IRewardsDistributor {
  export type ClaimInfoStruct = {
    epoch: BigNumberish;
    amount: BigNumberish;
    proof: BytesLike[];
  };

  export type ClaimInfoStructOutput = [BigNumber, BigNumber, string[]] & {
    epoch: BigNumber;
    amount: BigNumber;
    proof: string[];
  };
}

export interface IRewardsDistributorInterface extends utils.Interface {
  functions: {
    "claim((uint256,uint256,bytes32[])[])": FunctionFragment;
    "getClaimStatusByUserAndEpoch(address,uint256)": FunctionFragment;
    "getMerkleRootByEpoch(uint256)": FunctionFragment;
    "handlerSetMerkleRoot(uint256,bytes32)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "oARB()": FunctionFragment;
    "ownerSetHandler(address,bool)": FunctionFragment;
    "ownerSetMerkleRoot(uint256,bytes32)": FunctionFragment;
    "ownerSetOARB(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "getClaimStatusByUserAndEpoch"
      | "getMerkleRootByEpoch"
      | "handlerSetMerkleRoot"
      | "isHandler"
      | "oARB"
      | "ownerSetHandler"
      | "ownerSetMerkleRoot"
      | "ownerSetOARB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [IRewardsDistributor.ClaimInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimStatusByUserAndEpoch",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRootByEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handlerSetMerkleRoot",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(functionFragment: "oARB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerSetHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMerkleRoot",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetOARB",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimStatusByUserAndEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRootByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerSetMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oARB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetOARB",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,uint256)": EventFragment;
    "HandlerSet(address,bool)": EventFragment;
    "MerkleRootSet(uint256,bytes32)": EventFragment;
    "OARBSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OARBSet"): EventFragment;
}

export interface ClaimedEventObject {
  user: string;
  epoch: BigNumber;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface HandlerSetEventObject {
  handler: string;
  isHandler: boolean;
}
export type HandlerSetEvent = TypedEvent<
  [string, boolean],
  HandlerSetEventObject
>;

export type HandlerSetEventFilter = TypedEventFilter<HandlerSetEvent>;

export interface MerkleRootSetEventObject {
  epoch: BigNumber;
  merkleRoot: string;
}
export type MerkleRootSetEvent = TypedEvent<
  [BigNumber, string],
  MerkleRootSetEventObject
>;

export type MerkleRootSetEventFilter = TypedEventFilter<MerkleRootSetEvent>;

export interface OARBSetEventObject {
  oARB: string;
}
export type OARBSetEvent = TypedEvent<[string], OARBSetEventObject>;

export type OARBSetEventFilter = TypedEventFilter<OARBSetEvent>;

export interface IRewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardsDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _claimInfo: IRewardsDistributor.ClaimInfoStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getClaimStatusByUserAndEpoch(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMerkleRootByEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handlerSetMerkleRoot(
      _epoch: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isHandler(_from: string, overrides?: CallOverrides): Promise<[boolean]>;

    oARB(overrides?: CallOverrides): Promise<[string]>;

    ownerSetHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetMerkleRoot(
      _epoch: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetOARB(
      _oARB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  claim(
    _claimInfo: IRewardsDistributor.ClaimInfoStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getClaimStatusByUserAndEpoch(
    _user: string,
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMerkleRootByEpoch(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  handlerSetMerkleRoot(
    _epoch: BigNumberish,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isHandler(_from: string, overrides?: CallOverrides): Promise<boolean>;

  oARB(overrides?: CallOverrides): Promise<string>;

  ownerSetHandler(
    _handler: string,
    _isHandler: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetMerkleRoot(
    _epoch: BigNumberish,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetOARB(
    _oARB: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      _claimInfo: IRewardsDistributor.ClaimInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimStatusByUserAndEpoch(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMerkleRootByEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    handlerSetMerkleRoot(
      _epoch: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isHandler(_from: string, overrides?: CallOverrides): Promise<boolean>;

    oARB(overrides?: CallOverrides): Promise<string>;

    ownerSetHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetMerkleRoot(
      _epoch: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetOARB(_oARB: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claimed(address,uint256,uint256)"(
      user?: string | null,
      epoch?: null,
      amount?: null
    ): ClaimedEventFilter;
    Claimed(
      user?: string | null,
      epoch?: null,
      amount?: null
    ): ClaimedEventFilter;

    "HandlerSet(address,bool)"(
      handler?: string | null,
      isHandler?: null
    ): HandlerSetEventFilter;
    HandlerSet(
      handler?: string | null,
      isHandler?: null
    ): HandlerSetEventFilter;

    "MerkleRootSet(uint256,bytes32)"(
      epoch?: null,
      merkleRoot?: null
    ): MerkleRootSetEventFilter;
    MerkleRootSet(epoch?: null, merkleRoot?: null): MerkleRootSetEventFilter;

    "OARBSet(address)"(oARB?: null): OARBSetEventFilter;
    OARBSet(oARB?: null): OARBSetEventFilter;
  };

  estimateGas: {
    claim(
      _claimInfo: IRewardsDistributor.ClaimInfoStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getClaimStatusByUserAndEpoch(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRootByEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handlerSetMerkleRoot(
      _epoch: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isHandler(_from: string, overrides?: CallOverrides): Promise<BigNumber>;

    oARB(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetMerkleRoot(
      _epoch: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetOARB(
      _oARB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _claimInfo: IRewardsDistributor.ClaimInfoStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getClaimStatusByUserAndEpoch(
      _user: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleRootByEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handlerSetMerkleRoot(
      _epoch: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isHandler(
      _from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oARB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerSetHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetMerkleRoot(
      _epoch: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetOARB(
      _oARB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
