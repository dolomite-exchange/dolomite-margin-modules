/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IVesterV1 {
  export type VestingPositionStruct = {
    creator: string;
    id: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    amount: BigNumberish;
  };

  export type VestingPositionStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    creator: string;
    id: BigNumber;
    startTime: BigNumber;
    duration: BigNumber;
    amount: BigNumber;
  };
}

export interface IVesterV1Interface extends utils.Interface {
  functions: {
    "availableArbTokens()": FunctionFragment;
    "baseURI()": FunctionFragment;
    "closePositionAndBuyTokens(uint256,uint256,uint256,uint256)": FunctionFragment;
    "closePositionWindow()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "emergencyWithdrawTax()": FunctionFragment;
    "forceClosePosition(uint256)": FunctionFragment;
    "forceClosePositionTax()": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "isVestingActive()": FunctionFragment;
    "oARB()": FunctionFragment;
    "ownerSetBaseURI(string)": FunctionFragment;
    "ownerSetClosePositionWindow(uint256)": FunctionFragment;
    "ownerSetEmergencyWithdrawTax(uint256)": FunctionFragment;
    "ownerSetForceClosePositionTax(uint256)": FunctionFragment;
    "ownerSetIsVestingActive(bool)": FunctionFragment;
    "ownerWithdrawArb(address,uint256,bool)": FunctionFragment;
    "promisedArbTokens()": FunctionFragment;
    "vest(uint256,uint256,uint256)": FunctionFragment;
    "vestingPositions(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "availableArbTokens"
      | "baseURI"
      | "closePositionAndBuyTokens"
      | "closePositionWindow"
      | "emergencyWithdraw"
      | "emergencyWithdrawTax"
      | "forceClosePosition"
      | "forceClosePositionTax"
      | "initialize"
      | "isVestingActive"
      | "oARB"
      | "ownerSetBaseURI"
      | "ownerSetClosePositionWindow"
      | "ownerSetEmergencyWithdrawTax"
      | "ownerSetForceClosePositionTax"
      | "ownerSetIsVestingActive"
      | "ownerWithdrawArb"
      | "promisedArbTokens"
      | "vest"
      | "vestingPositions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availableArbTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closePositionAndBuyTokens",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceClosePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClosePositionTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVestingActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oARB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerSetBaseURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetClosePositionWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetEmergencyWithdrawTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetForceClosePositionTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetIsVestingActive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawArb",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "promisedArbTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPositions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableArbTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePositionAndBuyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceClosePositionTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVestingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oARB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetClosePositionWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetEmergencyWithdrawTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetForceClosePositionTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetIsVestingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawArb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "promisedArbTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingPositions",
    data: BytesLike
  ): Result;

  events: {
    "BaseURISet(string)": EventFragment;
    "ClosePositionWindowSet(uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "EmergencyWithdrawTaxSet(uint256)": EventFragment;
    "ForceClosePositionTaxSet(uint256)": EventFragment;
    "OARBSet(address)": EventFragment;
    "PositionClosed(address,uint256,uint256)": EventFragment;
    "PositionForceClosed(address,uint256,uint256)": EventFragment;
    "PromisedArbTokensSet(uint256)": EventFragment;
    "VestingActiveSet(bool)": EventFragment;
    "VestingPositionCleared(uint256)": EventFragment;
    "VestingPositionCreated(tuple)": EventFragment;
    "VestingStarted(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePositionWindowSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawTaxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceClosePositionTaxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OARBSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionForceClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromisedArbTokensSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingActiveSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingPositionCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingStarted"): EventFragment;
}

export interface BaseURISetEventObject {
  baseURI: string;
}
export type BaseURISetEvent = TypedEvent<[string], BaseURISetEventObject>;

export type BaseURISetEventFilter = TypedEventFilter<BaseURISetEvent>;

export interface ClosePositionWindowSetEventObject {
  closePositionWindow: BigNumber;
}
export type ClosePositionWindowSetEvent = TypedEvent<
  [BigNumber],
  ClosePositionWindowSetEventObject
>;

export type ClosePositionWindowSetEventFilter =
  TypedEventFilter<ClosePositionWindowSetEvent>;

export interface EmergencyWithdrawEventObject {
  owner: string;
  vestingId: BigNumber;
  arbTax: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface EmergencyWithdrawTaxSetEventObject {
  emergencyWithdrawTax: BigNumber;
}
export type EmergencyWithdrawTaxSetEvent = TypedEvent<
  [BigNumber],
  EmergencyWithdrawTaxSetEventObject
>;

export type EmergencyWithdrawTaxSetEventFilter =
  TypedEventFilter<EmergencyWithdrawTaxSetEvent>;

export interface ForceClosePositionTaxSetEventObject {
  forceClosePositionTax: BigNumber;
}
export type ForceClosePositionTaxSetEvent = TypedEvent<
  [BigNumber],
  ForceClosePositionTaxSetEventObject
>;

export type ForceClosePositionTaxSetEventFilter =
  TypedEventFilter<ForceClosePositionTaxSetEvent>;

export interface OARBSetEventObject {
  oARB: string;
}
export type OARBSetEvent = TypedEvent<[string], OARBSetEventObject>;

export type OARBSetEventFilter = TypedEventFilter<OARBSetEvent>;

export interface PositionClosedEventObject {
  owner: string;
  vestingId: BigNumber;
  ethCostPaid: BigNumber;
}
export type PositionClosedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PositionClosedEventObject
>;

export type PositionClosedEventFilter = TypedEventFilter<PositionClosedEvent>;

export interface PositionForceClosedEventObject {
  owner: string;
  vestingId: BigNumber;
  arbTax: BigNumber;
}
export type PositionForceClosedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PositionForceClosedEventObject
>;

export type PositionForceClosedEventFilter =
  TypedEventFilter<PositionForceClosedEvent>;

export interface PromisedArbTokensSetEventObject {
  promisedArbTokensSet: BigNumber;
}
export type PromisedArbTokensSetEvent = TypedEvent<
  [BigNumber],
  PromisedArbTokensSetEventObject
>;

export type PromisedArbTokensSetEventFilter =
  TypedEventFilter<PromisedArbTokensSetEvent>;

export interface VestingActiveSetEventObject {
  vestingActive: boolean;
}
export type VestingActiveSetEvent = TypedEvent<
  [boolean],
  VestingActiveSetEventObject
>;

export type VestingActiveSetEventFilter =
  TypedEventFilter<VestingActiveSetEvent>;

export interface VestingPositionClearedEventObject {
  id: BigNumber;
}
export type VestingPositionClearedEvent = TypedEvent<
  [BigNumber],
  VestingPositionClearedEventObject
>;

export type VestingPositionClearedEventFilter =
  TypedEventFilter<VestingPositionClearedEvent>;

export interface VestingPositionCreatedEventObject {
  vestingPosition: IVesterV1.VestingPositionStructOutput;
}
export type VestingPositionCreatedEvent = TypedEvent<
  [IVesterV1.VestingPositionStructOutput],
  VestingPositionCreatedEventObject
>;

export type VestingPositionCreatedEventFilter =
  TypedEventFilter<VestingPositionCreatedEvent>;

export interface VestingStartedEventObject {
  owner: string;
  duration: BigNumber;
  amount: BigNumber;
  vestingId: BigNumber;
}
export type VestingStartedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  VestingStartedEventObject
>;

export type VestingStartedEventFilter = TypedEventFilter<VestingStartedEvent>;

export interface IVesterV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVesterV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    availableArbTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    closePositionAndBuyTokens(
      _id: BigNumberish,
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    closePositionWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyWithdrawTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceClosePosition(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceClosePositionTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isVestingActive(overrides?: CallOverrides): Promise<[boolean]>;

    oARB(overrides?: CallOverrides): Promise<[string]>;

    ownerSetBaseURI(
      _baseUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetClosePositionWindow(
      _closePositionWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetEmergencyWithdrawTax(
      _emergencyWithdrawTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetForceClosePositionTax(
      _forceClosePositionTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetIsVestingActive(
      _isVestingActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerWithdrawArb(
      _to: string,
      _amount: BigNumberish,
      _shouldBypassAvailableAmounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    promisedArbTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    vest(
      _fromAccountNumber: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vestingPositions(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IVesterV1.VestingPositionStructOutput]>;
  };

  availableArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  closePositionAndBuyTokens(
    _id: BigNumberish,
    _fromAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    _maxPaymentAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  closePositionWindow(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyWithdrawTax(overrides?: CallOverrides): Promise<BigNumber>;

  forceClosePosition(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceClosePositionTax(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isVestingActive(overrides?: CallOverrides): Promise<boolean>;

  oARB(overrides?: CallOverrides): Promise<string>;

  ownerSetBaseURI(
    _baseUri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetClosePositionWindow(
    _closePositionWindow: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetEmergencyWithdrawTax(
    _emergencyWithdrawTax: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetForceClosePositionTax(
    _forceClosePositionTax: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetIsVestingActive(
    _isVestingActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerWithdrawArb(
    _to: string,
    _amount: BigNumberish,
    _shouldBypassAvailableAmounts: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  promisedArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

  vest(
    _fromAccountNumber: BigNumberish,
    _duration: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vestingPositions(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IVesterV1.VestingPositionStructOutput>;

  callStatic: {
    availableArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    closePositionAndBuyTokens(
      _id: BigNumberish,
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _maxPaymentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closePositionWindow(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawTax(overrides?: CallOverrides): Promise<BigNumber>;

    forceClosePosition(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceClosePositionTax(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    isVestingActive(overrides?: CallOverrides): Promise<boolean>;

    oARB(overrides?: CallOverrides): Promise<string>;

    ownerSetBaseURI(_baseUri: string, overrides?: CallOverrides): Promise<void>;

    ownerSetClosePositionWindow(
      _closePositionWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetEmergencyWithdrawTax(
      _emergencyWithdrawTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetForceClosePositionTax(
      _forceClosePositionTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetIsVestingActive(
      _isVestingActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerWithdrawArb(
      _to: string,
      _amount: BigNumberish,
      _shouldBypassAvailableAmounts: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    promisedArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

    vest(
      _fromAccountNumber: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingPositions(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IVesterV1.VestingPositionStructOutput>;
  };

  filters: {
    "BaseURISet(string)"(baseURI?: null): BaseURISetEventFilter;
    BaseURISet(baseURI?: null): BaseURISetEventFilter;

    "ClosePositionWindowSet(uint256)"(
      closePositionWindow?: null
    ): ClosePositionWindowSetEventFilter;
    ClosePositionWindowSet(
      closePositionWindow?: null
    ): ClosePositionWindowSetEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      owner?: string | null,
      vestingId?: null,
      arbTax?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      owner?: string | null,
      vestingId?: null,
      arbTax?: null
    ): EmergencyWithdrawEventFilter;

    "EmergencyWithdrawTaxSet(uint256)"(
      emergencyWithdrawTax?: null
    ): EmergencyWithdrawTaxSetEventFilter;
    EmergencyWithdrawTaxSet(
      emergencyWithdrawTax?: null
    ): EmergencyWithdrawTaxSetEventFilter;

    "ForceClosePositionTaxSet(uint256)"(
      forceClosePositionTax?: null
    ): ForceClosePositionTaxSetEventFilter;
    ForceClosePositionTaxSet(
      forceClosePositionTax?: null
    ): ForceClosePositionTaxSetEventFilter;

    "OARBSet(address)"(oARB?: null): OARBSetEventFilter;
    OARBSet(oARB?: null): OARBSetEventFilter;

    "PositionClosed(address,uint256,uint256)"(
      owner?: string | null,
      vestingId?: null,
      ethCostPaid?: null
    ): PositionClosedEventFilter;
    PositionClosed(
      owner?: string | null,
      vestingId?: null,
      ethCostPaid?: null
    ): PositionClosedEventFilter;

    "PositionForceClosed(address,uint256,uint256)"(
      owner?: string | null,
      vestingId?: null,
      arbTax?: null
    ): PositionForceClosedEventFilter;
    PositionForceClosed(
      owner?: string | null,
      vestingId?: null,
      arbTax?: null
    ): PositionForceClosedEventFilter;

    "PromisedArbTokensSet(uint256)"(
      promisedArbTokensSet?: null
    ): PromisedArbTokensSetEventFilter;
    PromisedArbTokensSet(
      promisedArbTokensSet?: null
    ): PromisedArbTokensSetEventFilter;

    "VestingActiveSet(bool)"(vestingActive?: null): VestingActiveSetEventFilter;
    VestingActiveSet(vestingActive?: null): VestingActiveSetEventFilter;

    "VestingPositionCleared(uint256)"(
      id?: null
    ): VestingPositionClearedEventFilter;
    VestingPositionCleared(id?: null): VestingPositionClearedEventFilter;

    "VestingPositionCreated(tuple)"(
      vestingPosition?: null
    ): VestingPositionCreatedEventFilter;
    VestingPositionCreated(
      vestingPosition?: null
    ): VestingPositionCreatedEventFilter;

    "VestingStarted(address,uint256,uint256,uint256)"(
      owner?: string | null,
      duration?: null,
      amount?: null,
      vestingId?: null
    ): VestingStartedEventFilter;
    VestingStarted(
      owner?: string | null,
      duration?: null,
      amount?: null,
      vestingId?: null
    ): VestingStartedEventFilter;
  };

  estimateGas: {
    availableArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionAndBuyTokens(
      _id: BigNumberish,
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    closePositionWindow(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyWithdrawTax(overrides?: CallOverrides): Promise<BigNumber>;

    forceClosePosition(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceClosePositionTax(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isVestingActive(overrides?: CallOverrides): Promise<BigNumber>;

    oARB(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetBaseURI(
      _baseUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetClosePositionWindow(
      _closePositionWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetEmergencyWithdrawTax(
      _emergencyWithdrawTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetForceClosePositionTax(
      _forceClosePositionTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetIsVestingActive(
      _isVestingActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerWithdrawArb(
      _to: string,
      _amount: BigNumberish,
      _shouldBypassAvailableAmounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    promisedArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

    vest(
      _fromAccountNumber: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vestingPositions(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableArbTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePositionAndBuyTokens(
      _id: BigNumberish,
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    closePositionWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawTax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceClosePosition(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceClosePositionTax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isVestingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oARB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerSetBaseURI(
      _baseUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetClosePositionWindow(
      _closePositionWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetEmergencyWithdrawTax(
      _emergencyWithdrawTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetForceClosePositionTax(
      _forceClosePositionTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetIsVestingActive(
      _isVestingActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawArb(
      _to: string,
      _amount: BigNumberish,
      _shouldBypassAvailableAmounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    promisedArbTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vest(
      _fromAccountNumber: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vestingPositions(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
