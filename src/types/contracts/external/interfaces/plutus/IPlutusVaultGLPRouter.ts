/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IPlutusVaultGLPRouterInterface extends utils.Interface {
  functions: {
    "deposit(uint256)": FunctionFragment;
    "getFeeBp(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "previewRedeem(address,uint256)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "sGLP()": FunctionFragment;
    "setWhitelist(address)": FunctionFragment;
    "whitelist()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "getFeeBp"
      | "owner"
      | "paused"
      | "previewRedeem"
      | "redeem"
      | "sGLP"
      | "setWhitelist"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFeeBp", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sGLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeeBp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sGLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {};
}

export interface IPlutusVaultGLPRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPlutusVaultGLPRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getFeeBp(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _exitFeeBp: BigNumber; _rebateBp: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    previewRedeem(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _exitFeeLessRebate: BigNumber;
        _rebateAmount: BigNumber;
        _assetsLessFee: BigNumber;
      }
    >;

    redeem(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sGLP(overrides?: CallOverrides): Promise<[string]>;

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whitelist(overrides?: CallOverrides): Promise<[string]>;
  };

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getFeeBp(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _exitFeeBp: BigNumber; _rebateBp: BigNumber }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  previewRedeem(
    _user: string,
    _shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _exitFeeLessRebate: BigNumber;
      _rebateAmount: BigNumber;
      _assetsLessFee: BigNumber;
    }
  >;

  redeem(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sGLP(overrides?: CallOverrides): Promise<string>;

  setWhitelist(
    _whitelist: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getFeeBp(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _exitFeeBp: BigNumber; _rebateBp: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    previewRedeem(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _exitFeeLessRebate: BigNumber;
        _rebateAmount: BigNumber;
        _assetsLessFee: BigNumber;
      }
    >;

    redeem(_shares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sGLP(overrides?: CallOverrides): Promise<string>;

    setWhitelist(_whitelist: string, overrides?: CallOverrides): Promise<void>;

    whitelist(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getFeeBp(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sGLP(overrides?: CallOverrides): Promise<BigNumber>;

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getFeeBp(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sGLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
