/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IDolomiteStructs {
  export type MonetaryPriceStruct = { value: BigNumberish };

  export type MonetaryPriceStructOutput = [BigNumber] & { value: BigNumber };
}

export interface IChainlinkPriceOracleOldInterface extends utils.Interface {
  functions: {
    "getPrice(address)": FunctionFragment;
    "insertOrUpdateOracleToken(address,uint8,address,uint8,address)": FunctionFragment;
    "stalenessThreshold()": FunctionFragment;
    "tokenToAggregatorDecimalsMap(address)": FunctionFragment;
    "tokenToAggregatorMap(address)": FunctionFragment;
    "tokenToDecimalsMap(address)": FunctionFragment;
    "tokenToPairingMap(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPrice"
      | "insertOrUpdateOracleToken"
      | "stalenessThreshold"
      | "tokenToAggregatorDecimalsMap"
      | "tokenToAggregatorMap"
      | "tokenToDecimalsMap"
      | "tokenToPairingMap"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "insertOrUpdateOracleToken",
    values: [string, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stalenessThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToAggregatorDecimalsMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToAggregatorMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToDecimalsMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToPairingMap",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insertOrUpdateOracleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stalenessThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToAggregatorDecimalsMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToAggregatorMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToDecimalsMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToPairingMap",
    data: BytesLike
  ): Result;

  events: {
    "TokenInsertedOrUpdated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenInsertedOrUpdated"): EventFragment;
}

export interface TokenInsertedOrUpdatedEventObject {
  token: string;
  aggregator: string;
  tokenPair: string;
}
export type TokenInsertedOrUpdatedEvent = TypedEvent<
  [string, string, string],
  TokenInsertedOrUpdatedEventObject
>;

export type TokenInsertedOrUpdatedEventFilter =
  TypedEventFilter<TokenInsertedOrUpdatedEvent>;

export interface IChainlinkPriceOracleOld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IChainlinkPriceOracleOldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.MonetaryPriceStructOutput]>;

    insertOrUpdateOracleToken(
      _token: string,
      _tokenDecimals: BigNumberish,
      _chainlinkAggregator: string,
      _aggregatorDecimals: BigNumberish,
      _tokenPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stalenessThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenToAggregatorDecimalsMap(
      _aggregator: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    tokenToAggregatorMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenToDecimalsMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    tokenToPairingMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _tokenPair: string }>;
  };

  getPrice(
    token: string,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.MonetaryPriceStructOutput>;

  insertOrUpdateOracleToken(
    _token: string,
    _tokenDecimals: BigNumberish,
    _chainlinkAggregator: string,
    _aggregatorDecimals: BigNumberish,
    _tokenPair: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  tokenToAggregatorDecimalsMap(
    _aggregator: string,
    overrides?: CallOverrides
  ): Promise<number>;

  tokenToAggregatorMap(
    _token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenToDecimalsMap(
    _token: string,
    overrides?: CallOverrides
  ): Promise<number>;

  tokenToPairingMap(_token: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.MonetaryPriceStructOutput>;

    insertOrUpdateOracleToken(
      _token: string,
      _tokenDecimals: BigNumberish,
      _chainlinkAggregator: string,
      _aggregatorDecimals: BigNumberish,
      _tokenPair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToAggregatorDecimalsMap(
      _aggregator: string,
      overrides?: CallOverrides
    ): Promise<number>;

    tokenToAggregatorMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenToDecimalsMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<number>;

    tokenToPairingMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "TokenInsertedOrUpdated(address,address,address)"(
      token?: string | null,
      aggregator?: string | null,
      tokenPair?: string | null
    ): TokenInsertedOrUpdatedEventFilter;
    TokenInsertedOrUpdated(
      token?: string | null,
      aggregator?: string | null,
      tokenPair?: string | null
    ): TokenInsertedOrUpdatedEventFilter;
  };

  estimateGas: {
    getPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    insertOrUpdateOracleToken(
      _token: string,
      _tokenDecimals: BigNumberish,
      _chainlinkAggregator: string,
      _aggregatorDecimals: BigNumberish,
      _tokenPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToAggregatorDecimalsMap(
      _aggregator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToAggregatorMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToDecimalsMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToPairingMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insertOrUpdateOracleToken(
      _token: string,
      _tokenDecimals: BigNumberish,
      _chainlinkAggregator: string,
      _aggregatorDecimals: BigNumberish,
      _tokenPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stalenessThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToAggregatorDecimalsMap(
      _aggregator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToAggregatorMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToDecimalsMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToPairingMap(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
