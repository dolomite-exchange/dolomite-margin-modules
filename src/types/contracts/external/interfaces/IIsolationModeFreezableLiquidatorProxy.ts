/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };
}

export declare namespace IIsolationModeFreezableLiquidatorProxy {
  export type PrepareForLiquidationParamsStruct = {
    liquidAccount: IDolomiteStructs.AccountInfoStruct;
    freezableMarketId: BigNumberish;
    inputTokenAmount: BigNumberish;
    outputMarketId: BigNumberish;
    minOutputAmount: BigNumberish;
    expirationTimestamp: BigNumberish;
    extraData: BytesLike;
  };

  export type PrepareForLiquidationParamsStructOutput = [
    IDolomiteStructs.AccountInfoStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    liquidAccount: IDolomiteStructs.AccountInfoStructOutput;
    freezableMarketId: BigNumber;
    inputTokenAmount: BigNumber;
    outputMarketId: BigNumber;
    minOutputAmount: BigNumber;
    expirationTimestamp: BigNumber;
    extraData: string;
  };
}

export interface IIsolationModeFreezableLiquidatorProxyInterface
  extends utils.Interface {
  functions: {
    "ownerSetMinOutputPercentageUpperBound(uint256)": FunctionFragment;
    "prepareForLiquidation(((address,uint256),uint256,uint256,uint256,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ownerSetMinOutputPercentageUpperBound"
      | "prepareForLiquidation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ownerSetMinOutputPercentageUpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareForLiquidation",
    values: [
      IIsolationModeFreezableLiquidatorProxy.PrepareForLiquidationParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ownerSetMinOutputPercentageUpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareForLiquidation",
    data: BytesLike
  ): Result;

  events: {
    "MinOutputPercentageUpperBoundSet(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "MinOutputPercentageUpperBoundSet"
  ): EventFragment;
}

export interface MinOutputPercentageUpperBoundSetEventObject {
  newMinOutputPercentageUpperBound: BigNumber;
}
export type MinOutputPercentageUpperBoundSetEvent = TypedEvent<
  [BigNumber],
  MinOutputPercentageUpperBoundSetEventObject
>;

export type MinOutputPercentageUpperBoundSetEventFilter =
  TypedEventFilter<MinOutputPercentageUpperBoundSetEvent>;

export interface IIsolationModeFreezableLiquidatorProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIsolationModeFreezableLiquidatorProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ownerSetMinOutputPercentageUpperBound(
      _minOutputPercentageUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    prepareForLiquidation(
      _params: IIsolationModeFreezableLiquidatorProxy.PrepareForLiquidationParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ownerSetMinOutputPercentageUpperBound(
    _minOutputPercentageUpperBound: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  prepareForLiquidation(
    _params: IIsolationModeFreezableLiquidatorProxy.PrepareForLiquidationParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ownerSetMinOutputPercentageUpperBound(
      _minOutputPercentageUpperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    prepareForLiquidation(
      _params: IIsolationModeFreezableLiquidatorProxy.PrepareForLiquidationParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MinOutputPercentageUpperBoundSet(uint256)"(
      newMinOutputPercentageUpperBound?: null
    ): MinOutputPercentageUpperBoundSetEventFilter;
    MinOutputPercentageUpperBoundSet(
      newMinOutputPercentageUpperBound?: null
    ): MinOutputPercentageUpperBoundSetEventFilter;
  };

  estimateGas: {
    ownerSetMinOutputPercentageUpperBound(
      _minOutputPercentageUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    prepareForLiquidation(
      _params: IIsolationModeFreezableLiquidatorProxy.PrepareForLiquidationParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ownerSetMinOutputPercentageUpperBound(
      _minOutputPercentageUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    prepareForLiquidation(
      _params: IIsolationModeFreezableLiquidatorProxy.PrepareForLiquidationParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
