/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IGmxWithdrawalHandler {
  export type CreateWithdrawalParamsStruct = {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minLongTokenAmount: BigNumberish;
    minShortTokenAmount: BigNumberish;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type CreateWithdrawalParamsStructOutput = [
    string,
    string,
    string,
    string,
    string[],
    string[],
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type PropsStruct = { min: BigNumberish; max: BigNumberish };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };

  export type SimulatePricesParamsStruct = {
    primaryTokens: string[];
    primaryPrices: IGmxWithdrawalHandler.PropsStruct[];
  };

  export type SimulatePricesParamsStructOutput = [
    string[],
    IGmxWithdrawalHandler.PropsStructOutput[]
  ] & {
    primaryTokens: string[];
    primaryPrices: IGmxWithdrawalHandler.PropsStructOutput[];
  };
}

export declare namespace GmxOracleUtils {
  export type SetPricesParamsStruct = {
    signerInfo: BigNumberish;
    tokens: string[];
    compactedMinOracleBlockNumbers: BigNumberish[];
    compactedMaxOracleBlockNumbers: BigNumberish[];
    compactedOracleTimestamps: BigNumberish[];
    compactedDecimals: BigNumberish[];
    compactedMinPrices: BigNumberish[];
    compactedMinPricesIndexes: BigNumberish[];
    compactedMaxPrices: BigNumberish[];
    compactedMaxPricesIndexes: BigNumberish[];
    signatures: BytesLike[];
    priceFeedTokens: string[];
    realtimeFeedTokens: string[];
    realtimeFeedData: BytesLike[];
  };

  export type SetPricesParamsStructOutput = [
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[],
    string[],
    string[],
    string[]
  ] & {
    signerInfo: BigNumber;
    tokens: string[];
    compactedMinOracleBlockNumbers: BigNumber[];
    compactedMaxOracleBlockNumbers: BigNumber[];
    compactedOracleTimestamps: BigNumber[];
    compactedDecimals: BigNumber[];
    compactedMinPrices: BigNumber[];
    compactedMinPricesIndexes: BigNumber[];
    compactedMaxPrices: BigNumber[];
    compactedMaxPricesIndexes: BigNumber[];
    signatures: string[];
    priceFeedTokens: string[];
    realtimeFeedTokens: string[];
    realtimeFeedData: string[];
  };
}

export interface IGmxWithdrawalHandlerInterface extends utils.Interface {
  functions: {
    "cancelWithdrawal(bytes32)": FunctionFragment;
    "createWithdrawal(address,(address,address,address,address,address[],address[],uint256,uint256,bool,uint256,uint256))": FunctionFragment;
    "executeWithdrawal(bytes32,(uint256,address[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],bytes[],address[],address[],bytes[]))": FunctionFragment;
    "simulateExecuteWithdrawal(bytes32,(address[],(uint256,uint256)[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelWithdrawal"
      | "createWithdrawal"
      | "executeWithdrawal"
      | "simulateExecuteWithdrawal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawal",
    values: [string, IGmxWithdrawalHandler.CreateWithdrawalParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawal",
    values: [BytesLike, GmxOracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateExecuteWithdrawal",
    values: [BytesLike, IGmxWithdrawalHandler.SimulatePricesParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateExecuteWithdrawal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGmxWithdrawalHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGmxWithdrawalHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelWithdrawal(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createWithdrawal(
      _account: string,
      _params: IGmxWithdrawalHandler.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeWithdrawal(
      key: BytesLike,
      oracleParams: GmxOracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    simulateExecuteWithdrawal(
      _key: BytesLike,
      _params: IGmxWithdrawalHandler.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  cancelWithdrawal(
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createWithdrawal(
    _account: string,
    _params: IGmxWithdrawalHandler.CreateWithdrawalParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeWithdrawal(
    key: BytesLike,
    oracleParams: GmxOracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  simulateExecuteWithdrawal(
    _key: BytesLike,
    _params: IGmxWithdrawalHandler.SimulatePricesParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelWithdrawal(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    createWithdrawal(
      _account: string,
      _params: IGmxWithdrawalHandler.CreateWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    executeWithdrawal(
      key: BytesLike,
      oracleParams: GmxOracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateExecuteWithdrawal(
      _key: BytesLike,
      _params: IGmxWithdrawalHandler.SimulatePricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cancelWithdrawal(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createWithdrawal(
      _account: string,
      _params: IGmxWithdrawalHandler.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeWithdrawal(
      key: BytesLike,
      oracleParams: GmxOracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    simulateExecuteWithdrawal(
      _key: BytesLike,
      _params: IGmxWithdrawalHandler.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelWithdrawal(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createWithdrawal(
      _account: string,
      _params: IGmxWithdrawalHandler.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeWithdrawal(
      key: BytesLike,
      oracleParams: GmxOracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    simulateExecuteWithdrawal(
      _key: BytesLike,
      _params: IGmxWithdrawalHandler.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
