/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace GmxEventUtils {
  export type AddressKeyValueStruct = { key: string; value: string };

  export type AddressKeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type AddressArrayKeyValueStruct = { key: string; value: string[] };

  export type AddressArrayKeyValueStructOutput = [string, string[]] & {
    key: string;
    value: string[];
  };

  export type AddressItemsStruct = {
    items: GmxEventUtils.AddressKeyValueStruct[];
    arrayItems: GmxEventUtils.AddressArrayKeyValueStruct[];
  };

  export type AddressItemsStructOutput = [
    GmxEventUtils.AddressKeyValueStructOutput[],
    GmxEventUtils.AddressArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.AddressKeyValueStructOutput[];
    arrayItems: GmxEventUtils.AddressArrayKeyValueStructOutput[];
  };

  export type UintKeyValueStruct = { key: string; value: BigNumberish };

  export type UintKeyValueStructOutput = [string, BigNumber] & {
    key: string;
    value: BigNumber;
  };

  export type UintArrayKeyValueStruct = { key: string; value: BigNumberish[] };

  export type UintArrayKeyValueStructOutput = [string, BigNumber[]] & {
    key: string;
    value: BigNumber[];
  };

  export type UintItemsStruct = {
    items: GmxEventUtils.UintKeyValueStruct[];
    arrayItems: GmxEventUtils.UintArrayKeyValueStruct[];
  };

  export type UintItemsStructOutput = [
    GmxEventUtils.UintKeyValueStructOutput[],
    GmxEventUtils.UintArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.UintKeyValueStructOutput[];
    arrayItems: GmxEventUtils.UintArrayKeyValueStructOutput[];
  };

  export type IntKeyValueStruct = { key: string; value: BigNumberish };

  export type IntKeyValueStructOutput = [string, BigNumber] & {
    key: string;
    value: BigNumber;
  };

  export type IntArrayKeyValueStruct = { key: string; value: BigNumberish[] };

  export type IntArrayKeyValueStructOutput = [string, BigNumber[]] & {
    key: string;
    value: BigNumber[];
  };

  export type IntItemsStruct = {
    items: GmxEventUtils.IntKeyValueStruct[];
    arrayItems: GmxEventUtils.IntArrayKeyValueStruct[];
  };

  export type IntItemsStructOutput = [
    GmxEventUtils.IntKeyValueStructOutput[],
    GmxEventUtils.IntArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.IntKeyValueStructOutput[];
    arrayItems: GmxEventUtils.IntArrayKeyValueStructOutput[];
  };

  export type BoolKeyValueStruct = { key: string; value: boolean };

  export type BoolKeyValueStructOutput = [string, boolean] & {
    key: string;
    value: boolean;
  };

  export type BoolArrayKeyValueStruct = { key: string; value: boolean[] };

  export type BoolArrayKeyValueStructOutput = [string, boolean[]] & {
    key: string;
    value: boolean[];
  };

  export type BoolItemsStruct = {
    items: GmxEventUtils.BoolKeyValueStruct[];
    arrayItems: GmxEventUtils.BoolArrayKeyValueStruct[];
  };

  export type BoolItemsStructOutput = [
    GmxEventUtils.BoolKeyValueStructOutput[],
    GmxEventUtils.BoolArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.BoolKeyValueStructOutput[];
    arrayItems: GmxEventUtils.BoolArrayKeyValueStructOutput[];
  };

  export type Bytes32KeyValueStruct = { key: string; value: BytesLike };

  export type Bytes32KeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type Bytes32ArrayKeyValueStruct = { key: string; value: BytesLike[] };

  export type Bytes32ArrayKeyValueStructOutput = [string, string[]] & {
    key: string;
    value: string[];
  };

  export type Bytes32ItemsStruct = {
    items: GmxEventUtils.Bytes32KeyValueStruct[];
    arrayItems: GmxEventUtils.Bytes32ArrayKeyValueStruct[];
  };

  export type Bytes32ItemsStructOutput = [
    GmxEventUtils.Bytes32KeyValueStructOutput[],
    GmxEventUtils.Bytes32ArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.Bytes32KeyValueStructOutput[];
    arrayItems: GmxEventUtils.Bytes32ArrayKeyValueStructOutput[];
  };

  export type BytesKeyValueStruct = { key: string; value: BytesLike };

  export type BytesKeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type BytesArrayKeyValueStruct = { key: string; value: BytesLike[] };

  export type BytesArrayKeyValueStructOutput = [string, string[]] & {
    key: string;
    value: string[];
  };

  export type BytesItemsStruct = {
    items: GmxEventUtils.BytesKeyValueStruct[];
    arrayItems: GmxEventUtils.BytesArrayKeyValueStruct[];
  };

  export type BytesItemsStructOutput = [
    GmxEventUtils.BytesKeyValueStructOutput[],
    GmxEventUtils.BytesArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.BytesKeyValueStructOutput[];
    arrayItems: GmxEventUtils.BytesArrayKeyValueStructOutput[];
  };

  export type StringKeyValueStruct = { key: string; value: string };

  export type StringKeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type StringArrayKeyValueStruct = { key: string; value: string[] };

  export type StringArrayKeyValueStructOutput = [string, string[]] & {
    key: string;
    value: string[];
  };

  export type StringItemsStruct = {
    items: GmxEventUtils.StringKeyValueStruct[];
    arrayItems: GmxEventUtils.StringArrayKeyValueStruct[];
  };

  export type StringItemsStructOutput = [
    GmxEventUtils.StringKeyValueStructOutput[],
    GmxEventUtils.StringArrayKeyValueStructOutput[]
  ] & {
    items: GmxEventUtils.StringKeyValueStructOutput[];
    arrayItems: GmxEventUtils.StringArrayKeyValueStructOutput[];
  };

  export type EventLogDataStruct = {
    addressItems: GmxEventUtils.AddressItemsStruct;
    uintItems: GmxEventUtils.UintItemsStruct;
    intItems: GmxEventUtils.IntItemsStruct;
    boolItems: GmxEventUtils.BoolItemsStruct;
    bytes32Items: GmxEventUtils.Bytes32ItemsStruct;
    bytesItems: GmxEventUtils.BytesItemsStruct;
    stringItems: GmxEventUtils.StringItemsStruct;
  };

  export type EventLogDataStructOutput = [
    GmxEventUtils.AddressItemsStructOutput,
    GmxEventUtils.UintItemsStructOutput,
    GmxEventUtils.IntItemsStructOutput,
    GmxEventUtils.BoolItemsStructOutput,
    GmxEventUtils.Bytes32ItemsStructOutput,
    GmxEventUtils.BytesItemsStructOutput,
    GmxEventUtils.StringItemsStructOutput
  ] & {
    addressItems: GmxEventUtils.AddressItemsStructOutput;
    uintItems: GmxEventUtils.UintItemsStructOutput;
    intItems: GmxEventUtils.IntItemsStructOutput;
    boolItems: GmxEventUtils.BoolItemsStructOutput;
    bytes32Items: GmxEventUtils.Bytes32ItemsStructOutput;
    bytesItems: GmxEventUtils.BytesItemsStructOutput;
    stringItems: GmxEventUtils.StringItemsStructOutput;
  };
}

export interface IGmxEventEmitterInterface extends utils.Interface {
  functions: {};

  events: {
    "EventLog(address,string,string,tuple)": EventFragment;
    "EventLog1(address,string,string,bytes32,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventLog1"): EventFragment;
}

export interface EventLogEventObject {
  msgSender: string;
  eventName: string;
  eventNameHash: string;
  eventData: GmxEventUtils.EventLogDataStructOutput;
}
export type EventLogEvent = TypedEvent<
  [string, string, string, GmxEventUtils.EventLogDataStructOutput],
  EventLogEventObject
>;

export type EventLogEventFilter = TypedEventFilter<EventLogEvent>;

export interface EventLog1EventObject {
  msgSender: string;
  eventName: string;
  eventNameHash: string;
  topic1: string;
  eventData: GmxEventUtils.EventLogDataStructOutput;
}
export type EventLog1Event = TypedEvent<
  [string, string, string, string, GmxEventUtils.EventLogDataStructOutput],
  EventLog1EventObject
>;

export type EventLog1EventFilter = TypedEventFilter<EventLog1Event>;

export interface IGmxEventEmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGmxEventEmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "EventLog(address,string,string,tuple)"(
      msgSender?: null,
      eventName?: null,
      eventNameHash?: string | null,
      eventData?: null
    ): EventLogEventFilter;
    EventLog(
      msgSender?: null,
      eventName?: null,
      eventNameHash?: string | null,
      eventData?: null
    ): EventLogEventFilter;

    "EventLog1(address,string,string,bytes32,tuple)"(
      msgSender?: null,
      eventName?: null,
      eventNameHash?: string | null,
      topic1?: BytesLike | null,
      eventData?: null
    ): EventLog1EventFilter;
    EventLog1(
      msgSender?: null,
      eventName?: null,
      eventNameHash?: string | null,
      topic1?: BytesLike | null,
      eventData?: null
    ): EventLog1EventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
