/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IDolomiteStructs {
  export type MonetaryPriceStruct = { value: BigNumberish };

  export type MonetaryPriceStructOutput = [BigNumber] & { value: BigNumber };
}

export interface ITWAPPriceOracleInterface extends utils.Interface {
  functions: {
    "getPrice(address)": FunctionFragment;
    "observationInterval()": FunctionFragment;
    "ownerSetObservationInterval(uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPrice"
      | "observationInterval"
      | "ownerSetObservationInterval"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "observationInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetObservationInterval",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "observationInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetObservationInterval",
    data: BytesLike
  ): Result;

  events: {
    "ObservationIntervalUpdated(uint256)": EventFragment;
    "PairAdded(address)": EventFragment;
    "PairRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ObservationIntervalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairRemoved"): EventFragment;
}

export interface ObservationIntervalUpdatedEventObject {
  observationInterval: BigNumber;
}
export type ObservationIntervalUpdatedEvent = TypedEvent<
  [BigNumber],
  ObservationIntervalUpdatedEventObject
>;

export type ObservationIntervalUpdatedEventFilter =
  TypedEventFilter<ObservationIntervalUpdatedEvent>;

export interface PairAddedEventObject {
  pair: string;
}
export type PairAddedEvent = TypedEvent<[string], PairAddedEventObject>;

export type PairAddedEventFilter = TypedEventFilter<PairAddedEvent>;

export interface PairRemovedEventObject {
  pair: string;
}
export type PairRemovedEvent = TypedEvent<[string], PairRemovedEventObject>;

export type PairRemovedEventFilter = TypedEventFilter<PairRemovedEvent>;

export interface ITWAPPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITWAPPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.MonetaryPriceStructOutput]>;

    observationInterval(overrides?: CallOverrides): Promise<[number]>;

    ownerSetObservationInterval(
      _observationInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getPrice(
    token: string,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.MonetaryPriceStructOutput>;

  observationInterval(overrides?: CallOverrides): Promise<number>;

  ownerSetObservationInterval(
    _observationInterval: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.MonetaryPriceStructOutput>;

    observationInterval(overrides?: CallOverrides): Promise<number>;

    ownerSetObservationInterval(
      _observationInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ObservationIntervalUpdated(uint256)"(
      observationInterval?: null
    ): ObservationIntervalUpdatedEventFilter;
    ObservationIntervalUpdated(
      observationInterval?: null
    ): ObservationIntervalUpdatedEventFilter;

    "PairAdded(address)"(pair?: null): PairAddedEventFilter;
    PairAdded(pair?: null): PairAddedEventFilter;

    "PairRemoved(address)"(pair?: null): PairRemovedEventFilter;
    PairRemoved(pair?: null): PairRemovedEventFilter;
  };

  estimateGas: {
    getPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    observationInterval(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetObservationInterval(
      _observationInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    observationInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetObservationInterval(
      _observationInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
