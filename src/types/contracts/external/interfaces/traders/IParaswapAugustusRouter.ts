/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IParaswapAugustusRouter {
  export type RouteStruct = {
    index: BigNumberish;
    targetExchange: string;
    percent: BigNumberish;
    payload: BytesLike;
    networkFee: BigNumberish;
  };

  export type RouteStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    index: BigNumber;
    targetExchange: string;
    percent: BigNumber;
    payload: string;
    networkFee: BigNumber;
  };

  export type AdapterStruct = {
    adapter: string;
    percent: BigNumberish;
    networkFee: BigNumberish;
    route: IParaswapAugustusRouter.RouteStruct[];
  };

  export type AdapterStructOutput = [
    string,
    BigNumber,
    BigNumber,
    IParaswapAugustusRouter.RouteStructOutput[]
  ] & {
    adapter: string;
    percent: BigNumber;
    networkFee: BigNumber;
    route: IParaswapAugustusRouter.RouteStructOutput[];
  };

  export type PathStruct = {
    to: string;
    totalNetworkFee: BigNumberish;
    adapters: IParaswapAugustusRouter.AdapterStruct[];
  };

  export type PathStructOutput = [
    string,
    BigNumber,
    IParaswapAugustusRouter.AdapterStructOutput[]
  ] & {
    to: string;
    totalNetworkFee: BigNumber;
    adapters: IParaswapAugustusRouter.AdapterStructOutput[];
  };

  export type MegaSwapPathStruct = {
    fromAmountPercent: BigNumberish;
    path: IParaswapAugustusRouter.PathStruct[];
  };

  export type MegaSwapPathStructOutput = [
    BigNumber,
    IParaswapAugustusRouter.PathStructOutput[]
  ] & {
    fromAmountPercent: BigNumber;
    path: IParaswapAugustusRouter.PathStructOutput[];
  };

  export type MegaSwapSellDataStruct = {
    fromToken: string;
    fromAmount: BigNumberish;
    toAmount: BigNumberish;
    expectedAmount: BigNumberish;
    beneficiary: string;
    path: IParaswapAugustusRouter.MegaSwapPathStruct[];
    partner: string;
    feePercent: BigNumberish;
    permit: BytesLike;
    deadline: BigNumberish;
    uuid: BytesLike;
  };

  export type MegaSwapSellDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    IParaswapAugustusRouter.MegaSwapPathStructOutput[],
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    fromToken: string;
    fromAmount: BigNumber;
    toAmount: BigNumber;
    expectedAmount: BigNumber;
    beneficiary: string;
    path: IParaswapAugustusRouter.MegaSwapPathStructOutput[];
    partner: string;
    feePercent: BigNumber;
    permit: string;
    deadline: BigNumber;
    uuid: string;
  };

  export type MultiSwapSellDataStruct = {
    fromToken: string;
    fromAmount: BigNumberish;
    toAmount: BigNumberish;
    expectedAmount: BigNumberish;
    beneficiary: string;
    path: IParaswapAugustusRouter.PathStruct[];
    partner: string;
    feePercent: BigNumberish;
    permit: BytesLike;
    deadline: BigNumberish;
    uuid: BytesLike;
  };

  export type MultiSwapSellDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    IParaswapAugustusRouter.PathStructOutput[],
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    fromToken: string;
    fromAmount: BigNumber;
    toAmount: BigNumber;
    expectedAmount: BigNumber;
    beneficiary: string;
    path: IParaswapAugustusRouter.PathStructOutput[];
    partner: string;
    feePercent: BigNumber;
    permit: string;
    deadline: BigNumber;
    uuid: string;
  };

  export type SimpleSwapSellDataStruct = {
    fromToken: string;
    toToken: string;
    fromAmount: BigNumberish;
    toAmount: BigNumberish;
    expectedAmount: BigNumberish;
    callees: string[];
    exchangeData: BytesLike;
    startIndexes: BigNumberish[];
    values: BigNumberish[];
    beneficiary: string;
    partner: string;
    feePercent: BigNumberish;
    permit: BytesLike;
    deadline: BigNumberish;
    uuid: BytesLike;
  };

  export type SimpleSwapSellDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    string,
    BigNumber[],
    BigNumber[],
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    fromToken: string;
    toToken: string;
    fromAmount: BigNumber;
    toAmount: BigNumber;
    expectedAmount: BigNumber;
    callees: string[];
    exchangeData: string;
    startIndexes: BigNumber[];
    values: BigNumber[];
    beneficiary: string;
    partner: string;
    feePercent: BigNumber;
    permit: string;
    deadline: BigNumber;
    uuid: string;
  };
}

export interface IParaswapAugustusRouterInterface extends utils.Interface {
  functions: {
    "megaSwap((address,uint256,uint256,uint256,address,(uint256,(address,uint256,(address,uint256,uint256,(uint256,address,uint256,bytes,uint256)[])[])[])[],address,uint256,bytes,uint256,bytes16))": FunctionFragment;
    "multiSwap((address,uint256,uint256,uint256,address,(address,uint256,(address,uint256,uint256,(uint256,address,uint256,bytes,uint256)[])[])[],address,uint256,bytes,uint256,bytes16))": FunctionFragment;
    "simpleSwap((address,address,uint256,uint256,uint256,address[],bytes,uint256[],uint256[],address,address,uint256,bytes,uint256,bytes16))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "megaSwap" | "multiSwap" | "simpleSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "megaSwap",
    values: [IParaswapAugustusRouter.MegaSwapSellDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSwap",
    values: [IParaswapAugustusRouter.MultiSwapSellDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleSwap",
    values: [IParaswapAugustusRouter.SimpleSwapSellDataStruct]
  ): string;

  decodeFunctionResult(functionFragment: "megaSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "simpleSwap", data: BytesLike): Result;

  events: {};
}

export interface IParaswapAugustusRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IParaswapAugustusRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    megaSwap(
      _data: IParaswapAugustusRouter.MegaSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    multiSwap(
      _data: IParaswapAugustusRouter.MultiSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    simpleSwap(
      data: IParaswapAugustusRouter.SimpleSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  megaSwap(
    _data: IParaswapAugustusRouter.MegaSwapSellDataStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  multiSwap(
    _data: IParaswapAugustusRouter.MultiSwapSellDataStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  simpleSwap(
    data: IParaswapAugustusRouter.SimpleSwapSellDataStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    megaSwap(
      _data: IParaswapAugustusRouter.MegaSwapSellDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSwap(
      _data: IParaswapAugustusRouter.MultiSwapSellDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simpleSwap(
      data: IParaswapAugustusRouter.SimpleSwapSellDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    megaSwap(
      _data: IParaswapAugustusRouter.MegaSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    multiSwap(
      _data: IParaswapAugustusRouter.MultiSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    simpleSwap(
      data: IParaswapAugustusRouter.SimpleSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    megaSwap(
      _data: IParaswapAugustusRouter.MegaSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multiSwap(
      _data: IParaswapAugustusRouter.MultiSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    simpleSwap(
      data: IParaswapAugustusRouter.SimpleSwapSellDataStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
