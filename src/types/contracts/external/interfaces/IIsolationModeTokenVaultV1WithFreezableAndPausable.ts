/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IGenericTraderBase {
  export type TraderParamStruct = {
    traderType: BigNumberish;
    makerAccountIndex: BigNumberish;
    trader: string;
    tradeData: BytesLike;
  };

  export type TraderParamStructOutput = [number, BigNumber, string, string] & {
    traderType: number;
    makerAccountIndex: BigNumber;
    trader: string;
    tradeData: string;
  };
}

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };
}

export declare namespace IGenericTraderProxyV1 {
  export type UserConfigStruct = {
    deadline: BigNumberish;
    balanceCheckFlag: BigNumberish;
    eventType: BigNumberish;
  };

  export type UserConfigStructOutput = [BigNumber, number, number] & {
    deadline: BigNumber;
    balanceCheckFlag: number;
    eventType: number;
  };
}

export interface IIsolationModeTokenVaultV1WithFreezableAndPausableInterface
  extends utils.Interface {
  functions: {
    "BORROW_POSITION_PROXY()": FunctionFragment;
    "DOLOMITE_MARGIN()": FunctionFragment;
    "OWNER()": FunctionFragment;
    "VAULT_FACTORY()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addCollateralAndSwapExactInputForOutput(uint256,uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint8,uint8))": FunctionFragment;
    "closeBorrowPositionWithOtherTokens(uint256,uint256,uint256[])": FunctionFragment;
    "closeBorrowPositionWithUnderlyingVaultToken(uint256,uint256)": FunctionFragment;
    "depositIntoVaultForDolomiteMargin(uint256,uint256)": FunctionFragment;
    "dolomiteRegistry()": FunctionFragment;
    "executeDepositIntoVault(address,uint256)": FunctionFragment;
    "executeWithdrawalFromVault(address,uint256)": FunctionFragment;
    "getExecutionFeeForAccountNumber(uint256)": FunctionFragment;
    "getOutputTokenByVaultAccount(uint256)": FunctionFragment;
    "handlerRegistry()": FunctionFragment;
    "initialize()": FunctionFragment;
    "initiateUnwrapping(uint256,uint256,address,uint256,bytes)": FunctionFragment;
    "initiateUnwrappingForLiquidation(uint256,uint256,address,uint256,bytes)": FunctionFragment;
    "isDepositSourceWrapper()": FunctionFragment;
    "isExternalRedemptionPaused()": FunctionFragment;
    "isVaultAccountFrozen(uint256)": FunctionFragment;
    "isVaultFrozen()": FunctionFragment;
    "marketId()": FunctionFragment;
    "openBorrowPosition(uint256,uint256,uint256)": FunctionFragment;
    "repayAllForBorrowPosition(uint256,uint256,uint256,uint8)": FunctionFragment;
    "setIsVaultDepositSourceWrapper(bool)": FunctionFragment;
    "setShouldVaultSkipTransfer(bool)": FunctionFragment;
    "shouldSkipTransfer()": FunctionFragment;
    "swapExactInputForOutput(uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint8,uint8))": FunctionFragment;
    "swapExactInputForOutputAndRemoveCollateral(uint256,uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint8,uint8))": FunctionFragment;
    "transferFromPositionWithOtherToken(uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "transferFromPositionWithUnderlyingToken(uint256,uint256,uint256)": FunctionFragment;
    "transferIntoPositionWithOtherToken(uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "transferIntoPositionWithUnderlyingToken(uint256,uint256,uint256)": FunctionFragment;
    "underlyingBalanceOf()": FunctionFragment;
    "virtualBalance()": FunctionFragment;
    "withdrawFromVaultForDolomiteMargin(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BORROW_POSITION_PROXY"
      | "DOLOMITE_MARGIN"
      | "OWNER"
      | "VAULT_FACTORY"
      | "WETH"
      | "addCollateralAndSwapExactInputForOutput"
      | "closeBorrowPositionWithOtherTokens"
      | "closeBorrowPositionWithUnderlyingVaultToken"
      | "depositIntoVaultForDolomiteMargin"
      | "dolomiteRegistry"
      | "executeDepositIntoVault"
      | "executeWithdrawalFromVault"
      | "getExecutionFeeForAccountNumber"
      | "getOutputTokenByVaultAccount"
      | "handlerRegistry"
      | "initialize"
      | "initiateUnwrapping"
      | "initiateUnwrappingForLiquidation"
      | "isDepositSourceWrapper"
      | "isExternalRedemptionPaused"
      | "isVaultAccountFrozen"
      | "isVaultFrozen"
      | "marketId"
      | "openBorrowPosition"
      | "repayAllForBorrowPosition"
      | "setIsVaultDepositSourceWrapper"
      | "setShouldVaultSkipTransfer"
      | "shouldSkipTransfer"
      | "swapExactInputForOutput"
      | "swapExactInputForOutputAndRemoveCollateral"
      | "transferFromPositionWithOtherToken"
      | "transferFromPositionWithUnderlyingToken"
      | "transferIntoPositionWithOtherToken"
      | "transferIntoPositionWithUnderlyingToken"
      | "underlyingBalanceOf"
      | "virtualBalance"
      | "withdrawFromVaultForDolomiteMargin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BORROW_POSITION_PROXY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VAULT_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCollateralAndSwapExactInputForOutput",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      IGenericTraderBase.TraderParamStruct[],
      IDolomiteStructs.AccountInfoStruct[],
      IGenericTraderProxyV1.UserConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeBorrowPositionWithOtherTokens",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeBorrowPositionWithUnderlyingVaultToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositIntoVaultForDolomiteMargin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dolomiteRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDepositIntoVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawalFromVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionFeeForAccountNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputTokenByVaultAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handlerRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateUnwrapping",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateUnwrappingForLiquidation",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositSourceWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isExternalRedemptionPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultAccountFrozen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "marketId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openBorrowPosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAllForBorrowPosition",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsVaultDepositSourceWrapper",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldVaultSkipTransfer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldSkipTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInputForOutput",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      IGenericTraderBase.TraderParamStruct[],
      IDolomiteStructs.AccountInfoStruct[],
      IGenericTraderProxyV1.UserConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInputForOutputAndRemoveCollateral",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      IGenericTraderBase.TraderParamStruct[],
      IDolomiteStructs.AccountInfoStruct[],
      IGenericTraderProxyV1.UserConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromPositionWithOtherToken",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromPositionWithUnderlyingToken",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferIntoPositionWithOtherToken",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferIntoPositionWithUnderlyingToken",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceOf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "virtualBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVaultForDolomiteMargin",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BORROW_POSITION_PROXY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralAndSwapExactInputForOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeBorrowPositionWithOtherTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeBorrowPositionWithUnderlyingVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositIntoVaultForDolomiteMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDepositIntoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawalFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionFeeForAccountNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputTokenByVaultAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateUnwrapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateUnwrappingForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDepositSourceWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExternalRedemptionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultAccountFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openBorrowPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAllForBorrowPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsVaultDepositSourceWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldVaultSkipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldSkipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInputForOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInputForOutputAndRemoveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromPositionWithOtherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromPositionWithUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferIntoPositionWithOtherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferIntoPositionWithUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtualBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVaultForDolomiteMargin",
    data: BytesLike
  ): Result;

  events: {
    "ExecutionFeeSet(uint256,uint256)": EventFragment;
    "IsDepositSourceWrapperSet(bool)": EventFragment;
    "IsVaultFrozenSet(bool)": EventFragment;
    "ShouldSkipTransferSet(bool)": EventFragment;
    "VirtualBalanceSet(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutionFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsDepositSourceWrapperSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsVaultFrozenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShouldSkipTransferSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VirtualBalanceSet"): EventFragment;
}

export interface ExecutionFeeSetEventObject {
  _accountNumber: BigNumber;
  _executionFee: BigNumber;
}
export type ExecutionFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ExecutionFeeSetEventObject
>;

export type ExecutionFeeSetEventFilter = TypedEventFilter<ExecutionFeeSetEvent>;

export interface IsDepositSourceWrapperSetEventObject {
  _isDepositSourceWrapper: boolean;
}
export type IsDepositSourceWrapperSetEvent = TypedEvent<
  [boolean],
  IsDepositSourceWrapperSetEventObject
>;

export type IsDepositSourceWrapperSetEventFilter =
  TypedEventFilter<IsDepositSourceWrapperSetEvent>;

export interface IsVaultFrozenSetEventObject {
  _isVaultFrozen: boolean;
}
export type IsVaultFrozenSetEvent = TypedEvent<
  [boolean],
  IsVaultFrozenSetEventObject
>;

export type IsVaultFrozenSetEventFilter =
  TypedEventFilter<IsVaultFrozenSetEvent>;

export interface ShouldSkipTransferSetEventObject {
  _shouldSkipTransfer: boolean;
}
export type ShouldSkipTransferSetEvent = TypedEvent<
  [boolean],
  ShouldSkipTransferSetEventObject
>;

export type ShouldSkipTransferSetEventFilter =
  TypedEventFilter<ShouldSkipTransferSetEvent>;

export interface VirtualBalanceSetEventObject {
  _balance: BigNumber;
}
export type VirtualBalanceSetEvent = TypedEvent<
  [BigNumber],
  VirtualBalanceSetEventObject
>;

export type VirtualBalanceSetEventFilter =
  TypedEventFilter<VirtualBalanceSetEvent>;

export interface IIsolationModeTokenVaultV1WithFreezableAndPausable
  extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIsolationModeTokenVaultV1WithFreezableAndPausableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    OWNER(overrides?: CallOverrides): Promise<[string]>;

    VAULT_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addCollateralAndSwapExactInputForOutput(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    closeBorrowPositionWithOtherTokens(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      collateralMarketIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    closeBorrowPositionWithUnderlyingVaultToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositIntoVaultForDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<[string]>;

    executeDepositIntoVault(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeWithdrawalFromVault(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getExecutionFeeForAccountNumber(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOutputTokenByVaultAccount(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handlerRegistry(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initiateUnwrapping(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    initiateUnwrappingForLiquidation(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDepositSourceWrapper(overrides?: CallOverrides): Promise<[boolean]>;

    isExternalRedemptionPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isVaultAccountFrozen(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVaultFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    marketId(overrides?: CallOverrides): Promise<[BigNumber]>;

    openBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayAllForBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setIsVaultDepositSourceWrapper(
      _isDepositSourceWrapper: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setShouldVaultSkipTransfer(
      _shouldSkipTransfer: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    shouldSkipTransfer(overrides?: CallOverrides): Promise<[boolean]>;

    swapExactInputForOutput(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactInputForOutputAndRemoveCollateral(
      _toAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFromPositionWithOtherToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFromPositionWithUnderlyingToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferIntoPositionWithOtherToken(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferIntoPositionWithUnderlyingToken(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    underlyingBalanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    virtualBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFromVaultForDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  OWNER(overrides?: CallOverrides): Promise<string>;

  VAULT_FACTORY(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addCollateralAndSwapExactInputForOutput(
    _fromAccountNumber: BigNumberish,
    _borrowAccountNumber: BigNumberish,
    _marketIdsPath: BigNumberish[],
    _inputAmountWei: BigNumberish,
    _minOutputAmountWei: BigNumberish,
    _tradersPath: IGenericTraderBase.TraderParamStruct[],
    _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
    _userConfig: IGenericTraderProxyV1.UserConfigStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  closeBorrowPositionWithOtherTokens(
    _borrowAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    collateralMarketIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  closeBorrowPositionWithUnderlyingVaultToken(
    _borrowAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositIntoVaultForDolomiteMargin(
    _toAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

  executeDepositIntoVault(
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeWithdrawalFromVault(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getExecutionFeeForAccountNumber(
    _accountNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOutputTokenByVaultAccount(
    _accountNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  handlerRegistry(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initiateUnwrapping(
    _tradeAccountNumber: BigNumberish,
    _inputAmount: BigNumberish,
    _outputToken: string,
    _minOutputAmount: BigNumberish,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  initiateUnwrappingForLiquidation(
    _tradeAccountNumber: BigNumberish,
    _inputAmount: BigNumberish,
    _outputToken: string,
    _minOutputAmount: BigNumberish,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDepositSourceWrapper(overrides?: CallOverrides): Promise<boolean>;

  isExternalRedemptionPaused(overrides?: CallOverrides): Promise<boolean>;

  isVaultAccountFrozen(
    _accountNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVaultFrozen(overrides?: CallOverrides): Promise<boolean>;

  marketId(overrides?: CallOverrides): Promise<BigNumber>;

  openBorrowPosition(
    _fromAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayAllForBorrowPosition(
    _fromAccountNumber: BigNumberish,
    _borrowAccountNumber: BigNumberish,
    _marketId: BigNumberish,
    _balanceCheckFlag: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setIsVaultDepositSourceWrapper(
    _isDepositSourceWrapper: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setShouldVaultSkipTransfer(
    _shouldSkipTransfer: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  shouldSkipTransfer(overrides?: CallOverrides): Promise<boolean>;

  swapExactInputForOutput(
    _tradeAccountNumber: BigNumberish,
    _marketIdsPath: BigNumberish[],
    _inputAmountWei: BigNumberish,
    _minOutputAmountWei: BigNumberish,
    _tradersPath: IGenericTraderBase.TraderParamStruct[],
    _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
    _userConfig: IGenericTraderProxyV1.UserConfigStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactInputForOutputAndRemoveCollateral(
    _toAccountNumber: BigNumberish,
    _borrowAccountNumber: BigNumberish,
    _marketIdsPath: BigNumberish[],
    _inputAmountWei: BigNumberish,
    _minOutputAmountWei: BigNumberish,
    _tradersPath: IGenericTraderBase.TraderParamStruct[],
    _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
    _userConfig: IGenericTraderProxyV1.UserConfigStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFromPositionWithOtherToken(
    _borrowAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    _marketId: BigNumberish,
    _amountWei: BigNumberish,
    _balanceCheckFlag: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFromPositionWithUnderlyingToken(
    _borrowAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferIntoPositionWithOtherToken(
    _fromAccountNumber: BigNumberish,
    _borrowAccountNumber: BigNumberish,
    _marketId: BigNumberish,
    _amountWei: BigNumberish,
    _balanceCheckFlag: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferIntoPositionWithUnderlyingToken(
    _fromAccountNumber: BigNumberish,
    _borrowAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  underlyingBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  virtualBalance(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFromVaultForDolomiteMargin(
    _fromAccountNumber: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    OWNER(overrides?: CallOverrides): Promise<string>;

    VAULT_FACTORY(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addCollateralAndSwapExactInputForOutput(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    closeBorrowPositionWithOtherTokens(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      collateralMarketIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeBorrowPositionWithUnderlyingVaultToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositIntoVaultForDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

    executeDepositIntoVault(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeWithdrawalFromVault(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getExecutionFeeForAccountNumber(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputTokenByVaultAccount(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    handlerRegistry(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initiateUnwrapping(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateUnwrappingForLiquidation(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isDepositSourceWrapper(overrides?: CallOverrides): Promise<boolean>;

    isExternalRedemptionPaused(overrides?: CallOverrides): Promise<boolean>;

    isVaultAccountFrozen(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVaultFrozen(overrides?: CallOverrides): Promise<boolean>;

    marketId(overrides?: CallOverrides): Promise<BigNumber>;

    openBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayAllForBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsVaultDepositSourceWrapper(
      _isDepositSourceWrapper: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setShouldVaultSkipTransfer(
      _shouldSkipTransfer: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldSkipTransfer(overrides?: CallOverrides): Promise<boolean>;

    swapExactInputForOutput(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactInputForOutputAndRemoveCollateral(
      _toAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromPositionWithOtherToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromPositionWithUnderlyingToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferIntoPositionWithOtherToken(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferIntoPositionWithUnderlyingToken(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    virtualBalance(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromVaultForDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExecutionFeeSet(uint256,uint256)"(
      _accountNumber?: null,
      _executionFee?: null
    ): ExecutionFeeSetEventFilter;
    ExecutionFeeSet(
      _accountNumber?: null,
      _executionFee?: null
    ): ExecutionFeeSetEventFilter;

    "IsDepositSourceWrapperSet(bool)"(
      _isDepositSourceWrapper?: null
    ): IsDepositSourceWrapperSetEventFilter;
    IsDepositSourceWrapperSet(
      _isDepositSourceWrapper?: null
    ): IsDepositSourceWrapperSetEventFilter;

    "IsVaultFrozenSet(bool)"(
      _isVaultFrozen?: null
    ): IsVaultFrozenSetEventFilter;
    IsVaultFrozenSet(_isVaultFrozen?: null): IsVaultFrozenSetEventFilter;

    "ShouldSkipTransferSet(bool)"(
      _shouldSkipTransfer?: null
    ): ShouldSkipTransferSetEventFilter;
    ShouldSkipTransferSet(
      _shouldSkipTransfer?: null
    ): ShouldSkipTransferSetEventFilter;

    "VirtualBalanceSet(uint256)"(_balance?: null): VirtualBalanceSetEventFilter;
    VirtualBalanceSet(_balance?: null): VirtualBalanceSetEventFilter;
  };

  estimateGas: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    VAULT_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateralAndSwapExactInputForOutput(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    closeBorrowPositionWithOtherTokens(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      collateralMarketIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    closeBorrowPositionWithUnderlyingVaultToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositIntoVaultForDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    executeDepositIntoVault(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeWithdrawalFromVault(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getExecutionFeeForAccountNumber(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputTokenByVaultAccount(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handlerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    initiateUnwrapping(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    initiateUnwrappingForLiquidation(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    isDepositSourceWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    isExternalRedemptionPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isVaultAccountFrozen(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVaultFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    marketId(overrides?: CallOverrides): Promise<BigNumber>;

    openBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    repayAllForBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setIsVaultDepositSourceWrapper(
      _isDepositSourceWrapper: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setShouldVaultSkipTransfer(
      _shouldSkipTransfer: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    shouldSkipTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactInputForOutput(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactInputForOutputAndRemoveCollateral(
      _toAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    transferFromPositionWithOtherToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFromPositionWithUnderlyingToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferIntoPositionWithOtherToken(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferIntoPositionWithUnderlyingToken(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    underlyingBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    virtualBalance(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromVaultForDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROW_POSITION_PROXY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VAULT_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollateralAndSwapExactInputForOutput(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    closeBorrowPositionWithOtherTokens(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      collateralMarketIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    closeBorrowPositionWithUnderlyingVaultToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositIntoVaultForDolomiteMargin(
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeDepositIntoVault(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeWithdrawalFromVault(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getExecutionFeeForAccountNumber(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputTokenByVaultAccount(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handlerRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initiateUnwrapping(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initiateUnwrappingForLiquidation(
      _tradeAccountNumber: BigNumberish,
      _inputAmount: BigNumberish,
      _outputToken: string,
      _minOutputAmount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDepositSourceWrapper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExternalRedemptionPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultAccountFrozen(
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayAllForBorrowPosition(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setIsVaultDepositSourceWrapper(
      _isDepositSourceWrapper: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setShouldVaultSkipTransfer(
      _shouldSkipTransfer: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    shouldSkipTransfer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutput(
      _tradeAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutputAndRemoveCollateral(
      _toAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _inputAmountWei: BigNumberish,
      _minOutputAmountWei: BigNumberish,
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      _makerAccounts: IDolomiteStructs.AccountInfoStruct[],
      _userConfig: IGenericTraderProxyV1.UserConfigStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFromPositionWithOtherToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFromPositionWithUnderlyingToken(
      _borrowAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferIntoPositionWithOtherToken(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      _balanceCheckFlag: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferIntoPositionWithUnderlyingToken(
      _fromAccountNumber: BigNumberish,
      _borrowAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    underlyingBalanceOf(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    virtualBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFromVaultForDolomiteMargin(
      _fromAccountNumber: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
