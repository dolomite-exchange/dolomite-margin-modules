/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IUpgradeableAsyncIsolationModeWrapperTrader {
  export type DepositInfoStruct = {
    key: BytesLike;
    vault: string;
    accountNumber: BigNumberish;
    inputToken: string;
    inputAmount: BigNumberish;
    outputAmount: BigNumberish;
    isRetryable: boolean;
  };

  export type DepositInfoStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    key: string;
    vault: string;
    accountNumber: BigNumber;
    inputToken: string;
    inputAmount: BigNumber;
    outputAmount: BigNumber;
    isRetryable: boolean;
  };
}

export declare namespace IUpgradeableAsyncIsolationModeUnwrapperTrader {
  export type WithdrawalInfoStruct = {
    key: BytesLike;
    vault: string;
    accountNumber: BigNumberish;
    inputAmount: BigNumberish;
    outputToken: string;
    outputAmount: BigNumberish;
    isRetryable: boolean;
    isLiquidation: boolean;
    extraData: BytesLike;
  };

  export type WithdrawalInfoStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean,
    boolean,
    string
  ] & {
    key: string;
    vault: string;
    accountNumber: BigNumber;
    inputAmount: BigNumber;
    outputToken: string;
    outputAmount: BigNumber;
    isRetryable: boolean;
    isLiquidation: boolean;
    extraData: string;
  };
}

export declare namespace IDolomiteStructs {
  export type WeiStruct = { sign: boolean; value: BigNumberish };

  export type WeiStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type ParStruct = { sign: boolean; value: BigNumberish };

  export type ParStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };
}

export declare namespace IEventEmitterRegistry {
  export type BalanceUpdateStruct = {
    deltaWei: IDolomiteStructs.WeiStruct;
    newPar: IDolomiteStructs.ParStruct;
  };

  export type BalanceUpdateStructOutput = [
    IDolomiteStructs.WeiStructOutput,
    IDolomiteStructs.ParStructOutput
  ] & {
    deltaWei: IDolomiteStructs.WeiStructOutput;
    newPar: IDolomiteStructs.ParStructOutput;
  };
}

export declare namespace IGenericTraderBase {
  export type TraderParamStruct = {
    traderType: BigNumberish;
    makerAccountIndex: BigNumberish;
    trader: string;
    tradeData: BytesLike;
  };

  export type TraderParamStructOutput = [number, BigNumber, string, string] & {
    traderType: number;
    makerAccountIndex: BigNumber;
    trader: string;
    tradeData: string;
  };
}

export interface EventEmitterRegistryInterface extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "emitAsyncDepositCancelled(bytes32,address)": FunctionFragment;
    "emitAsyncDepositCancelledFailed(bytes32,address,string)": FunctionFragment;
    "emitAsyncDepositCreated(bytes32,address,(bytes32,address,uint256,address,uint256,uint256,bool))": FunctionFragment;
    "emitAsyncDepositExecuted(bytes32,address)": FunctionFragment;
    "emitAsyncDepositFailed(bytes32,address,string)": FunctionFragment;
    "emitAsyncDepositOutputAmountUpdated(bytes32,address,uint256)": FunctionFragment;
    "emitAsyncWithdrawalCancelled(bytes32,address)": FunctionFragment;
    "emitAsyncWithdrawalCreated(bytes32,address,(bytes32,address,uint256,uint256,address,uint256,bool,bool,bytes))": FunctionFragment;
    "emitAsyncWithdrawalExecuted(bytes32,address)": FunctionFragment;
    "emitAsyncWithdrawalFailed(bytes32,address,string)": FunctionFragment;
    "emitAsyncWithdrawalOutputAmountUpdated(bytes32,address,uint256)": FunctionFragment;
    "emitBorrowPositionOpen(address,uint256)": FunctionFragment;
    "emitMarginPositionClose(address,uint256,address,address,address,((bool,uint256),(bool,uint128)),((bool,uint256),(bool,uint128)),((bool,uint256),(bool,uint128)))": FunctionFragment;
    "emitMarginPositionOpen(address,uint256,address,address,address,((bool,uint256),(bool,uint128)),((bool,uint256),(bool,uint128)),((bool,uint256),(bool,uint128)))": FunctionFragment;
    "emitZapExecuted(address,uint256,uint256[],(uint8,uint256,address,bytes)[])": FunctionFragment;
    "initialize()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "emitAsyncDepositCancelled"
      | "emitAsyncDepositCancelledFailed"
      | "emitAsyncDepositCreated"
      | "emitAsyncDepositExecuted"
      | "emitAsyncDepositFailed"
      | "emitAsyncDepositOutputAmountUpdated"
      | "emitAsyncWithdrawalCancelled"
      | "emitAsyncWithdrawalCreated"
      | "emitAsyncWithdrawalExecuted"
      | "emitAsyncWithdrawalFailed"
      | "emitAsyncWithdrawalOutputAmountUpdated"
      | "emitBorrowPositionOpen"
      | "emitMarginPositionClose"
      | "emitMarginPositionOpen"
      | "emitZapExecuted"
      | "initialize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncDepositCancelled",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncDepositCancelledFailed",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncDepositCreated",
    values: [
      BytesLike,
      string,
      IUpgradeableAsyncIsolationModeWrapperTrader.DepositInfoStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncDepositExecuted",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncDepositFailed",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncDepositOutputAmountUpdated",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncWithdrawalCancelled",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncWithdrawalCreated",
    values: [
      BytesLike,
      string,
      IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncWithdrawalExecuted",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncWithdrawalFailed",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAsyncWithdrawalOutputAmountUpdated",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitBorrowPositionOpen",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitMarginPositionClose",
    values: [
      string,
      BigNumberish,
      string,
      string,
      string,
      IEventEmitterRegistry.BalanceUpdateStruct,
      IEventEmitterRegistry.BalanceUpdateStruct,
      IEventEmitterRegistry.BalanceUpdateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitMarginPositionOpen",
    values: [
      string,
      BigNumberish,
      string,
      string,
      string,
      IEventEmitterRegistry.BalanceUpdateStruct,
      IEventEmitterRegistry.BalanceUpdateStruct,
      IEventEmitterRegistry.BalanceUpdateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitZapExecuted",
    values: [
      string,
      BigNumberish,
      BigNumberish[],
      IGenericTraderBase.TraderParamStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncDepositCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncDepositCancelledFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncDepositCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncDepositExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncDepositFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncDepositOutputAmountUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncWithdrawalCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncWithdrawalCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncWithdrawalExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncWithdrawalFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitAsyncWithdrawalOutputAmountUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitBorrowPositionOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitMarginPositionClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitMarginPositionOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitZapExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {
    "AsyncDepositCancelled(bytes32,address)": EventFragment;
    "AsyncDepositCancelledFailed(bytes32,address,string)": EventFragment;
    "AsyncDepositCreated(bytes32,address,tuple)": EventFragment;
    "AsyncDepositExecuted(bytes32,address)": EventFragment;
    "AsyncDepositFailed(bytes32,address,string)": EventFragment;
    "AsyncDepositOutputAmountUpdated(bytes32,address,uint256)": EventFragment;
    "AsyncWithdrawalCancelled(bytes32,address)": EventFragment;
    "AsyncWithdrawalCreated(bytes32,address,tuple)": EventFragment;
    "AsyncWithdrawalExecuted(bytes32,address)": EventFragment;
    "AsyncWithdrawalFailed(bytes32,address,string)": EventFragment;
    "AsyncWithdrawalOutputAmountUpdated(bytes32,address,uint256)": EventFragment;
    "BorrowPositionOpen(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MarginPositionClose(address,uint256,address,address,address,tuple,tuple,tuple)": EventFragment;
    "MarginPositionOpen(address,uint256,address,address,address,tuple,tuple,tuple)": EventFragment;
    "ZapExecuted(address,uint256,uint256[],tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AsyncDepositCancelled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AsyncDepositCancelledFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsyncDepositCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsyncDepositExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsyncDepositFailed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AsyncDepositOutputAmountUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsyncWithdrawalCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsyncWithdrawalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsyncWithdrawalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AsyncWithdrawalFailed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AsyncWithdrawalOutputAmountUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowPositionOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginPositionClose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginPositionOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZapExecuted"): EventFragment;
}

export interface AsyncDepositCancelledEventObject {
  key: string;
  token: string;
}
export type AsyncDepositCancelledEvent = TypedEvent<
  [string, string],
  AsyncDepositCancelledEventObject
>;

export type AsyncDepositCancelledEventFilter =
  TypedEventFilter<AsyncDepositCancelledEvent>;

export interface AsyncDepositCancelledFailedEventObject {
  key: string;
  token: string;
  reason: string;
}
export type AsyncDepositCancelledFailedEvent = TypedEvent<
  [string, string, string],
  AsyncDepositCancelledFailedEventObject
>;

export type AsyncDepositCancelledFailedEventFilter =
  TypedEventFilter<AsyncDepositCancelledFailedEvent>;

export interface AsyncDepositCreatedEventObject {
  key: string;
  token: string;
  deposit: IUpgradeableAsyncIsolationModeWrapperTrader.DepositInfoStructOutput;
}
export type AsyncDepositCreatedEvent = TypedEvent<
  [
    string,
    string,
    IUpgradeableAsyncIsolationModeWrapperTrader.DepositInfoStructOutput
  ],
  AsyncDepositCreatedEventObject
>;

export type AsyncDepositCreatedEventFilter =
  TypedEventFilter<AsyncDepositCreatedEvent>;

export interface AsyncDepositExecutedEventObject {
  key: string;
  token: string;
}
export type AsyncDepositExecutedEvent = TypedEvent<
  [string, string],
  AsyncDepositExecutedEventObject
>;

export type AsyncDepositExecutedEventFilter =
  TypedEventFilter<AsyncDepositExecutedEvent>;

export interface AsyncDepositFailedEventObject {
  key: string;
  token: string;
  reason: string;
}
export type AsyncDepositFailedEvent = TypedEvent<
  [string, string, string],
  AsyncDepositFailedEventObject
>;

export type AsyncDepositFailedEventFilter =
  TypedEventFilter<AsyncDepositFailedEvent>;

export interface AsyncDepositOutputAmountUpdatedEventObject {
  key: string;
  token: string;
  outputAmount: BigNumber;
}
export type AsyncDepositOutputAmountUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  AsyncDepositOutputAmountUpdatedEventObject
>;

export type AsyncDepositOutputAmountUpdatedEventFilter =
  TypedEventFilter<AsyncDepositOutputAmountUpdatedEvent>;

export interface AsyncWithdrawalCancelledEventObject {
  key: string;
  token: string;
}
export type AsyncWithdrawalCancelledEvent = TypedEvent<
  [string, string],
  AsyncWithdrawalCancelledEventObject
>;

export type AsyncWithdrawalCancelledEventFilter =
  TypedEventFilter<AsyncWithdrawalCancelledEvent>;

export interface AsyncWithdrawalCreatedEventObject {
  key: string;
  token: string;
  withdrawal: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStructOutput;
}
export type AsyncWithdrawalCreatedEvent = TypedEvent<
  [
    string,
    string,
    IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStructOutput
  ],
  AsyncWithdrawalCreatedEventObject
>;

export type AsyncWithdrawalCreatedEventFilter =
  TypedEventFilter<AsyncWithdrawalCreatedEvent>;

export interface AsyncWithdrawalExecutedEventObject {
  key: string;
  token: string;
}
export type AsyncWithdrawalExecutedEvent = TypedEvent<
  [string, string],
  AsyncWithdrawalExecutedEventObject
>;

export type AsyncWithdrawalExecutedEventFilter =
  TypedEventFilter<AsyncWithdrawalExecutedEvent>;

export interface AsyncWithdrawalFailedEventObject {
  key: string;
  token: string;
  reason: string;
}
export type AsyncWithdrawalFailedEvent = TypedEvent<
  [string, string, string],
  AsyncWithdrawalFailedEventObject
>;

export type AsyncWithdrawalFailedEventFilter =
  TypedEventFilter<AsyncWithdrawalFailedEvent>;

export interface AsyncWithdrawalOutputAmountUpdatedEventObject {
  key: string;
  token: string;
  outputAmount: BigNumber;
}
export type AsyncWithdrawalOutputAmountUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  AsyncWithdrawalOutputAmountUpdatedEventObject
>;

export type AsyncWithdrawalOutputAmountUpdatedEventFilter =
  TypedEventFilter<AsyncWithdrawalOutputAmountUpdatedEvent>;

export interface BorrowPositionOpenEventObject {
  borrower: string;
  borrowAccountNumber: BigNumber;
}
export type BorrowPositionOpenEvent = TypedEvent<
  [string, BigNumber],
  BorrowPositionOpenEventObject
>;

export type BorrowPositionOpenEventFilter =
  TypedEventFilter<BorrowPositionOpenEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MarginPositionCloseEventObject {
  accountOwner: string;
  accountNumber: BigNumber;
  inputToken: string;
  outputToken: string;
  withdrawalToken: string;
  inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStructOutput;
  outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStructOutput;
  marginWithdrawalUpdate: IEventEmitterRegistry.BalanceUpdateStructOutput;
}
export type MarginPositionCloseEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    string,
    IEventEmitterRegistry.BalanceUpdateStructOutput,
    IEventEmitterRegistry.BalanceUpdateStructOutput,
    IEventEmitterRegistry.BalanceUpdateStructOutput
  ],
  MarginPositionCloseEventObject
>;

export type MarginPositionCloseEventFilter =
  TypedEventFilter<MarginPositionCloseEvent>;

export interface MarginPositionOpenEventObject {
  accountOwner: string;
  accountNumber: BigNumber;
  inputToken: string;
  outputToken: string;
  depositToken: string;
  inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStructOutput;
  outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStructOutput;
  marginDepositUpdate: IEventEmitterRegistry.BalanceUpdateStructOutput;
}
export type MarginPositionOpenEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    string,
    IEventEmitterRegistry.BalanceUpdateStructOutput,
    IEventEmitterRegistry.BalanceUpdateStructOutput,
    IEventEmitterRegistry.BalanceUpdateStructOutput
  ],
  MarginPositionOpenEventObject
>;

export type MarginPositionOpenEventFilter =
  TypedEventFilter<MarginPositionOpenEvent>;

export interface ZapExecutedEventObject {
  accountOwner: string;
  accountNumber: BigNumber;
  marketIdsPath: BigNumber[];
  tradersPath: IGenericTraderBase.TraderParamStructOutput[];
}
export type ZapExecutedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber[],
    IGenericTraderBase.TraderParamStructOutput[]
  ],
  ZapExecutedEventObject
>;

export type ZapExecutedEventFilter = TypedEventFilter<ZapExecutedEvent>;

export interface EventEmitterRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventEmitterRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    emitAsyncDepositCancelled(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncDepositCancelledFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncDepositCreated(
      _key: BytesLike,
      _token: string,
      _deposit: IUpgradeableAsyncIsolationModeWrapperTrader.DepositInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncDepositExecuted(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncDepositFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncDepositOutputAmountUpdated(
      _key: BytesLike,
      _token: string,
      _outputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncWithdrawalCancelled(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncWithdrawalCreated(
      _key: BytesLike,
      _token: string,
      _withdrawal: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncWithdrawalExecuted(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncWithdrawalFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitAsyncWithdrawalOutputAmountUpdated(
      _key: BytesLike,
      _token: string,
      _outputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitBorrowPositionOpen(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitMarginPositionClose(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputToken: string,
      _outputToken: string,
      _withdrawalToken: string,
      _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _marginWithdrawalUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitMarginPositionOpen(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputToken: string,
      _outputToken: string,
      _depositToken: string,
      _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _marginDepositUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitZapExecuted(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  emitAsyncDepositCancelled(
    _key: BytesLike,
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncDepositCancelledFailed(
    _key: BytesLike,
    _token: string,
    _reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncDepositCreated(
    _key: BytesLike,
    _token: string,
    _deposit: IUpgradeableAsyncIsolationModeWrapperTrader.DepositInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncDepositExecuted(
    _key: BytesLike,
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncDepositFailed(
    _key: BytesLike,
    _token: string,
    _reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncDepositOutputAmountUpdated(
    _key: BytesLike,
    _token: string,
    _outputAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncWithdrawalCancelled(
    _key: BytesLike,
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncWithdrawalCreated(
    _key: BytesLike,
    _token: string,
    _withdrawal: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncWithdrawalExecuted(
    _key: BytesLike,
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncWithdrawalFailed(
    _key: BytesLike,
    _token: string,
    _reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitAsyncWithdrawalOutputAmountUpdated(
    _key: BytesLike,
    _token: string,
    _outputAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitBorrowPositionOpen(
    _accountOwner: string,
    _accountNumber: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitMarginPositionClose(
    _accountOwner: string,
    _accountNumber: BigNumberish,
    _inputToken: string,
    _outputToken: string,
    _withdrawalToken: string,
    _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
    _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
    _marginWithdrawalUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitMarginPositionOpen(
    _accountOwner: string,
    _accountNumber: BigNumberish,
    _inputToken: string,
    _outputToken: string,
    _depositToken: string,
    _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
    _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
    _marginDepositUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitZapExecuted(
    _accountOwner: string,
    _accountNumber: BigNumberish,
    _marketIdsPath: BigNumberish[],
    _tradersPath: IGenericTraderBase.TraderParamStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    emitAsyncDepositCancelled(
      _key: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncDepositCancelledFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncDepositCreated(
      _key: BytesLike,
      _token: string,
      _deposit: IUpgradeableAsyncIsolationModeWrapperTrader.DepositInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncDepositExecuted(
      _key: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncDepositFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncDepositOutputAmountUpdated(
      _key: BytesLike,
      _token: string,
      _outputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncWithdrawalCancelled(
      _key: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncWithdrawalCreated(
      _key: BytesLike,
      _token: string,
      _withdrawal: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncWithdrawalExecuted(
      _key: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncWithdrawalFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAsyncWithdrawalOutputAmountUpdated(
      _key: BytesLike,
      _token: string,
      _outputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitBorrowPositionOpen(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitMarginPositionClose(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputToken: string,
      _outputToken: string,
      _withdrawalToken: string,
      _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _marginWithdrawalUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitMarginPositionOpen(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputToken: string,
      _outputToken: string,
      _depositToken: string,
      _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _marginDepositUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitZapExecuted(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AsyncDepositCancelled(bytes32,address)"(
      key?: BytesLike | null,
      token?: string | null
    ): AsyncDepositCancelledEventFilter;
    AsyncDepositCancelled(
      key?: BytesLike | null,
      token?: string | null
    ): AsyncDepositCancelledEventFilter;

    "AsyncDepositCancelledFailed(bytes32,address,string)"(
      key?: BytesLike | null,
      token?: string | null,
      reason?: null
    ): AsyncDepositCancelledFailedEventFilter;
    AsyncDepositCancelledFailed(
      key?: BytesLike | null,
      token?: string | null,
      reason?: null
    ): AsyncDepositCancelledFailedEventFilter;

    "AsyncDepositCreated(bytes32,address,tuple)"(
      key?: BytesLike | null,
      token?: string | null,
      deposit?: null
    ): AsyncDepositCreatedEventFilter;
    AsyncDepositCreated(
      key?: BytesLike | null,
      token?: string | null,
      deposit?: null
    ): AsyncDepositCreatedEventFilter;

    "AsyncDepositExecuted(bytes32,address)"(
      key?: BytesLike | null,
      token?: string | null
    ): AsyncDepositExecutedEventFilter;
    AsyncDepositExecuted(
      key?: BytesLike | null,
      token?: string | null
    ): AsyncDepositExecutedEventFilter;

    "AsyncDepositFailed(bytes32,address,string)"(
      key?: BytesLike | null,
      token?: string | null,
      reason?: null
    ): AsyncDepositFailedEventFilter;
    AsyncDepositFailed(
      key?: BytesLike | null,
      token?: string | null,
      reason?: null
    ): AsyncDepositFailedEventFilter;

    "AsyncDepositOutputAmountUpdated(bytes32,address,uint256)"(
      key?: BytesLike | null,
      token?: string | null,
      outputAmount?: null
    ): AsyncDepositOutputAmountUpdatedEventFilter;
    AsyncDepositOutputAmountUpdated(
      key?: BytesLike | null,
      token?: string | null,
      outputAmount?: null
    ): AsyncDepositOutputAmountUpdatedEventFilter;

    "AsyncWithdrawalCancelled(bytes32,address)"(
      key?: BytesLike | null,
      token?: string | null
    ): AsyncWithdrawalCancelledEventFilter;
    AsyncWithdrawalCancelled(
      key?: BytesLike | null,
      token?: string | null
    ): AsyncWithdrawalCancelledEventFilter;

    "AsyncWithdrawalCreated(bytes32,address,tuple)"(
      key?: BytesLike | null,
      token?: string | null,
      withdrawal?: null
    ): AsyncWithdrawalCreatedEventFilter;
    AsyncWithdrawalCreated(
      key?: BytesLike | null,
      token?: string | null,
      withdrawal?: null
    ): AsyncWithdrawalCreatedEventFilter;

    "AsyncWithdrawalExecuted(bytes32,address)"(
      key?: BytesLike | null,
      token?: string | null
    ): AsyncWithdrawalExecutedEventFilter;
    AsyncWithdrawalExecuted(
      key?: BytesLike | null,
      token?: string | null
    ): AsyncWithdrawalExecutedEventFilter;

    "AsyncWithdrawalFailed(bytes32,address,string)"(
      key?: BytesLike | null,
      token?: string | null,
      reason?: null
    ): AsyncWithdrawalFailedEventFilter;
    AsyncWithdrawalFailed(
      key?: BytesLike | null,
      token?: string | null,
      reason?: null
    ): AsyncWithdrawalFailedEventFilter;

    "AsyncWithdrawalOutputAmountUpdated(bytes32,address,uint256)"(
      key?: BytesLike | null,
      token?: string | null,
      outputAmount?: null
    ): AsyncWithdrawalOutputAmountUpdatedEventFilter;
    AsyncWithdrawalOutputAmountUpdated(
      key?: BytesLike | null,
      token?: string | null,
      outputAmount?: null
    ): AsyncWithdrawalOutputAmountUpdatedEventFilter;

    "BorrowPositionOpen(address,uint256)"(
      borrower?: string | null,
      borrowAccountNumber?: BigNumberish | null
    ): BorrowPositionOpenEventFilter;
    BorrowPositionOpen(
      borrower?: string | null,
      borrowAccountNumber?: BigNumberish | null
    ): BorrowPositionOpenEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MarginPositionClose(address,uint256,address,address,address,tuple,tuple,tuple)"(
      accountOwner?: string | null,
      accountNumber?: BigNumberish | null,
      inputToken?: null,
      outputToken?: null,
      withdrawalToken?: null,
      inputBalanceUpdate?: null,
      outputBalanceUpdate?: null,
      marginWithdrawalUpdate?: null
    ): MarginPositionCloseEventFilter;
    MarginPositionClose(
      accountOwner?: string | null,
      accountNumber?: BigNumberish | null,
      inputToken?: null,
      outputToken?: null,
      withdrawalToken?: null,
      inputBalanceUpdate?: null,
      outputBalanceUpdate?: null,
      marginWithdrawalUpdate?: null
    ): MarginPositionCloseEventFilter;

    "MarginPositionOpen(address,uint256,address,address,address,tuple,tuple,tuple)"(
      accountOwner?: string | null,
      accountNumber?: BigNumberish | null,
      inputToken?: null,
      outputToken?: null,
      depositToken?: null,
      inputBalanceUpdate?: null,
      outputBalanceUpdate?: null,
      marginDepositUpdate?: null
    ): MarginPositionOpenEventFilter;
    MarginPositionOpen(
      accountOwner?: string | null,
      accountNumber?: BigNumberish | null,
      inputToken?: null,
      outputToken?: null,
      depositToken?: null,
      inputBalanceUpdate?: null,
      outputBalanceUpdate?: null,
      marginDepositUpdate?: null
    ): MarginPositionOpenEventFilter;

    "ZapExecuted(address,uint256,uint256[],tuple[])"(
      accountOwner?: string | null,
      accountNumber?: null,
      marketIdsPath?: null,
      tradersPath?: null
    ): ZapExecutedEventFilter;
    ZapExecuted(
      accountOwner?: string | null,
      accountNumber?: null,
      marketIdsPath?: null,
      tradersPath?: null
    ): ZapExecutedEventFilter;
  };

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    emitAsyncDepositCancelled(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncDepositCancelledFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncDepositCreated(
      _key: BytesLike,
      _token: string,
      _deposit: IUpgradeableAsyncIsolationModeWrapperTrader.DepositInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncDepositExecuted(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncDepositFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncDepositOutputAmountUpdated(
      _key: BytesLike,
      _token: string,
      _outputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncWithdrawalCancelled(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncWithdrawalCreated(
      _key: BytesLike,
      _token: string,
      _withdrawal: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncWithdrawalExecuted(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncWithdrawalFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitAsyncWithdrawalOutputAmountUpdated(
      _key: BytesLike,
      _token: string,
      _outputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitBorrowPositionOpen(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitMarginPositionClose(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputToken: string,
      _outputToken: string,
      _withdrawalToken: string,
      _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _marginWithdrawalUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitMarginPositionOpen(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputToken: string,
      _outputToken: string,
      _depositToken: string,
      _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _marginDepositUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitZapExecuted(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitAsyncDepositCancelled(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncDepositCancelledFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncDepositCreated(
      _key: BytesLike,
      _token: string,
      _deposit: IUpgradeableAsyncIsolationModeWrapperTrader.DepositInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncDepositExecuted(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncDepositFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncDepositOutputAmountUpdated(
      _key: BytesLike,
      _token: string,
      _outputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncWithdrawalCancelled(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncWithdrawalCreated(
      _key: BytesLike,
      _token: string,
      _withdrawal: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncWithdrawalExecuted(
      _key: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncWithdrawalFailed(
      _key: BytesLike,
      _token: string,
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitAsyncWithdrawalOutputAmountUpdated(
      _key: BytesLike,
      _token: string,
      _outputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitBorrowPositionOpen(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitMarginPositionClose(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputToken: string,
      _outputToken: string,
      _withdrawalToken: string,
      _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _marginWithdrawalUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitMarginPositionOpen(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _inputToken: string,
      _outputToken: string,
      _depositToken: string,
      _inputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _outputBalanceUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      _marginDepositUpdate: IEventEmitterRegistry.BalanceUpdateStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitZapExecuted(
      _accountOwner: string,
      _accountNumber: BigNumberish,
      _marketIdsPath: BigNumberish[],
      _tradersPath: IGenericTraderBase.TraderParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
