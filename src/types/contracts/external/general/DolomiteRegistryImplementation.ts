/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface DolomiteRegistryImplementationInterface
  extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "chainlinkPriceOracle()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "expiry()": FunctionFragment;
    "genericTraderProxy()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "liquidatorAssetRegistry()": FunctionFragment;
    "ownerSetChainlinkPriceOracle(address)": FunctionFragment;
    "ownerSetEventEmitter(address)": FunctionFragment;
    "ownerSetExpiry(address)": FunctionFragment;
    "ownerSetGenericTraderProxy(address)": FunctionFragment;
    "ownerSetLiquidatorAssetRegistry(address)": FunctionFragment;
    "ownerSetSlippageToleranceForPauseSentinel(uint256)": FunctionFragment;
    "slippageToleranceForPauseSentinel()": FunctionFragment;
    "slippageToleranceForPauseSentinelBase()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "chainlinkPriceOracle"
      | "eventEmitter"
      | "expiry"
      | "genericTraderProxy"
      | "initialize"
      | "liquidatorAssetRegistry"
      | "ownerSetChainlinkPriceOracle"
      | "ownerSetEventEmitter"
      | "ownerSetExpiry"
      | "ownerSetGenericTraderProxy"
      | "ownerSetLiquidatorAssetRegistry"
      | "ownerSetSlippageToleranceForPauseSentinel"
      | "slippageToleranceForPauseSentinel"
      | "slippageToleranceForPauseSentinelBase"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "genericTraderProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatorAssetRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetChainlinkPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetEventEmitter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetExpiry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGenericTraderProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetLiquidatorAssetRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetSlippageToleranceForPauseSentinel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slippageToleranceForPauseSentinel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slippageToleranceForPauseSentinelBase",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "genericTraderProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorAssetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetChainlinkPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetEventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGenericTraderProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetLiquidatorAssetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetSlippageToleranceForPauseSentinel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slippageToleranceForPauseSentinel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slippageToleranceForPauseSentinelBase",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkPriceOracleSet(address)": EventFragment;
    "EventEmitterSet(address)": EventFragment;
    "ExpirySet(address)": EventFragment;
    "GenericTraderProxySet(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LiquidatorAssetRegistrySet(address)": EventFragment;
    "SlippageToleranceForPauseSentinelSet(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkPriceOracleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventEmitterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpirySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GenericTraderProxySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatorAssetRegistrySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SlippageToleranceForPauseSentinelSet"
  ): EventFragment;
}

export interface ChainlinkPriceOracleSetEventObject {
  _chainlinkPriceOracle: string;
}
export type ChainlinkPriceOracleSetEvent = TypedEvent<
  [string],
  ChainlinkPriceOracleSetEventObject
>;

export type ChainlinkPriceOracleSetEventFilter =
  TypedEventFilter<ChainlinkPriceOracleSetEvent>;

export interface EventEmitterSetEventObject {
  _eventEmitter: string;
}
export type EventEmitterSetEvent = TypedEvent<
  [string],
  EventEmitterSetEventObject
>;

export type EventEmitterSetEventFilter = TypedEventFilter<EventEmitterSetEvent>;

export interface ExpirySetEventObject {
  _expiry: string;
}
export type ExpirySetEvent = TypedEvent<[string], ExpirySetEventObject>;

export type ExpirySetEventFilter = TypedEventFilter<ExpirySetEvent>;

export interface GenericTraderProxySetEventObject {
  _genericTraderProxy: string;
}
export type GenericTraderProxySetEvent = TypedEvent<
  [string],
  GenericTraderProxySetEventObject
>;

export type GenericTraderProxySetEventFilter =
  TypedEventFilter<GenericTraderProxySetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidatorAssetRegistrySetEventObject {
  _liquidatorAssetRegistry: string;
}
export type LiquidatorAssetRegistrySetEvent = TypedEvent<
  [string],
  LiquidatorAssetRegistrySetEventObject
>;

export type LiquidatorAssetRegistrySetEventFilter =
  TypedEventFilter<LiquidatorAssetRegistrySetEvent>;

export interface SlippageToleranceForPauseSentinelSetEventObject {
  _slippageTolerance: BigNumber;
}
export type SlippageToleranceForPauseSentinelSetEvent = TypedEvent<
  [BigNumber],
  SlippageToleranceForPauseSentinelSetEventObject
>;

export type SlippageToleranceForPauseSentinelSetEventFilter =
  TypedEventFilter<SlippageToleranceForPauseSentinelSetEvent>;

export interface DolomiteRegistryImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DolomiteRegistryImplementationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    chainlinkPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    expiry(overrides?: CallOverrides): Promise<[string]>;

    genericTraderProxy(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _genericTraderProxy: string,
      _expiry: string,
      _liquidatorAssetRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidatorAssetRegistry(overrides?: CallOverrides): Promise<[string]>;

    ownerSetChainlinkPriceOracle(
      _chainlinkPriceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetEventEmitter(
      _eventEmitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetExpiry(
      _expiry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGenericTraderProxy(
      _genericTraderProxy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetLiquidatorAssetRegistry(
      _liquidatorAssetRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetSlippageToleranceForPauseSentinel(
      _slippageToleranceForPauseSentinel: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    slippageToleranceForPauseSentinel(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    slippageToleranceForPauseSentinelBase(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  chainlinkPriceOracle(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  expiry(overrides?: CallOverrides): Promise<string>;

  genericTraderProxy(overrides?: CallOverrides): Promise<string>;

  initialize(
    _genericTraderProxy: string,
    _expiry: string,
    _liquidatorAssetRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidatorAssetRegistry(overrides?: CallOverrides): Promise<string>;

  ownerSetChainlinkPriceOracle(
    _chainlinkPriceOracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetEventEmitter(
    _eventEmitter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetExpiry(
    _expiry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGenericTraderProxy(
    _genericTraderProxy: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetLiquidatorAssetRegistry(
    _liquidatorAssetRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetSlippageToleranceForPauseSentinel(
    _slippageToleranceForPauseSentinel: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  slippageToleranceForPauseSentinel(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  slippageToleranceForPauseSentinelBase(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    chainlinkPriceOracle(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    expiry(overrides?: CallOverrides): Promise<string>;

    genericTraderProxy(overrides?: CallOverrides): Promise<string>;

    initialize(
      _genericTraderProxy: string,
      _expiry: string,
      _liquidatorAssetRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatorAssetRegistry(overrides?: CallOverrides): Promise<string>;

    ownerSetChainlinkPriceOracle(
      _chainlinkPriceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetEventEmitter(
      _eventEmitter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetExpiry(_expiry: string, overrides?: CallOverrides): Promise<void>;

    ownerSetGenericTraderProxy(
      _genericTraderProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetLiquidatorAssetRegistry(
      _liquidatorAssetRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetSlippageToleranceForPauseSentinel(
      _slippageToleranceForPauseSentinel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slippageToleranceForPauseSentinel(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slippageToleranceForPauseSentinelBase(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ChainlinkPriceOracleSet(address)"(
      _chainlinkPriceOracle?: string | null
    ): ChainlinkPriceOracleSetEventFilter;
    ChainlinkPriceOracleSet(
      _chainlinkPriceOracle?: string | null
    ): ChainlinkPriceOracleSetEventFilter;

    "EventEmitterSet(address)"(
      _eventEmitter?: string | null
    ): EventEmitterSetEventFilter;
    EventEmitterSet(_eventEmitter?: string | null): EventEmitterSetEventFilter;

    "ExpirySet(address)"(_expiry?: string | null): ExpirySetEventFilter;
    ExpirySet(_expiry?: string | null): ExpirySetEventFilter;

    "GenericTraderProxySet(address)"(
      _genericTraderProxy?: string | null
    ): GenericTraderProxySetEventFilter;
    GenericTraderProxySet(
      _genericTraderProxy?: string | null
    ): GenericTraderProxySetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LiquidatorAssetRegistrySet(address)"(
      _liquidatorAssetRegistry?: string | null
    ): LiquidatorAssetRegistrySetEventFilter;
    LiquidatorAssetRegistrySet(
      _liquidatorAssetRegistry?: string | null
    ): LiquidatorAssetRegistrySetEventFilter;

    "SlippageToleranceForPauseSentinelSet(uint256)"(
      _slippageTolerance?: null
    ): SlippageToleranceForPauseSentinelSetEventFilter;
    SlippageToleranceForPauseSentinelSet(
      _slippageTolerance?: null
    ): SlippageToleranceForPauseSentinelSetEventFilter;
  };

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    genericTraderProxy(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _genericTraderProxy: string,
      _expiry: string,
      _liquidatorAssetRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidatorAssetRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetChainlinkPriceOracle(
      _chainlinkPriceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetEventEmitter(
      _eventEmitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetExpiry(
      _expiry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGenericTraderProxy(
      _genericTraderProxy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetLiquidatorAssetRegistry(
      _liquidatorAssetRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetSlippageToleranceForPauseSentinel(
      _slippageToleranceForPauseSentinel: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    slippageToleranceForPauseSentinel(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slippageToleranceForPauseSentinelBase(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkPriceOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genericTraderProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _genericTraderProxy: string,
      _expiry: string,
      _liquidatorAssetRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidatorAssetRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetChainlinkPriceOracle(
      _chainlinkPriceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetEventEmitter(
      _eventEmitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetExpiry(
      _expiry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGenericTraderProxy(
      _genericTraderProxy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetLiquidatorAssetRegistry(
      _liquidatorAssetRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetSlippageToleranceForPauseSentinel(
      _slippageToleranceForPauseSentinel: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    slippageToleranceForPauseSentinel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slippageToleranceForPauseSentinelBase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
