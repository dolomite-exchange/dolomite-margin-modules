/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface JonesUSDCRegistryInterface extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "dolomiteRegistry()": FunctionFragment;
    "glpAdapter()": FunctionFragment;
    "glpVaultRouter()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "initializeUnwrapperTraders(address,address)": FunctionFragment;
    "jUSDC()": FunctionFragment;
    "jUSDCFarm()": FunctionFragment;
    "ownerSetDolomiteRegistry(address)": FunctionFragment;
    "ownerSetGlpAdapter(address)": FunctionFragment;
    "ownerSetGlpVaultRouter(address)": FunctionFragment;
    "ownerSetJUSDC(address)": FunctionFragment;
    "ownerSetJUSDCFarm(address)": FunctionFragment;
    "ownerSetUnwrapperTraderForLiquidation(address)": FunctionFragment;
    "ownerSetUnwrapperTraderForZap(address)": FunctionFragment;
    "ownerSetUsdcReceiptToken(address)": FunctionFragment;
    "ownerSetWhitelistController(address)": FunctionFragment;
    "unwrapperTraderForLiquidation()": FunctionFragment;
    "unwrapperTraderForZap()": FunctionFragment;
    "usdcReceiptToken()": FunctionFragment;
    "whitelistController()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "dolomiteRegistry"
      | "glpAdapter"
      | "glpVaultRouter"
      | "initialize"
      | "initializeUnwrapperTraders"
      | "jUSDC"
      | "jUSDCFarm"
      | "ownerSetDolomiteRegistry"
      | "ownerSetGlpAdapter"
      | "ownerSetGlpVaultRouter"
      | "ownerSetJUSDC"
      | "ownerSetJUSDCFarm"
      | "ownerSetUnwrapperTraderForLiquidation"
      | "ownerSetUnwrapperTraderForZap"
      | "ownerSetUsdcReceiptToken"
      | "ownerSetWhitelistController"
      | "unwrapperTraderForLiquidation"
      | "unwrapperTraderForZap"
      | "usdcReceiptToken"
      | "whitelistController"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dolomiteRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "glpAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "glpVaultRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeUnwrapperTraders",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "jUSDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "jUSDCFarm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerSetDolomiteRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlpAdapter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlpVaultRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetJUSDC",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetJUSDCFarm",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetUnwrapperTraderForLiquidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetUnwrapperTraderForZap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetUsdcReceiptToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetWhitelistController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapperTraderForLiquidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapperTraderForZap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcReceiptToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistController",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glpAdapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "glpVaultRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeUnwrapperTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jUSDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jUSDCFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetDolomiteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlpAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlpVaultRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetJUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetJUSDCFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetUnwrapperTraderForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetUnwrapperTraderForZap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetUsdcReceiptToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetWhitelistController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapperTraderForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapperTraderForZap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcReceiptToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistController",
    data: BytesLike
  ): Result;

  events: {
    "DolomiteRegistrySet(address)": EventFragment;
    "GlpAdapterSet(address)": EventFragment;
    "GlpVaultRouterSet(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "JUSDCFarmSet(address)": EventFragment;
    "JUSDCSet(address)": EventFragment;
    "UnwrapperTraderForLiquidationSet(address)": EventFragment;
    "UnwrapperTraderForZapSet(address)": EventFragment;
    "UsdcReceiptTokenSet(address)": EventFragment;
    "WhitelistControllerSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DolomiteRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlpAdapterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlpVaultRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JUSDCFarmSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JUSDCSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnwrapperTraderForLiquidationSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnwrapperTraderForZapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsdcReceiptTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistControllerSet"): EventFragment;
}

export interface DolomiteRegistrySetEventObject {
  _dolomiteRegistry: string;
}
export type DolomiteRegistrySetEvent = TypedEvent<
  [string],
  DolomiteRegistrySetEventObject
>;

export type DolomiteRegistrySetEventFilter =
  TypedEventFilter<DolomiteRegistrySetEvent>;

export interface GlpAdapterSetEventObject {
  _glpAdapter: string;
}
export type GlpAdapterSetEvent = TypedEvent<[string], GlpAdapterSetEventObject>;

export type GlpAdapterSetEventFilter = TypedEventFilter<GlpAdapterSetEvent>;

export interface GlpVaultRouterSetEventObject {
  _glpVaultRouter: string;
}
export type GlpVaultRouterSetEvent = TypedEvent<
  [string],
  GlpVaultRouterSetEventObject
>;

export type GlpVaultRouterSetEventFilter =
  TypedEventFilter<GlpVaultRouterSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface JUSDCFarmSetEventObject {
  _jUSDCFarm: string;
}
export type JUSDCFarmSetEvent = TypedEvent<[string], JUSDCFarmSetEventObject>;

export type JUSDCFarmSetEventFilter = TypedEventFilter<JUSDCFarmSetEvent>;

export interface JUSDCSetEventObject {
  _jUSDC: string;
}
export type JUSDCSetEvent = TypedEvent<[string], JUSDCSetEventObject>;

export type JUSDCSetEventFilter = TypedEventFilter<JUSDCSetEvent>;

export interface UnwrapperTraderForLiquidationSetEventObject {
  _unwrapperTraderForLiquidation: string;
}
export type UnwrapperTraderForLiquidationSetEvent = TypedEvent<
  [string],
  UnwrapperTraderForLiquidationSetEventObject
>;

export type UnwrapperTraderForLiquidationSetEventFilter =
  TypedEventFilter<UnwrapperTraderForLiquidationSetEvent>;

export interface UnwrapperTraderForZapSetEventObject {
  _unwrapperTraderForZap: string;
}
export type UnwrapperTraderForZapSetEvent = TypedEvent<
  [string],
  UnwrapperTraderForZapSetEventObject
>;

export type UnwrapperTraderForZapSetEventFilter =
  TypedEventFilter<UnwrapperTraderForZapSetEvent>;

export interface UsdcReceiptTokenSetEventObject {
  _usdcReceiptToken: string;
}
export type UsdcReceiptTokenSetEvent = TypedEvent<
  [string],
  UsdcReceiptTokenSetEventObject
>;

export type UsdcReceiptTokenSetEventFilter =
  TypedEventFilter<UsdcReceiptTokenSetEvent>;

export interface WhitelistControllerSetEventObject {
  _whitelistController: string;
}
export type WhitelistControllerSetEvent = TypedEvent<
  [string],
  WhitelistControllerSetEventObject
>;

export type WhitelistControllerSetEventFilter =
  TypedEventFilter<WhitelistControllerSetEvent>;

export interface JonesUSDCRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JonesUSDCRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<[string]>;

    glpAdapter(overrides?: CallOverrides): Promise<[string]>;

    glpVaultRouter(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _glpAdapter: string,
      _glpVaultRouter: string,
      _whitelistController: string,
      _usdcReceiptToken: string,
      _jUSDC: string,
      _jonesUSDCFarm: string,
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeUnwrapperTraders(
      _unwrapperTraderForLiquidation: string,
      _unwrapperTraderForZap: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    jUSDC(overrides?: CallOverrides): Promise<[string]>;

    jUSDCFarm(overrides?: CallOverrides): Promise<[string]>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlpAdapter(
      _glpAdapter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetGlpVaultRouter(
      _glpVaultRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetJUSDC(
      _jUSDC: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetJUSDCFarm(
      _jUSDCFarm: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetUnwrapperTraderForLiquidation(
      _unwrapperTraderForLiquidation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetUnwrapperTraderForZap(
      _unwrapperTraderForZap: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetUsdcReceiptToken(
      _usdcReceiptToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetWhitelistController(
      _whitelistController: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unwrapperTraderForLiquidation(overrides?: CallOverrides): Promise<[string]>;

    unwrapperTraderForZap(overrides?: CallOverrides): Promise<[string]>;

    usdcReceiptToken(overrides?: CallOverrides): Promise<[string]>;

    whitelistController(overrides?: CallOverrides): Promise<[string]>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

  glpAdapter(overrides?: CallOverrides): Promise<string>;

  glpVaultRouter(overrides?: CallOverrides): Promise<string>;

  initialize(
    _glpAdapter: string,
    _glpVaultRouter: string,
    _whitelistController: string,
    _usdcReceiptToken: string,
    _jUSDC: string,
    _jonesUSDCFarm: string,
    _dolomiteRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeUnwrapperTraders(
    _unwrapperTraderForLiquidation: string,
    _unwrapperTraderForZap: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  jUSDC(overrides?: CallOverrides): Promise<string>;

  jUSDCFarm(overrides?: CallOverrides): Promise<string>;

  ownerSetDolomiteRegistry(
    _dolomiteRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlpAdapter(
    _glpAdapter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetGlpVaultRouter(
    _glpVaultRouter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetJUSDC(
    _jUSDC: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetJUSDCFarm(
    _jUSDCFarm: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetUnwrapperTraderForLiquidation(
    _unwrapperTraderForLiquidation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetUnwrapperTraderForZap(
    _unwrapperTraderForZap: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetUsdcReceiptToken(
    _usdcReceiptToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetWhitelistController(
    _whitelistController: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unwrapperTraderForLiquidation(overrides?: CallOverrides): Promise<string>;

  unwrapperTraderForZap(overrides?: CallOverrides): Promise<string>;

  usdcReceiptToken(overrides?: CallOverrides): Promise<string>;

  whitelistController(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<string>;

    glpAdapter(overrides?: CallOverrides): Promise<string>;

    glpVaultRouter(overrides?: CallOverrides): Promise<string>;

    initialize(
      _glpAdapter: string,
      _glpVaultRouter: string,
      _whitelistController: string,
      _usdcReceiptToken: string,
      _jUSDC: string,
      _jonesUSDCFarm: string,
      _dolomiteRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeUnwrapperTraders(
      _unwrapperTraderForLiquidation: string,
      _unwrapperTraderForZap: string,
      overrides?: CallOverrides
    ): Promise<void>;

    jUSDC(overrides?: CallOverrides): Promise<string>;

    jUSDCFarm(overrides?: CallOverrides): Promise<string>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlpAdapter(
      _glpAdapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlpVaultRouter(
      _glpVaultRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetJUSDC(_jUSDC: string, overrides?: CallOverrides): Promise<void>;

    ownerSetJUSDCFarm(
      _jUSDCFarm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetUnwrapperTraderForLiquidation(
      _unwrapperTraderForLiquidation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetUnwrapperTraderForZap(
      _unwrapperTraderForZap: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetUsdcReceiptToken(
      _usdcReceiptToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetWhitelistController(
      _whitelistController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapperTraderForLiquidation(overrides?: CallOverrides): Promise<string>;

    unwrapperTraderForZap(overrides?: CallOverrides): Promise<string>;

    usdcReceiptToken(overrides?: CallOverrides): Promise<string>;

    whitelistController(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DolomiteRegistrySet(address)"(
      _dolomiteRegistry?: string | null
    ): DolomiteRegistrySetEventFilter;
    DolomiteRegistrySet(
      _dolomiteRegistry?: string | null
    ): DolomiteRegistrySetEventFilter;

    "GlpAdapterSet(address)"(
      _glpAdapter?: string | null
    ): GlpAdapterSetEventFilter;
    GlpAdapterSet(_glpAdapter?: string | null): GlpAdapterSetEventFilter;

    "GlpVaultRouterSet(address)"(
      _glpVaultRouter?: string | null
    ): GlpVaultRouterSetEventFilter;
    GlpVaultRouterSet(
      _glpVaultRouter?: string | null
    ): GlpVaultRouterSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "JUSDCFarmSet(address)"(
      _jUSDCFarm?: string | null
    ): JUSDCFarmSetEventFilter;
    JUSDCFarmSet(_jUSDCFarm?: string | null): JUSDCFarmSetEventFilter;

    "JUSDCSet(address)"(_jUSDC?: string | null): JUSDCSetEventFilter;
    JUSDCSet(_jUSDC?: string | null): JUSDCSetEventFilter;

    "UnwrapperTraderForLiquidationSet(address)"(
      _unwrapperTraderForLiquidation?: string | null
    ): UnwrapperTraderForLiquidationSetEventFilter;
    UnwrapperTraderForLiquidationSet(
      _unwrapperTraderForLiquidation?: string | null
    ): UnwrapperTraderForLiquidationSetEventFilter;

    "UnwrapperTraderForZapSet(address)"(
      _unwrapperTraderForZap?: string | null
    ): UnwrapperTraderForZapSetEventFilter;
    UnwrapperTraderForZapSet(
      _unwrapperTraderForZap?: string | null
    ): UnwrapperTraderForZapSetEventFilter;

    "UsdcReceiptTokenSet(address)"(
      _usdcReceiptToken?: string | null
    ): UsdcReceiptTokenSetEventFilter;
    UsdcReceiptTokenSet(
      _usdcReceiptToken?: string | null
    ): UsdcReceiptTokenSetEventFilter;

    "WhitelistControllerSet(address)"(
      _whitelistController?: string | null
    ): WhitelistControllerSetEventFilter;
    WhitelistControllerSet(
      _whitelistController?: string | null
    ): WhitelistControllerSetEventFilter;
  };

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    glpAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    glpVaultRouter(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _glpAdapter: string,
      _glpVaultRouter: string,
      _whitelistController: string,
      _usdcReceiptToken: string,
      _jUSDC: string,
      _jonesUSDCFarm: string,
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeUnwrapperTraders(
      _unwrapperTraderForLiquidation: string,
      _unwrapperTraderForZap: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    jUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    jUSDCFarm(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlpAdapter(
      _glpAdapter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetGlpVaultRouter(
      _glpVaultRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetJUSDC(
      _jUSDC: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetJUSDCFarm(
      _jUSDCFarm: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetUnwrapperTraderForLiquidation(
      _unwrapperTraderForLiquidation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetUnwrapperTraderForZap(
      _unwrapperTraderForZap: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetUsdcReceiptToken(
      _usdcReceiptToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetWhitelistController(
      _whitelistController: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unwrapperTraderForLiquidation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unwrapperTraderForZap(overrides?: CallOverrides): Promise<BigNumber>;

    usdcReceiptToken(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistController(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dolomiteRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpVaultRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _glpAdapter: string,
      _glpVaultRouter: string,
      _whitelistController: string,
      _usdcReceiptToken: string,
      _jUSDC: string,
      _jonesUSDCFarm: string,
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeUnwrapperTraders(
      _unwrapperTraderForLiquidation: string,
      _unwrapperTraderForZap: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    jUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jUSDCFarm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerSetDolomiteRegistry(
      _dolomiteRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlpAdapter(
      _glpAdapter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetGlpVaultRouter(
      _glpVaultRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetJUSDC(
      _jUSDC: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetJUSDCFarm(
      _jUSDCFarm: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetUnwrapperTraderForLiquidation(
      _unwrapperTraderForLiquidation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetUnwrapperTraderForZap(
      _unwrapperTraderForZap: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetUsdcReceiptToken(
      _usdcReceiptToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetWhitelistController(
      _whitelistController: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unwrapperTraderForLiquidation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unwrapperTraderForZap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdcReceiptToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
