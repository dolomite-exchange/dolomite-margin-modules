/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace GmxEventUtils {
  export type AddressKeyValueStruct = { key: string; value: string };

  export type AddressKeyValueStructOutput = [string, string] & {
    key: string;
    value: string;
  };

  export type UintKeyValueStruct = { key: string; value: BigNumberish };

  export type UintKeyValueStructOutput = [string, BigNumber] & {
    key: string;
    value: BigNumber;
  };
}

export declare namespace IUpgradeableAsyncIsolationModeUnwrapperTrader {
  export type WithdrawalInfoStruct = {
    key: BytesLike;
    vault: string;
    accountNumber: BigNumberish;
    inputAmount: BigNumberish;
    outputToken: string;
    outputAmount: BigNumberish;
    isRetryable: boolean;
    isLiquidation: boolean;
    extraData: BytesLike;
  };

  export type WithdrawalInfoStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean,
    boolean,
    string
  ] & {
    key: string;
    vault: string;
    accountNumber: BigNumber;
    inputAmount: BigNumber;
    outputToken: string;
    outputAmount: BigNumber;
    isRetryable: boolean;
    isLiquidation: boolean;
    extraData: string;
  };
}

export interface GmxV2LibraryInterface extends utils.Interface {
  functions: {
    "isExternalRedemptionPaused(IGmxV2Registry,IDolomiteMargin,IGmxV2IsolationModeVaultFactory)": FunctionFragment;
    "isValidInputOrOutputToken(IGmxV2IsolationModeVaultFactory,address)": FunctionFragment;
    "validateEventDataForWithdrawal(IGmxV2IsolationModeVaultFactory,(string,address),(string,uint256),(string,address),(string,uint256),(bytes32,address,uint256,uint256,address,uint256,bool,bool,bytes))": FunctionFragment;
    "validateExecutionFee(IGmxV2IsolationModeTokenVaultV1,uint256)": FunctionFragment;
    "validateInitialMarketIds(uint256[],uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isExternalRedemptionPaused"
      | "isValidInputOrOutputToken"
      | "validateEventDataForWithdrawal"
      | "validateExecutionFee"
      | "validateInitialMarketIds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isExternalRedemptionPaused",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidInputOrOutputToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateEventDataForWithdrawal",
    values: [
      string,
      GmxEventUtils.AddressKeyValueStruct,
      GmxEventUtils.UintKeyValueStruct,
      GmxEventUtils.AddressKeyValueStruct,
      GmxEventUtils.UintKeyValueStruct,
      IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateExecutionFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateInitialMarketIds",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "isExternalRedemptionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidInputOrOutputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateEventDataForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateInitialMarketIds",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GmxV2Library extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GmxV2LibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isExternalRedemptionPaused(
      _registry: string,
      _dolomiteMargin: string,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidInputOrOutputToken(
      _factory: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateEventDataForWithdrawal(
      _factory: string,
      _outputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
      _outputTokenAmount: GmxEventUtils.UintKeyValueStruct,
      _secondaryOutputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
      _secondaryOutputTokenAmount: GmxEventUtils.UintKeyValueStruct,
      _withdrawalInfo: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateExecutionFee(
      _vault: string,
      _toAccountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateInitialMarketIds(
      _marketIds: BigNumberish[],
      _longMarketId: BigNumberish,
      _shortMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  isExternalRedemptionPaused(
    _registry: string,
    _dolomiteMargin: string,
    _factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidInputOrOutputToken(
    _factory: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateEventDataForWithdrawal(
    _factory: string,
    _outputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
    _outputTokenAmount: GmxEventUtils.UintKeyValueStruct,
    _secondaryOutputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
    _secondaryOutputTokenAmount: GmxEventUtils.UintKeyValueStruct,
    _withdrawalInfo: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  validateExecutionFee(
    _vault: string,
    _toAccountNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  validateInitialMarketIds(
    _marketIds: BigNumberish[],
    _longMarketId: BigNumberish,
    _shortMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    isExternalRedemptionPaused(
      _registry: string,
      _dolomiteMargin: string,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidInputOrOutputToken(
      _factory: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateEventDataForWithdrawal(
      _factory: string,
      _outputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
      _outputTokenAmount: GmxEventUtils.UintKeyValueStruct,
      _secondaryOutputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
      _secondaryOutputTokenAmount: GmxEventUtils.UintKeyValueStruct,
      _withdrawalInfo: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateExecutionFee(
      _vault: string,
      _toAccountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateInitialMarketIds(
      _marketIds: BigNumberish[],
      _longMarketId: BigNumberish,
      _shortMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    isExternalRedemptionPaused(
      _registry: string,
      _dolomiteMargin: string,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidInputOrOutputToken(
      _factory: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateEventDataForWithdrawal(
      _factory: string,
      _outputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
      _outputTokenAmount: GmxEventUtils.UintKeyValueStruct,
      _secondaryOutputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
      _secondaryOutputTokenAmount: GmxEventUtils.UintKeyValueStruct,
      _withdrawalInfo: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateExecutionFee(
      _vault: string,
      _toAccountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateInitialMarketIds(
      _marketIds: BigNumberish[],
      _longMarketId: BigNumberish,
      _shortMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isExternalRedemptionPaused(
      _registry: string,
      _dolomiteMargin: string,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidInputOrOutputToken(
      _factory: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateEventDataForWithdrawal(
      _factory: string,
      _outputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
      _outputTokenAmount: GmxEventUtils.UintKeyValueStruct,
      _secondaryOutputTokenAddress: GmxEventUtils.AddressKeyValueStruct,
      _secondaryOutputTokenAmount: GmxEventUtils.UintKeyValueStruct,
      _withdrawalInfo: IUpgradeableAsyncIsolationModeUnwrapperTrader.WithdrawalInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateExecutionFee(
      _vault: string,
      _toAccountNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateInitialMarketIds(
      _marketIds: BigNumberish[],
      _longMarketId: BigNumberish,
      _shortMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
