/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IVesterV1 {
  export type VestingPositionStruct = {
    creator: string;
    id: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    amount: BigNumberish;
  };

  export type VestingPositionStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    creator: string;
    id: BigNumber;
    startTime: BigNumber;
    duration: BigNumber;
    amount: BigNumber;
  };
}

export interface VesterImplementationV2Interface extends utils.Interface {
  functions: {
    "ARB()": FunctionFragment;
    "ARB_MARKET_ID()": FunctionFragment;
    "DOLOMITE_MARGIN()": FunctionFragment;
    "DOLOMITE_REGISTRY()": FunctionFragment;
    "WETH()": FunctionFragment;
    "WETH_MARKET_ID()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "availableArbTokens()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "closePositionAndBuyTokens(uint256,uint256,uint256,uint256)": FunctionFragment;
    "closePositionWindow()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "emergencyWithdrawTax()": FunctionFragment;
    "extendDurationForGrandfatheredPosition(uint256,uint256)": FunctionFragment;
    "forceClosePosition(uint256)": FunctionFragment;
    "forceClosePositionTax()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getEffectiveLevelByUser(address)": FunctionFragment;
    "getLevelByUser(address)": FunctionFragment;
    "getLevelExpirationTimestampByUser(address)": FunctionFragment;
    "getLevelRequestByUser(address)": FunctionFragment;
    "grandfatheredIdCutoff()": FunctionFragment;
    "handlerUpdateLevel(uint256,address,uint256)": FunctionFragment;
    "handlerWithdrawETH(address)": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "initiateLevelRequest(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isVestingActive()": FunctionFragment;
    "levelBoostThreshold()": FunctionFragment;
    "levelExpirationWindow()": FunctionFragment;
    "levelRequestFee()": FunctionFragment;
    "name()": FunctionFragment;
    "oARB()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownerSetBaseURI(string)": FunctionFragment;
    "ownerSetClosePositionWindow(uint256)": FunctionFragment;
    "ownerSetEmergencyWithdrawTax(uint256)": FunctionFragment;
    "ownerSetForceClosePositionTax(uint256)": FunctionFragment;
    "ownerSetHandler(address,bool)": FunctionFragment;
    "ownerSetIsVestingActive(bool)": FunctionFragment;
    "ownerSetLevelBoostThreshold(uint8)": FunctionFragment;
    "ownerSetLevelExpirationWindow(uint256)": FunctionFragment;
    "ownerSetLevelRequestFee(uint256)": FunctionFragment;
    "ownerWithdrawArb(address,uint256,bool)": FunctionFragment;
    "promisedArbTokens()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vest(uint256,uint256,uint256)": FunctionFragment;
    "vestingPositions(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ARB"
      | "ARB_MARKET_ID"
      | "DOLOMITE_MARGIN"
      | "DOLOMITE_REGISTRY"
      | "WETH"
      | "WETH_MARKET_ID"
      | "approve"
      | "availableArbTokens"
      | "balanceOf"
      | "baseURI"
      | "closePositionAndBuyTokens"
      | "closePositionWindow"
      | "emergencyWithdraw"
      | "emergencyWithdrawTax"
      | "extendDurationForGrandfatheredPosition"
      | "forceClosePosition"
      | "forceClosePositionTax"
      | "getApproved"
      | "getEffectiveLevelByUser"
      | "getLevelByUser"
      | "getLevelExpirationTimestampByUser"
      | "getLevelRequestByUser"
      | "grandfatheredIdCutoff"
      | "handlerUpdateLevel"
      | "handlerWithdrawETH"
      | "initialize"
      | "initiateLevelRequest"
      | "isApprovedForAll"
      | "isHandler"
      | "isVestingActive"
      | "levelBoostThreshold"
      | "levelExpirationWindow"
      | "levelRequestFee"
      | "name"
      | "oARB"
      | "ownerOf"
      | "ownerSetBaseURI"
      | "ownerSetClosePositionWindow"
      | "ownerSetEmergencyWithdrawTax"
      | "ownerSetForceClosePositionTax"
      | "ownerSetHandler"
      | "ownerSetIsVestingActive"
      | "ownerSetLevelBoostThreshold"
      | "ownerSetLevelExpirationWindow"
      | "ownerSetLevelRequestFee"
      | "ownerWithdrawArb"
      | "promisedArbTokens"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "vest"
      | "vestingPositions"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ARB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ARB_MARKET_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLOMITE_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WETH_MARKET_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableArbTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closePositionAndBuyTokens",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendDurationForGrandfatheredPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClosePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClosePositionTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEffectiveLevelByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLevelByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLevelExpirationTimestampByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLevelRequestByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grandfatheredIdCutoff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handlerUpdateLevel",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handlerWithdrawETH",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateLevelRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isVestingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "levelBoostThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "levelExpirationWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "levelRequestFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "oARB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetBaseURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetClosePositionWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetEmergencyWithdrawTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetForceClosePositionTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetIsVestingActive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetLevelBoostThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetLevelExpirationWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetLevelRequestFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawArb",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "promisedArbTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPositions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ARB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ARB_MARKET_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLOMITE_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WETH_MARKET_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableArbTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePositionAndBuyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendDurationForGrandfatheredPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceClosePositionTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEffectiveLevelByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLevelByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLevelExpirationTimestampByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLevelRequestByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grandfatheredIdCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerUpdateLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateLevelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVestingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelBoostThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelExpirationWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelRequestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oARB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetClosePositionWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetEmergencyWithdrawTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetForceClosePositionTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetIsVestingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetLevelBoostThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetLevelExpirationWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetLevelRequestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawArb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "promisedArbTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingPositions",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseURISet(string)": EventFragment;
    "ClosePositionWindowSet(uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "EmergencyWithdrawTaxSet(uint256)": EventFragment;
    "ForceClosePositionTaxSet(uint256)": EventFragment;
    "HandlerSet(address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LevelBoostThresholdSet(uint8)": EventFragment;
    "LevelExpirationWindowSet(uint256)": EventFragment;
    "LevelRequestFeeSet(uint256)": EventFragment;
    "LevelRequestFinalized(address,uint256,uint256)": EventFragment;
    "LevelRequestInitiated(address,uint256)": EventFragment;
    "OARBSet(address)": EventFragment;
    "PositionClosed(address,uint256,uint256)": EventFragment;
    "PositionDurationExtended(uint256,uint256)": EventFragment;
    "PositionForceClosed(address,uint256,uint256)": EventFragment;
    "PromisedArbTokensSet(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VestingActiveSet(bool)": EventFragment;
    "VestingPositionCleared(uint256)": EventFragment;
    "VestingPositionCreated(tuple)": EventFragment;
    "VestingStarted(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePositionWindowSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawTaxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceClosePositionTaxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelBoostThresholdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelExpirationWindowSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelRequestFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelRequestFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelRequestInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OARBSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionDurationExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionForceClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromisedArbTokensSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingActiveSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingPositionCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingStarted"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURISetEventObject {
  baseURI: string;
}
export type BaseURISetEvent = TypedEvent<[string], BaseURISetEventObject>;

export type BaseURISetEventFilter = TypedEventFilter<BaseURISetEvent>;

export interface ClosePositionWindowSetEventObject {
  closePositionWindow: BigNumber;
}
export type ClosePositionWindowSetEvent = TypedEvent<
  [BigNumber],
  ClosePositionWindowSetEventObject
>;

export type ClosePositionWindowSetEventFilter =
  TypedEventFilter<ClosePositionWindowSetEvent>;

export interface EmergencyWithdrawEventObject {
  owner: string;
  vestingId: BigNumber;
  arbTax: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface EmergencyWithdrawTaxSetEventObject {
  emergencyWithdrawTax: BigNumber;
}
export type EmergencyWithdrawTaxSetEvent = TypedEvent<
  [BigNumber],
  EmergencyWithdrawTaxSetEventObject
>;

export type EmergencyWithdrawTaxSetEventFilter =
  TypedEventFilter<EmergencyWithdrawTaxSetEvent>;

export interface ForceClosePositionTaxSetEventObject {
  forceClosePositionTax: BigNumber;
}
export type ForceClosePositionTaxSetEvent = TypedEvent<
  [BigNumber],
  ForceClosePositionTaxSetEventObject
>;

export type ForceClosePositionTaxSetEventFilter =
  TypedEventFilter<ForceClosePositionTaxSetEvent>;

export interface HandlerSetEventObject {
  handler: string;
  isHandler: boolean;
}
export type HandlerSetEvent = TypedEvent<
  [string, boolean],
  HandlerSetEventObject
>;

export type HandlerSetEventFilter = TypedEventFilter<HandlerSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LevelBoostThresholdSetEventObject {
  levelBoostThreshold: number;
}
export type LevelBoostThresholdSetEvent = TypedEvent<
  [number],
  LevelBoostThresholdSetEventObject
>;

export type LevelBoostThresholdSetEventFilter =
  TypedEventFilter<LevelBoostThresholdSetEvent>;

export interface LevelExpirationWindowSetEventObject {
  levelExpirationWindow: BigNumber;
}
export type LevelExpirationWindowSetEvent = TypedEvent<
  [BigNumber],
  LevelExpirationWindowSetEventObject
>;

export type LevelExpirationWindowSetEventFilter =
  TypedEventFilter<LevelExpirationWindowSetEvent>;

export interface LevelRequestFeeSetEventObject {
  levelRequestFee: BigNumber;
}
export type LevelRequestFeeSetEvent = TypedEvent<
  [BigNumber],
  LevelRequestFeeSetEventObject
>;

export type LevelRequestFeeSetEventFilter =
  TypedEventFilter<LevelRequestFeeSetEvent>;

export interface LevelRequestFinalizedEventObject {
  user: string;
  requestId: BigNumber;
  level: BigNumber;
}
export type LevelRequestFinalizedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LevelRequestFinalizedEventObject
>;

export type LevelRequestFinalizedEventFilter =
  TypedEventFilter<LevelRequestFinalizedEvent>;

export interface LevelRequestInitiatedEventObject {
  user: string;
  requestId: BigNumber;
}
export type LevelRequestInitiatedEvent = TypedEvent<
  [string, BigNumber],
  LevelRequestInitiatedEventObject
>;

export type LevelRequestInitiatedEventFilter =
  TypedEventFilter<LevelRequestInitiatedEvent>;

export interface OARBSetEventObject {
  oARB: string;
}
export type OARBSetEvent = TypedEvent<[string], OARBSetEventObject>;

export type OARBSetEventFilter = TypedEventFilter<OARBSetEvent>;

export interface PositionClosedEventObject {
  owner: string;
  vestingId: BigNumber;
  ethCostPaid: BigNumber;
}
export type PositionClosedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PositionClosedEventObject
>;

export type PositionClosedEventFilter = TypedEventFilter<PositionClosedEvent>;

export interface PositionDurationExtendedEventObject {
  vestingId: BigNumber;
  newDuration: BigNumber;
}
export type PositionDurationExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PositionDurationExtendedEventObject
>;

export type PositionDurationExtendedEventFilter =
  TypedEventFilter<PositionDurationExtendedEvent>;

export interface PositionForceClosedEventObject {
  owner: string;
  vestingId: BigNumber;
  arbTax: BigNumber;
}
export type PositionForceClosedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PositionForceClosedEventObject
>;

export type PositionForceClosedEventFilter =
  TypedEventFilter<PositionForceClosedEvent>;

export interface PromisedArbTokensSetEventObject {
  promisedArbTokensSet: BigNumber;
}
export type PromisedArbTokensSetEvent = TypedEvent<
  [BigNumber],
  PromisedArbTokensSetEventObject
>;

export type PromisedArbTokensSetEventFilter =
  TypedEventFilter<PromisedArbTokensSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VestingActiveSetEventObject {
  vestingActive: boolean;
}
export type VestingActiveSetEvent = TypedEvent<
  [boolean],
  VestingActiveSetEventObject
>;

export type VestingActiveSetEventFilter =
  TypedEventFilter<VestingActiveSetEvent>;

export interface VestingPositionClearedEventObject {
  id: BigNumber;
}
export type VestingPositionClearedEvent = TypedEvent<
  [BigNumber],
  VestingPositionClearedEventObject
>;

export type VestingPositionClearedEventFilter =
  TypedEventFilter<VestingPositionClearedEvent>;

export interface VestingPositionCreatedEventObject {
  vestingPosition: IVesterV1.VestingPositionStructOutput;
}
export type VestingPositionCreatedEvent = TypedEvent<
  [IVesterV1.VestingPositionStructOutput],
  VestingPositionCreatedEventObject
>;

export type VestingPositionCreatedEventFilter =
  TypedEventFilter<VestingPositionCreatedEvent>;

export interface VestingStartedEventObject {
  owner: string;
  duration: BigNumber;
  amount: BigNumber;
  vestingId: BigNumber;
}
export type VestingStartedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  VestingStartedEventObject
>;

export type VestingStartedEventFilter = TypedEventFilter<VestingStartedEvent>;

export interface VesterImplementationV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VesterImplementationV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ARB(overrides?: CallOverrides): Promise<[string]>;

    ARB_MARKET_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    WETH_MARKET_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    availableArbTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    closePositionAndBuyTokens(
      _nftId: BigNumberish,
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    closePositionWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyWithdrawTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    extendDurationForGrandfatheredPosition(
      _nftId: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceClosePosition(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceClosePositionTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEffectiveLevelByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLevelByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLevelExpirationTimestampByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLevelRequestByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grandfatheredIdCutoff(overrides?: CallOverrides): Promise<[BigNumber]>;

    handlerUpdateLevel(
      _requestId: BigNumberish,
      _user: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    handlerWithdrawETH(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initiateLevelRequest(
      _user: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<[boolean]>;

    isVestingActive(overrides?: CallOverrides): Promise<[boolean]>;

    levelBoostThreshold(overrides?: CallOverrides): Promise<[number]>;

    levelExpirationWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    levelRequestFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    oARB(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerSetBaseURI(
      _baseUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetClosePositionWindow(
      _closePositionWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetEmergencyWithdrawTax(
      _emergencyWithdrawTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetForceClosePositionTax(
      _forceClosePositionTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetIsVestingActive(
      _isVestingActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetLevelBoostThreshold(
      _levelBoostThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetLevelExpirationWindow(
      _levelExpirationWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetLevelRequestFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerWithdrawArb(
      _to: string,
      _amount: BigNumberish,
      _shouldBypassAvailableAmounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    promisedArbTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vest(
      _fromAccountNumber: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vestingPositions(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IVesterV1.VestingPositionStructOutput]>;
  };

  ARB(overrides?: CallOverrides): Promise<string>;

  ARB_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  WETH_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  availableArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  closePositionAndBuyTokens(
    _nftId: BigNumberish,
    _fromAccountNumber: BigNumberish,
    _toAccountNumber: BigNumberish,
    _maxPaymentAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  closePositionWindow(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyWithdrawTax(overrides?: CallOverrides): Promise<BigNumber>;

  extendDurationForGrandfatheredPosition(
    _nftId: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceClosePosition(
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceClosePositionTax(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEffectiveLevelByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLevelByUser(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLevelExpirationTimestampByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLevelRequestByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grandfatheredIdCutoff(overrides?: CallOverrides): Promise<BigNumber>;

  handlerUpdateLevel(
    _requestId: BigNumberish,
    _user: string,
    _level: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  handlerWithdrawETH(
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initiateLevelRequest(
    _user: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isHandler(_handler: string, overrides?: CallOverrides): Promise<boolean>;

  isVestingActive(overrides?: CallOverrides): Promise<boolean>;

  levelBoostThreshold(overrides?: CallOverrides): Promise<number>;

  levelExpirationWindow(overrides?: CallOverrides): Promise<BigNumber>;

  levelRequestFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  oARB(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ownerSetBaseURI(
    _baseUri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetClosePositionWindow(
    _closePositionWindow: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetEmergencyWithdrawTax(
    _emergencyWithdrawTax: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetForceClosePositionTax(
    _forceClosePositionTax: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetHandler(
    _handler: string,
    _isHandler: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetIsVestingActive(
    _isVestingActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetLevelBoostThreshold(
    _levelBoostThreshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetLevelExpirationWindow(
    _levelExpirationWindow: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetLevelRequestFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerWithdrawArb(
    _to: string,
    _amount: BigNumberish,
    _shouldBypassAvailableAmounts: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  promisedArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vest(
    _fromAccountNumber: BigNumberish,
    _duration: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vestingPositions(
    _nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IVesterV1.VestingPositionStructOutput>;

  callStatic: {
    ARB(overrides?: CallOverrides): Promise<string>;

    ARB_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    WETH_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    availableArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    closePositionAndBuyTokens(
      _nftId: BigNumberish,
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _maxPaymentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closePositionWindow(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawTax(overrides?: CallOverrides): Promise<BigNumber>;

    extendDurationForGrandfatheredPosition(
      _nftId: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceClosePosition(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceClosePositionTax(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEffectiveLevelByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelExpirationTimestampByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelRequestByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grandfatheredIdCutoff(overrides?: CallOverrides): Promise<BigNumber>;

    handlerUpdateLevel(
      _requestId: BigNumberish,
      _user: string,
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    handlerWithdrawETH(_to: string, overrides?: CallOverrides): Promise<void>;

    initialize(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    initiateLevelRequest(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<boolean>;

    isVestingActive(overrides?: CallOverrides): Promise<boolean>;

    levelBoostThreshold(overrides?: CallOverrides): Promise<number>;

    levelExpirationWindow(overrides?: CallOverrides): Promise<BigNumber>;

    levelRequestFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    oARB(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ownerSetBaseURI(_baseUri: string, overrides?: CallOverrides): Promise<void>;

    ownerSetClosePositionWindow(
      _closePositionWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetEmergencyWithdrawTax(
      _emergencyWithdrawTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetForceClosePositionTax(
      _forceClosePositionTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetIsVestingActive(
      _isVestingActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetLevelBoostThreshold(
      _levelBoostThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetLevelExpirationWindow(
      _levelExpirationWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetLevelRequestFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerWithdrawArb(
      _to: string,
      _amount: BigNumberish,
      _shouldBypassAvailableAmounts: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    promisedArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vest(
      _fromAccountNumber: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingPositions(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IVesterV1.VestingPositionStructOutput>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BaseURISet(string)"(baseURI?: null): BaseURISetEventFilter;
    BaseURISet(baseURI?: null): BaseURISetEventFilter;

    "ClosePositionWindowSet(uint256)"(
      closePositionWindow?: null
    ): ClosePositionWindowSetEventFilter;
    ClosePositionWindowSet(
      closePositionWindow?: null
    ): ClosePositionWindowSetEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      owner?: string | null,
      vestingId?: null,
      arbTax?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      owner?: string | null,
      vestingId?: null,
      arbTax?: null
    ): EmergencyWithdrawEventFilter;

    "EmergencyWithdrawTaxSet(uint256)"(
      emergencyWithdrawTax?: null
    ): EmergencyWithdrawTaxSetEventFilter;
    EmergencyWithdrawTaxSet(
      emergencyWithdrawTax?: null
    ): EmergencyWithdrawTaxSetEventFilter;

    "ForceClosePositionTaxSet(uint256)"(
      forceClosePositionTax?: null
    ): ForceClosePositionTaxSetEventFilter;
    ForceClosePositionTaxSet(
      forceClosePositionTax?: null
    ): ForceClosePositionTaxSetEventFilter;

    "HandlerSet(address,bool)"(
      handler?: null,
      isHandler?: null
    ): HandlerSetEventFilter;
    HandlerSet(handler?: null, isHandler?: null): HandlerSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LevelBoostThresholdSet(uint8)"(
      levelBoostThreshold?: null
    ): LevelBoostThresholdSetEventFilter;
    LevelBoostThresholdSet(
      levelBoostThreshold?: null
    ): LevelBoostThresholdSetEventFilter;

    "LevelExpirationWindowSet(uint256)"(
      levelExpirationWindow?: null
    ): LevelExpirationWindowSetEventFilter;
    LevelExpirationWindowSet(
      levelExpirationWindow?: null
    ): LevelExpirationWindowSetEventFilter;

    "LevelRequestFeeSet(uint256)"(
      levelRequestFee?: null
    ): LevelRequestFeeSetEventFilter;
    LevelRequestFeeSet(levelRequestFee?: null): LevelRequestFeeSetEventFilter;

    "LevelRequestFinalized(address,uint256,uint256)"(
      user?: null,
      requestId?: null,
      level?: null
    ): LevelRequestFinalizedEventFilter;
    LevelRequestFinalized(
      user?: null,
      requestId?: null,
      level?: null
    ): LevelRequestFinalizedEventFilter;

    "LevelRequestInitiated(address,uint256)"(
      user?: null,
      requestId?: null
    ): LevelRequestInitiatedEventFilter;
    LevelRequestInitiated(
      user?: null,
      requestId?: null
    ): LevelRequestInitiatedEventFilter;

    "OARBSet(address)"(oARB?: null): OARBSetEventFilter;
    OARBSet(oARB?: null): OARBSetEventFilter;

    "PositionClosed(address,uint256,uint256)"(
      owner?: string | null,
      vestingId?: null,
      ethCostPaid?: null
    ): PositionClosedEventFilter;
    PositionClosed(
      owner?: string | null,
      vestingId?: null,
      ethCostPaid?: null
    ): PositionClosedEventFilter;

    "PositionDurationExtended(uint256,uint256)"(
      vestingId?: BigNumberish | null,
      newDuration?: null
    ): PositionDurationExtendedEventFilter;
    PositionDurationExtended(
      vestingId?: BigNumberish | null,
      newDuration?: null
    ): PositionDurationExtendedEventFilter;

    "PositionForceClosed(address,uint256,uint256)"(
      owner?: string | null,
      vestingId?: null,
      arbTax?: null
    ): PositionForceClosedEventFilter;
    PositionForceClosed(
      owner?: string | null,
      vestingId?: null,
      arbTax?: null
    ): PositionForceClosedEventFilter;

    "PromisedArbTokensSet(uint256)"(
      promisedArbTokensSet?: null
    ): PromisedArbTokensSetEventFilter;
    PromisedArbTokensSet(
      promisedArbTokensSet?: null
    ): PromisedArbTokensSetEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "VestingActiveSet(bool)"(vestingActive?: null): VestingActiveSetEventFilter;
    VestingActiveSet(vestingActive?: null): VestingActiveSetEventFilter;

    "VestingPositionCleared(uint256)"(
      id?: null
    ): VestingPositionClearedEventFilter;
    VestingPositionCleared(id?: null): VestingPositionClearedEventFilter;

    "VestingPositionCreated(tuple)"(
      vestingPosition?: null
    ): VestingPositionCreatedEventFilter;
    VestingPositionCreated(
      vestingPosition?: null
    ): VestingPositionCreatedEventFilter;

    "VestingStarted(address,uint256,uint256,uint256)"(
      owner?: string | null,
      duration?: null,
      amount?: null,
      vestingId?: null
    ): VestingStartedEventFilter;
    VestingStarted(
      owner?: string | null,
      duration?: null,
      amount?: null,
      vestingId?: null
    ): VestingStartedEventFilter;
  };

  estimateGas: {
    ARB(overrides?: CallOverrides): Promise<BigNumber>;

    ARB_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    availableArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionAndBuyTokens(
      _nftId: BigNumberish,
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    closePositionWindow(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyWithdrawTax(overrides?: CallOverrides): Promise<BigNumber>;

    extendDurationForGrandfatheredPosition(
      _nftId: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceClosePosition(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceClosePositionTax(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEffectiveLevelByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelExpirationTimestampByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelRequestByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grandfatheredIdCutoff(overrides?: CallOverrides): Promise<BigNumber>;

    handlerUpdateLevel(
      _requestId: BigNumberish,
      _user: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    handlerWithdrawETH(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initiateLevelRequest(
      _user: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHandler(_handler: string, overrides?: CallOverrides): Promise<BigNumber>;

    isVestingActive(overrides?: CallOverrides): Promise<BigNumber>;

    levelBoostThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    levelExpirationWindow(overrides?: CallOverrides): Promise<BigNumber>;

    levelRequestFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    oARB(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerSetBaseURI(
      _baseUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetClosePositionWindow(
      _closePositionWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetEmergencyWithdrawTax(
      _emergencyWithdrawTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetForceClosePositionTax(
      _forceClosePositionTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetIsVestingActive(
      _isVestingActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetLevelBoostThreshold(
      _levelBoostThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetLevelExpirationWindow(
      _levelExpirationWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetLevelRequestFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerWithdrawArb(
      _to: string,
      _amount: BigNumberish,
      _shouldBypassAvailableAmounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    promisedArbTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vest(
      _fromAccountNumber: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vestingPositions(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ARB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ARB_MARKET_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_MARKET_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    availableArbTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePositionAndBuyTokens(
      _nftId: BigNumberish,
      _fromAccountNumber: BigNumberish,
      _toAccountNumber: BigNumberish,
      _maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    closePositionWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawTax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extendDurationForGrandfatheredPosition(
      _nftId: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceClosePosition(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceClosePositionTax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEffectiveLevelByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLevelByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLevelExpirationTimestampByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLevelRequestByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grandfatheredIdCutoff(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handlerUpdateLevel(
      _requestId: BigNumberish,
      _user: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    handlerWithdrawETH(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initiateLevelRequest(
      _user: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHandler(
      _handler: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVestingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    levelBoostThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelExpirationWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelRequestFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oARB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetBaseURI(
      _baseUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetClosePositionWindow(
      _closePositionWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetEmergencyWithdrawTax(
      _emergencyWithdrawTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetForceClosePositionTax(
      _forceClosePositionTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetIsVestingActive(
      _isVestingActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetLevelBoostThreshold(
      _levelBoostThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetLevelExpirationWindow(
      _levelExpirationWindow: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetLevelRequestFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawArb(
      _to: string,
      _amount: BigNumberish,
      _shouldBypassAvailableAmounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    promisedArbTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vest(
      _fromAccountNumber: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vestingPositions(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
