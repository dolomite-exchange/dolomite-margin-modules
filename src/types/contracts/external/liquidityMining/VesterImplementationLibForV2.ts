/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface VesterImplementationLibForV2Interface extends utils.Interface {
  functions: {
    "calculateEffectiveRate(VesterImplementationV2,uint256,uint256)": FunctionFragment;
    "grandfatheredUpgradedMinVestingDuration()": FunctionFragment;
    "maxVestingDuration()": FunctionFragment;
    "minVestingDuration()": FunctionFragment;
    "oldMaxVestingDuration()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateEffectiveRate"
      | "grandfatheredUpgradedMinVestingDuration"
      | "maxVestingDuration"
      | "minVestingDuration"
      | "oldMaxVestingDuration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateEffectiveRate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grandfatheredUpgradedMinVestingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxVestingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minVestingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldMaxVestingDuration",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateEffectiveRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grandfatheredUpgradedMinVestingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVestingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVestingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldMaxVestingDuration",
    data: BytesLike
  ): Result;

  events: {
    "PositionDurationExtended(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PositionDurationExtended"): EventFragment;
}

export interface PositionDurationExtendedEventObject {
  vestingId: BigNumber;
  newDuration: BigNumber;
}
export type PositionDurationExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PositionDurationExtendedEventObject
>;

export type PositionDurationExtendedEventFilter =
  TypedEventFilter<PositionDurationExtendedEvent>;

export interface VesterImplementationLibForV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VesterImplementationLibForV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateEffectiveRate(
      _implementation: string,
      _duration: BigNumberish,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grandfatheredUpgradedMinVestingDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxVestingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minVestingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    oldMaxVestingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  calculateEffectiveRate(
    _implementation: string,
    _duration: BigNumberish,
    _nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grandfatheredUpgradedMinVestingDuration(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  oldMaxVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    calculateEffectiveRate(
      _implementation: string,
      _duration: BigNumberish,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grandfatheredUpgradedMinVestingDuration(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    oldMaxVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PositionDurationExtended(uint256,uint256)"(
      vestingId?: BigNumberish | null,
      newDuration?: null
    ): PositionDurationExtendedEventFilter;
    PositionDurationExtended(
      vestingId?: BigNumberish | null,
      newDuration?: null
    ): PositionDurationExtendedEventFilter;
  };

  estimateGas: {
    calculateEffectiveRate(
      _implementation: string,
      _duration: BigNumberish,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grandfatheredUpgradedMinVestingDuration(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    oldMaxVestingDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateEffectiveRate(
      _implementation: string,
      _duration: BigNumberish,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grandfatheredUpgradedMinVestingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxVestingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVestingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oldMaxVestingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
