/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface EmitterMultipleRewardTokensInterface extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "DOLOMITE_REGISTRY()": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "ownerAddPool(uint256,uint256,bool)": FunctionFragment;
    "ownerAddRewardToken(address,address,bool)": FunctionFragment;
    "ownerDisableRewardToken(address)": FunctionFragment;
    "ownerEnableRewardToken(address)": FunctionFragment;
    "ownerRemoveRewardToken(address)": FunctionFragment;
    "ownerSetPool(uint256,uint256)": FunctionFragment;
    "ownerSetRewardTokenPerSecond(uint256)": FunctionFragment;
    "poolAccRewardTokenPerShares(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLastRewardTime(uint256,address)": FunctionFragment;
    "rewardTokenInfo(address)": FunctionFragment;
    "rewardTokenPerSecond()": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "userRewardDebt(uint256,address,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "DOLOMITE_REGISTRY"
      | "deposit"
      | "emergencyWithdraw"
      | "massUpdatePools"
      | "ownerAddPool"
      | "ownerAddRewardToken"
      | "ownerDisableRewardToken"
      | "ownerEnableRewardToken"
      | "ownerRemoveRewardToken"
      | "ownerSetPool"
      | "ownerSetRewardTokenPerSecond"
      | "poolAccRewardTokenPerShares"
      | "poolInfo"
      | "poolLastRewardTime"
      | "rewardTokenInfo"
      | "rewardTokenPerSecond"
      | "startTime"
      | "totalAllocPoint"
      | "updatePool"
      | "userInfo"
      | "userRewardDebt"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLOMITE_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerAddPool",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerAddRewardToken",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerDisableRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerEnableRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerRemoveRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetRewardTokenPerSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolAccRewardTokenPerShares",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLastRewardTime",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardDebt",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLOMITE_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerAddPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerAddRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerDisableRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerEnableRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerRemoveRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetRewardTokenPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAccRewardTokenPerShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolLastRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  user: string;
  marketId: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  marketId: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface WithdrawEventObject {
  user: string;
  marketId: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface EmitterMultipleRewardTokens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EmitterMultipleRewardTokensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _fromAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerAddPool(
      _marketId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerAddRewardToken(
      _token: string,
      _tokenStorageVault: string,
      _isAccruing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerDisableRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerEnableRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerRemoveRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetPool(
      _marketId: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerSetRewardTokenPerSecond(
      _rewardTokenPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    poolAccRewardTokenPerShares(
      _marketId: BigNumberish,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        marketId: BigNumber;
        totalPar: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    poolLastRewardTime(
      _marketId: BigNumberish,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        token: string;
        tokenStorageVault: string;
        isAccruing: boolean;
      }
    >;

    rewardTokenPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePool(
      _marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    userRewardDebt(
      _marketId: BigNumberish,
      _user: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<string>;

  deposit(
    _fromAccountNumber: BigNumberish,
    _marketId: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _marketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  massUpdatePools(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerAddPool(
    _marketId: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerAddRewardToken(
    _token: string,
    _tokenStorageVault: string,
    _isAccruing: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerDisableRewardToken(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerEnableRewardToken(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerRemoveRewardToken(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetPool(
    _marketId: BigNumberish,
    _allocPoint: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerSetRewardTokenPerSecond(
    _rewardTokenPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  poolAccRewardTokenPerShares(
    _marketId: BigNumberish,
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      marketId: BigNumber;
      totalPar: BigNumber;
      allocPoint: BigNumber;
    }
  >;

  poolLastRewardTime(
    _marketId: BigNumberish,
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokenInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      token: string;
      tokenStorageVault: string;
      isAccruing: boolean;
    }
  >;

  rewardTokenPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  updatePool(
    _marketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userRewardDebt(
    _marketId: BigNumberish,
    _user: string,
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _marketId: BigNumberish,
    _amountWei: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<string>;

    deposit(
      _fromAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    ownerAddPool(
      _marketId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerAddRewardToken(
      _token: string,
      _tokenStorageVault: string,
      _isAccruing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerDisableRewardToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerEnableRewardToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerRemoveRewardToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetPool(
      _marketId: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetRewardTokenPerSecond(
      _rewardTokenPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolAccRewardTokenPerShares(
      _marketId: BigNumberish,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        marketId: BigNumber;
        totalPar: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    poolLastRewardTime(
      _marketId: BigNumberish,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        token: string;
        tokenStorageVault: string;
        isAccruing: boolean;
      }
    >;

    rewardTokenPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(
      _marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardDebt(
      _marketId: BigNumberish,
      _user: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      marketId?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      marketId?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: string | null,
      marketId?: BigNumberish | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: string | null,
      marketId?: BigNumberish | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      marketId?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      marketId?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _fromAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerAddPool(
      _marketId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerAddRewardToken(
      _token: string,
      _tokenStorageVault: string,
      _isAccruing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerDisableRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerEnableRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerRemoveRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetPool(
      _marketId: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerSetRewardTokenPerSecond(
      _rewardTokenPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    poolAccRewardTokenPerShares(
      _marketId: BigNumberish,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLastRewardTime(
      _marketId: BigNumberish,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokenPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(
      _marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardDebt(
      _marketId: BigNumberish,
      _user: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _fromAccountNumber: BigNumberish,
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerAddPool(
      _marketId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerAddRewardToken(
      _token: string,
      _tokenStorageVault: string,
      _isAccruing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerDisableRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerEnableRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerRemoveRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetPool(
      _marketId: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerSetRewardTokenPerSecond(
      _rewardTokenPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    poolAccRewardTokenPerShares(
      _marketId: BigNumberish,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLastRewardTime(
      _marketId: BigNumberish,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokenPerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePool(
      _marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardDebt(
      _marketId: BigNumberish,
      _user: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _marketId: BigNumberish,
      _amountWei: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
