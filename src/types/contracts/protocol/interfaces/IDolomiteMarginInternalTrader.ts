/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type ParStruct = { sign: boolean; value: BigNumberish };

  export type ParStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type WeiStruct = { sign: boolean; value: BigNumberish };

  export type WeiStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type AssetAmountStruct = {
    sign: boolean;
    denomination: BigNumberish;
    ref: BigNumberish;
    value: BigNumberish;
  };

  export type AssetAmountStructOutput = [boolean, number, number, BigNumber] & {
    sign: boolean;
    denomination: number;
    ref: number;
    value: BigNumber;
  };
}

export interface IDolomiteMarginInternalTraderInterface
  extends utils.Interface {
  functions: {
    "getTradeCost(uint256,uint256,(address,uint256),(address,uint256),(bool,uint128),(bool,uint128),(bool,uint256),bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getTradeCost"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTradeCost",
    values: [
      BigNumberish,
      BigNumberish,
      IDolomiteStructs.AccountInfoStruct,
      IDolomiteStructs.AccountInfoStruct,
      IDolomiteStructs.ParStruct,
      IDolomiteStructs.ParStruct,
      IDolomiteStructs.WeiStruct,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTradeCost",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDolomiteMarginInternalTrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDolomiteMarginInternalTraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTradeCost(
      inputMarketId: BigNumberish,
      outputMarketId: BigNumberish,
      makerAccount: IDolomiteStructs.AccountInfoStruct,
      takerAccount: IDolomiteStructs.AccountInfoStruct,
      oldInputPar: IDolomiteStructs.ParStruct,
      newInputPar: IDolomiteStructs.ParStruct,
      inputDeltaWei: IDolomiteStructs.WeiStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getTradeCost(
    inputMarketId: BigNumberish,
    outputMarketId: BigNumberish,
    makerAccount: IDolomiteStructs.AccountInfoStruct,
    takerAccount: IDolomiteStructs.AccountInfoStruct,
    oldInputPar: IDolomiteStructs.ParStruct,
    newInputPar: IDolomiteStructs.ParStruct,
    inputDeltaWei: IDolomiteStructs.WeiStruct,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTradeCost(
      inputMarketId: BigNumberish,
      outputMarketId: BigNumberish,
      makerAccount: IDolomiteStructs.AccountInfoStruct,
      takerAccount: IDolomiteStructs.AccountInfoStruct,
      oldInputPar: IDolomiteStructs.ParStruct,
      newInputPar: IDolomiteStructs.ParStruct,
      inputDeltaWei: IDolomiteStructs.WeiStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.AssetAmountStructOutput>;
  };

  filters: {};

  estimateGas: {
    getTradeCost(
      inputMarketId: BigNumberish,
      outputMarketId: BigNumberish,
      makerAccount: IDolomiteStructs.AccountInfoStruct,
      takerAccount: IDolomiteStructs.AccountInfoStruct,
      oldInputPar: IDolomiteStructs.ParStruct,
      newInputPar: IDolomiteStructs.ParStruct,
      inputDeltaWei: IDolomiteStructs.WeiStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTradeCost(
      inputMarketId: BigNumberish,
      outputMarketId: BigNumberish,
      makerAccount: IDolomiteStructs.AccountInfoStruct,
      takerAccount: IDolomiteStructs.AccountInfoStruct,
      oldInputPar: IDolomiteStructs.ParStruct,
      newInputPar: IDolomiteStructs.ParStruct,
      inputDeltaWei: IDolomiteStructs.WeiStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
