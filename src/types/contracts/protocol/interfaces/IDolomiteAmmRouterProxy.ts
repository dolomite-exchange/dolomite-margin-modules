/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type AssetAmountStruct = {
    sign: boolean;
    denomination: BigNumberish;
    ref: BigNumberish;
    value: BigNumberish;
  };

  export type AssetAmountStructOutput = [boolean, number, number, BigNumber] & {
    sign: boolean;
    denomination: number;
    ref: number;
    value: BigNumber;
  };

  export type ActionArgsStruct = {
    actionType: BigNumberish;
    accountId: BigNumberish;
    amount: IDolomiteStructs.AssetAmountStruct;
    primaryMarketId: BigNumberish;
    secondaryMarketId: BigNumberish;
    otherAddress: string;
    otherAccountId: BigNumberish;
    data: BytesLike;
  };

  export type ActionArgsStructOutput = [
    number,
    BigNumber,
    IDolomiteStructs.AssetAmountStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    actionType: number;
    accountId: BigNumber;
    amount: IDolomiteStructs.AssetAmountStructOutput;
    primaryMarketId: BigNumber;
    secondaryMarketId: BigNumber;
    otherAddress: string;
    otherAccountId: BigNumber;
    data: string;
  };
}

export declare namespace IDolomiteAmmRouterProxy {
  export type PermitSignatureStruct = {
    approveMax: boolean;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type PermitSignatureStructOutput = [
    boolean,
    number,
    string,
    string
  ] & { approveMax: boolean; v: number; r: string; s: string };

  export type ModifyPositionParamsStruct = {
    accountNumber: BigNumberish;
    amountIn: IDolomiteStructs.AssetAmountStruct;
    amountOut: IDolomiteStructs.AssetAmountStruct;
    tokenPath: string[];
    depositToken: string;
    isPositiveMarginDeposit: boolean;
    marginDeposit: BigNumberish;
    expiryTimeDelta: BigNumberish;
  };

  export type ModifyPositionParamsStructOutput = [
    BigNumber,
    IDolomiteStructs.AssetAmountStructOutput,
    IDolomiteStructs.AssetAmountStructOutput,
    string[],
    string,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    accountNumber: BigNumber;
    amountIn: IDolomiteStructs.AssetAmountStructOutput;
    amountOut: IDolomiteStructs.AssetAmountStructOutput;
    tokenPath: string[];
    depositToken: string;
    isPositiveMarginDeposit: boolean;
    marginDeposit: BigNumber;
    expiryTimeDelta: BigNumber;
  };
}

export interface IDolomiteAmmRouterProxyInterface extends utils.Interface {
  functions: {
    "DOLOMITE_MARGIN()": FunctionFragment;
    "addLiquidity(address,uint256,address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getPairInitCodeHash()": FunctionFragment;
    "getParamsForSwapExactTokensForTokens(address,uint256,uint256,uint256,address[])": FunctionFragment;
    "getParamsForSwapTokensForExactTokens(address,uint256,uint256,uint256,address[])": FunctionFragment;
    "removeLiquidity(address,uint256,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidityWithPermit(address,uint256,address,address,uint256,uint256,uint256,uint256,(bool,uint8,bytes32,bytes32))": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,uint256,address[],uint256)": FunctionFragment;
    "swapExactTokensForTokensAndModifyPosition((uint256,(bool,uint8,uint8,uint256),(bool,uint8,uint8,uint256),address[],address,bool,uint256,uint256),uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,uint256,address[],uint256)": FunctionFragment;
    "swapTokensForExactTokensAndModifyPosition((uint256,(bool,uint8,uint8,uint256),(bool,uint8,uint8,uint256),address[],address,bool,uint256,uint256),uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOLOMITE_MARGIN"
      | "addLiquidity"
      | "getPairInitCodeHash"
      | "getParamsForSwapExactTokensForTokens"
      | "getParamsForSwapTokensForExactTokens"
      | "removeLiquidity"
      | "removeLiquidityWithPermit"
      | "swapExactTokensForTokens"
      | "swapExactTokensForTokensAndModifyPosition"
      | "swapTokensForExactTokens"
      | "swapTokensForExactTokensAndModifyPosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOLOMITE_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairInitCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParamsForSwapExactTokensForTokens",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getParamsForSwapTokensForExactTokens",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithPermit",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      IDolomiteAmmRouterProxy.PermitSignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensAndModifyPosition",
    values: [IDolomiteAmmRouterProxy.ModifyPositionParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokensAndModifyPosition",
    values: [IDolomiteAmmRouterProxy.ModifyPositionParamsStruct, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLOMITE_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairInitCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParamsForSwapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParamsForSwapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensAndModifyPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokensAndModifyPosition",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDolomiteAmmRouterProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDolomiteAmmRouterProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      to: string,
      fromAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPairInitCodeHash(overrides?: CallOverrides): Promise<[string]>;

    getParamsForSwapExactTokensForTokens(
      account: string,
      accountNumber: BigNumberish,
      amountInWei: BigNumberish,
      amountOutMinWei: BigNumberish,
      tokenPath: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.AccountInfoStructOutput[],
        IDolomiteStructs.ActionArgsStructOutput[]
      ]
    >;

    getParamsForSwapTokensForExactTokens(
      account: string,
      accountNumber: BigNumberish,
      amountInMaxWei: BigNumberish,
      amountOutWei: BigNumberish,
      tokenPath: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.AccountInfoStructOutput[],
        IDolomiteStructs.ActionArgsStructOutput[]
      ]
    >;

    removeLiquidity(
      to: string,
      toAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeLiquidityWithPermit(
      to: string,
      toAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      permit: IDolomiteAmmRouterProxy.PermitSignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      accountNumber: BigNumberish,
      amountInWei: BigNumberish,
      amountOutMinWei: BigNumberish,
      tokenPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensAndModifyPosition(
      params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      accountNumber: BigNumberish,
      amountInMaxWei: BigNumberish,
      amountOutWei: BigNumberish,
      tokenPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokensAndModifyPosition(
      params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    to: string,
    fromAccountNumber: BigNumberish,
    tokenA: string,
    tokenB: string,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMinWei: BigNumberish,
    amountBMinWei: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPairInitCodeHash(overrides?: CallOverrides): Promise<string>;

  getParamsForSwapExactTokensForTokens(
    account: string,
    accountNumber: BigNumberish,
    amountInWei: BigNumberish,
    amountOutMinWei: BigNumberish,
    tokenPath: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.AccountInfoStructOutput[],
      IDolomiteStructs.ActionArgsStructOutput[]
    ]
  >;

  getParamsForSwapTokensForExactTokens(
    account: string,
    accountNumber: BigNumberish,
    amountInMaxWei: BigNumberish,
    amountOutWei: BigNumberish,
    tokenPath: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      IDolomiteStructs.AccountInfoStructOutput[],
      IDolomiteStructs.ActionArgsStructOutput[]
    ]
  >;

  removeLiquidity(
    to: string,
    toAccountNumber: BigNumberish,
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMinWei: BigNumberish,
    amountBMinWei: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeLiquidityWithPermit(
    to: string,
    toAccountNumber: BigNumberish,
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMinWei: BigNumberish,
    amountBMinWei: BigNumberish,
    deadline: BigNumberish,
    permit: IDolomiteAmmRouterProxy.PermitSignatureStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    accountNumber: BigNumberish,
    amountInWei: BigNumberish,
    amountOutMinWei: BigNumberish,
    tokenPath: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensAndModifyPosition(
    params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    accountNumber: BigNumberish,
    amountInMaxWei: BigNumberish,
    amountOutWei: BigNumberish,
    tokenPath: string[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokensAndModifyPosition(
    params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      to: string,
      fromAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountAWei: BigNumber;
        amountBWei: BigNumber;
        liquidity: BigNumber;
      }
    >;

    getPairInitCodeHash(overrides?: CallOverrides): Promise<string>;

    getParamsForSwapExactTokensForTokens(
      account: string,
      accountNumber: BigNumberish,
      amountInWei: BigNumberish,
      amountOutMinWei: BigNumberish,
      tokenPath: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.AccountInfoStructOutput[],
        IDolomiteStructs.ActionArgsStructOutput[]
      ]
    >;

    getParamsForSwapTokensForExactTokens(
      account: string,
      accountNumber: BigNumberish,
      amountInMaxWei: BigNumberish,
      amountOutWei: BigNumberish,
      tokenPath: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        IDolomiteStructs.AccountInfoStructOutput[],
        IDolomiteStructs.ActionArgsStructOutput[]
      ]
    >;

    removeLiquidity(
      to: string,
      toAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAWei: BigNumber; amountBWei: BigNumber }
    >;

    removeLiquidityWithPermit(
      to: string,
      toAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      permit: IDolomiteAmmRouterProxy.PermitSignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountAWei: BigNumber; amountBWei: BigNumber }
    >;

    swapExactTokensForTokens(
      accountNumber: BigNumberish,
      amountInWei: BigNumberish,
      amountOutMinWei: BigNumberish,
      tokenPath: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokensAndModifyPosition(
      params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactTokens(
      accountNumber: BigNumberish,
      amountInMaxWei: BigNumberish,
      amountOutWei: BigNumberish,
      tokenPath: string[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactTokensAndModifyPosition(
      params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      to: string,
      fromAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPairInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getParamsForSwapExactTokensForTokens(
      account: string,
      accountNumber: BigNumberish,
      amountInWei: BigNumberish,
      amountOutMinWei: BigNumberish,
      tokenPath: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParamsForSwapTokensForExactTokens(
      account: string,
      accountNumber: BigNumberish,
      amountInMaxWei: BigNumberish,
      amountOutWei: BigNumberish,
      tokenPath: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      to: string,
      toAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeLiquidityWithPermit(
      to: string,
      toAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      permit: IDolomiteAmmRouterProxy.PermitSignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      accountNumber: BigNumberish,
      amountInWei: BigNumberish,
      amountOutMinWei: BigNumberish,
      tokenPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactTokensForTokensAndModifyPosition(
      params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      accountNumber: BigNumberish,
      amountInMaxWei: BigNumberish,
      amountOutWei: BigNumberish,
      tokenPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapTokensForExactTokensAndModifyPosition(
      params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      to: string,
      fromAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPairInitCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParamsForSwapExactTokensForTokens(
      account: string,
      accountNumber: BigNumberish,
      amountInWei: BigNumberish,
      amountOutMinWei: BigNumberish,
      tokenPath: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParamsForSwapTokensForExactTokens(
      account: string,
      accountNumber: BigNumberish,
      amountInMaxWei: BigNumberish,
      amountOutWei: BigNumberish,
      tokenPath: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      to: string,
      toAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeLiquidityWithPermit(
      to: string,
      toAccountNumber: BigNumberish,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMinWei: BigNumberish,
      amountBMinWei: BigNumberish,
      deadline: BigNumberish,
      permit: IDolomiteAmmRouterProxy.PermitSignatureStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      accountNumber: BigNumberish,
      amountInWei: BigNumberish,
      amountOutMinWei: BigNumberish,
      tokenPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensAndModifyPosition(
      params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      accountNumber: BigNumberish,
      amountInMaxWei: BigNumberish,
      amountOutWei: BigNumberish,
      tokenPath: string[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokensAndModifyPosition(
      params: IDolomiteAmmRouterProxy.ModifyPositionParamsStruct,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
