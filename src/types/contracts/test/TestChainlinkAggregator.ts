/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface TestChainlinkAggregatorInterface extends utils.Interface {
  functions: {
    "aggregator()": FunctionFragment;
    "decimals()": FunctionFragment;
    "description()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "maxAnswer()": FunctionFragment;
    "minAnswer()": FunctionFragment;
    "setDecimals(uint8)": FunctionFragment;
    "setLatestAnswer(int256)": FunctionFragment;
    "setMaxAnswer(int192)": FunctionFragment;
    "setMinAnswer(int192)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregator"
      | "decimals"
      | "description"
      | "latestRoundData"
      | "maxAnswer"
      | "minAnswer"
      | "setDecimals"
      | "setLatestAnswer"
      | "setMaxAnswer"
      | "setMinAnswer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxAnswer", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAnswer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestAnswer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAnswer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAnswer",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "aggregator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAnswer",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestChainlinkAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestChainlinkAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregator(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    maxAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDecimals(
      __decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLatestAnswer(
      __latestAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxAnswer(
      __maxAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinAnswer(
      __minAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  aggregator(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  minAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  setDecimals(
    __decimals: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLatestAnswer(
    __latestAnswer: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxAnswer(
    __maxAnswer: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinAnswer(
    __minAnswer: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    aggregator(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    minAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    setDecimals(
      __decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestAnswer(
      __latestAnswer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAnswer(
      __maxAnswer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAnswer(
      __minAnswer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    aggregator(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    minAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    setDecimals(
      __decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLatestAnswer(
      __latestAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxAnswer(
      __maxAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinAnswer(
      __minAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDecimals(
      __decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLatestAnswer(
      __latestAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxAnswer(
      __maxAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinAnswer(
      __minAnswer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
