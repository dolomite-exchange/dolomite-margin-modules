/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface TestGLPMathLibInterface extends utils.Interface {
  functions: {
    "GLPMathLibApplyFeesToAmount(uint256,uint256)": FunctionFragment;
    "GLPMathLibBasisPointsDivisor()": FunctionFragment;
    "GLPMathLibGetGlpMintAmount(uint256)": FunctionFragment;
    "GLPMathLibGetGlpRedemptionAmount(address,uint256)": FunctionFragment;
    "GLPMathLibGetUsdgAmountForBuy(address,uint256)": FunctionFragment;
    "GLPMathLibGetUsdgAmountForSell(uint256)": FunctionFragment;
    "GLPMathLibPricePrecision()": FunctionFragment;
    "GMX_REGISTRY()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GLPMathLibApplyFeesToAmount"
      | "GLPMathLibBasisPointsDivisor"
      | "GLPMathLibGetGlpMintAmount"
      | "GLPMathLibGetGlpRedemptionAmount"
      | "GLPMathLibGetUsdgAmountForBuy"
      | "GLPMathLibGetUsdgAmountForSell"
      | "GLPMathLibPricePrecision"
      | "GMX_REGISTRY"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GLPMathLibApplyFeesToAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GLPMathLibBasisPointsDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GLPMathLibGetGlpMintAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GLPMathLibGetGlpRedemptionAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GLPMathLibGetUsdgAmountForBuy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GLPMathLibGetUsdgAmountForSell",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GLPMathLibPricePrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GMX_REGISTRY",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "GLPMathLibApplyFeesToAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLPMathLibBasisPointsDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLPMathLibGetGlpMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLPMathLibGetGlpRedemptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLPMathLibGetUsdgAmountForBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLPMathLibGetUsdgAmountForSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLPMathLibPricePrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GMX_REGISTRY",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestGLPMathLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestGLPMathLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GLPMathLibApplyFeesToAmount(
      _amount: BigNumberish,
      _feeBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GLPMathLibBasisPointsDivisor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GLPMathLibGetGlpMintAmount(
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { glpAmount: BigNumber }>;

    GLPMathLibGetGlpRedemptionAmount(
      _outputToken: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { outputAmount: BigNumber }>;

    GLPMathLibGetUsdgAmountForBuy(
      _inputToken: string,
      _inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdgAmount: BigNumber }>;

    GLPMathLibGetUsdgAmountForSell(
      _glpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdgAmount: BigNumber }>;

    GLPMathLibPricePrecision(overrides?: CallOverrides): Promise<[BigNumber]>;

    GMX_REGISTRY(overrides?: CallOverrides): Promise<[string]>;
  };

  GLPMathLibApplyFeesToAmount(
    _amount: BigNumberish,
    _feeBasisPoints: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GLPMathLibBasisPointsDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  GLPMathLibGetGlpMintAmount(
    _usdgAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GLPMathLibGetGlpRedemptionAmount(
    _outputToken: string,
    _usdgAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GLPMathLibGetUsdgAmountForBuy(
    _inputToken: string,
    _inputAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GLPMathLibGetUsdgAmountForSell(
    _glpAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GLPMathLibPricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

  GMX_REGISTRY(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GLPMathLibApplyFeesToAmount(
      _amount: BigNumberish,
      _feeBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibBasisPointsDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    GLPMathLibGetGlpMintAmount(
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibGetGlpRedemptionAmount(
      _outputToken: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibGetUsdgAmountForBuy(
      _inputToken: string,
      _inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibGetUsdgAmountForSell(
      _glpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibPricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

    GMX_REGISTRY(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    GLPMathLibApplyFeesToAmount(
      _amount: BigNumberish,
      _feeBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibBasisPointsDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    GLPMathLibGetGlpMintAmount(
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibGetGlpRedemptionAmount(
      _outputToken: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibGetUsdgAmountForBuy(
      _inputToken: string,
      _inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibGetUsdgAmountForSell(
      _glpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GLPMathLibPricePrecision(overrides?: CallOverrides): Promise<BigNumber>;

    GMX_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GLPMathLibApplyFeesToAmount(
      _amount: BigNumberish,
      _feeBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GLPMathLibBasisPointsDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GLPMathLibGetGlpMintAmount(
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GLPMathLibGetGlpRedemptionAmount(
      _outputToken: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GLPMathLibGetUsdgAmountForBuy(
      _inputToken: string,
      _inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GLPMathLibGetUsdgAmountForSell(
      _glpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GLPMathLibPricePrecision(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GMX_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
