/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface TestPendlePtOracleInterface extends utils.Interface {
  functions: {
    "cardinalityRequired()": FunctionFragment;
    "getOracleState(address,uint32)": FunctionFragment;
    "getPtToAssetRate(address,uint32)": FunctionFragment;
    "increaseCardinalityRequired()": FunctionFragment;
    "oldestObservationSatisfied()": FunctionFragment;
    "setOracleState(bool,uint16,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cardinalityRequired"
      | "getOracleState"
      | "getPtToAssetRate"
      | "increaseCardinalityRequired"
      | "oldestObservationSatisfied"
      | "setOracleState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cardinalityRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleState",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPtToAssetRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseCardinalityRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldestObservationSatisfied",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleState",
    values: [boolean, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "cardinalityRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPtToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseCardinalityRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldestObservationSatisfied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleState",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestPendlePtOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestPendlePtOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cardinalityRequired(overrides?: CallOverrides): Promise<[number]>;

    getOracleState(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, number, boolean]>;

    getPtToAssetRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseCardinalityRequired(overrides?: CallOverrides): Promise<[boolean]>;

    oldestObservationSatisfied(overrides?: CallOverrides): Promise<[boolean]>;

    setOracleState(
      _increaseCardinalityRequired: boolean,
      _cardinalityRequired: BigNumberish,
      _oldestObservationSatisfied: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  cardinalityRequired(overrides?: CallOverrides): Promise<number>;

  getOracleState(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, number, boolean]>;

  getPtToAssetRate(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseCardinalityRequired(overrides?: CallOverrides): Promise<boolean>;

  oldestObservationSatisfied(overrides?: CallOverrides): Promise<boolean>;

  setOracleState(
    _increaseCardinalityRequired: boolean,
    _cardinalityRequired: BigNumberish,
    _oldestObservationSatisfied: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    cardinalityRequired(overrides?: CallOverrides): Promise<number>;

    getOracleState(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, number, boolean]>;

    getPtToAssetRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseCardinalityRequired(overrides?: CallOverrides): Promise<boolean>;

    oldestObservationSatisfied(overrides?: CallOverrides): Promise<boolean>;

    setOracleState(
      _increaseCardinalityRequired: boolean,
      _cardinalityRequired: BigNumberish,
      _oldestObservationSatisfied: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cardinalityRequired(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleState(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPtToAssetRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseCardinalityRequired(overrides?: CallOverrides): Promise<BigNumber>;

    oldestObservationSatisfied(overrides?: CallOverrides): Promise<BigNumber>;

    setOracleState(
      _increaseCardinalityRequired: boolean,
      _cardinalityRequired: BigNumberish,
      _oldestObservationSatisfied: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cardinalityRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleState(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPtToAssetRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseCardinalityRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oldestObservationSatisfied(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOracleState(
      _increaseCardinalityRequired: boolean,
      _cardinalityRequired: BigNumberish,
      _oldestObservationSatisfied: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
