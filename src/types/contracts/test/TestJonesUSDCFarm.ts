/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IJonesUSDCFarm {
  export type PoolInfoStruct = {
    accSushiPerShare: BigNumberish;
    lastRewardTime: BigNumberish;
    allocPoint: BigNumberish;
    depositIncentives: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    accSushiPerShare: BigNumber;
    lastRewardTime: BigNumber;
    allocPoint: BigNumber;
    depositIncentives: BigNumber;
  };

  export type UserInfoStruct = {
    amount: BigNumberish;
    rewardDebt: BigNumberish;
  };

  export type UserInfoStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    rewardDebt: BigNumber;
  };
}

export interface TestJonesUSDCFarmInterface extends utils.Interface {
  functions: {
    "deposit(uint256,uint256,address)": FunctionFragment;
    "harvest(uint256,address)": FunctionFragment;
    "incentiveReceiver()": FunctionFragment;
    "incentivesOn()": FunctionFragment;
    "pendingSushi(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "toggleIncentives()": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "harvest"
      | "incentiveReceiver"
      | "incentivesOn"
      | "pendingSushi"
      | "poolInfo"
      | "toggleIncentives"
      | "userInfo"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentivesOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSushi",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleIncentives",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentiveReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivesOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingSushi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface TestJonesUSDCFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestJonesUSDCFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    harvest(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    incentiveReceiver(overrides?: CallOverrides): Promise<[string]>;

    incentivesOn(overrides?: CallOverrides): Promise<[boolean]>;

    pendingSushi(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IJonesUSDCFarm.PoolInfoStructOutput] & {
        p: IJonesUSDCFarm.PoolInfoStructOutput;
      }
    >;

    toggleIncentives(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [IJonesUSDCFarm.UserInfoStructOutput] & {
        u: IJonesUSDCFarm.UserInfoStructOutput;
      }
    >;

    withdraw(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  deposit(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  harvest(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  incentiveReceiver(overrides?: CallOverrides): Promise<string>;

  incentivesOn(overrides?: CallOverrides): Promise<boolean>;

  pendingSushi(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IJonesUSDCFarm.PoolInfoStructOutput>;

  toggleIncentives(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<IJonesUSDCFarm.UserInfoStructOutput>;

  withdraw(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    incentiveReceiver(overrides?: CallOverrides): Promise<string>;

    incentivesOn(overrides?: CallOverrides): Promise<boolean>;

    pendingSushi(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IJonesUSDCFarm.PoolInfoStructOutput>;

    toggleIncentives(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<IJonesUSDCFarm.UserInfoStructOutput>;

    withdraw(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deposit(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    harvest(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    incentiveReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    incentivesOn(overrides?: CallOverrides): Promise<BigNumber>;

    pendingSushi(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toggleIncentives(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    harvest(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    incentiveReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentivesOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingSushi(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleIncentives(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
