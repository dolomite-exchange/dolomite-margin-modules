/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IDolomiteStructs {
  export type ParStruct = { sign: boolean; value: BigNumberish };

  export type ParStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type WeiStruct = { sign: boolean; value: BigNumberish };

  export type WeiStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };
}

export interface TestTypesInterface extends utils.Interface {
  functions: {
    "TypesParAdd((bool,uint128),(bool,uint128))": FunctionFragment;
    "TypesParEquals((bool,uint128),(bool,uint128))": FunctionFragment;
    "TypesParIsGreaterThanOrEqualToZero((bool,uint128))": FunctionFragment;
    "TypesParIsLessThanZero((bool,uint128))": FunctionFragment;
    "TypesParIsNegative((bool,uint128))": FunctionFragment;
    "TypesParIsPositive((bool,uint128))": FunctionFragment;
    "TypesParIsZero((bool,uint128))": FunctionFragment;
    "TypesParNegative((bool,uint128))": FunctionFragment;
    "TypesParSub((bool,uint128),(bool,uint128))": FunctionFragment;
    "TypesWeiAdd((bool,uint256),(bool,uint256))": FunctionFragment;
    "TypesWeiEquals((bool,uint256),(bool,uint256))": FunctionFragment;
    "TypesWeiIsNegative((bool,uint256))": FunctionFragment;
    "TypesWeiIsPositive((bool,uint256))": FunctionFragment;
    "TypesWeiIsZero((bool,uint256))": FunctionFragment;
    "TypesWeiNegative((bool,uint256))": FunctionFragment;
    "TypesWeiSub((bool,uint256),(bool,uint256))": FunctionFragment;
    "TypesZeroPar()": FunctionFragment;
    "TypesZeroWei()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TypesParAdd"
      | "TypesParEquals"
      | "TypesParIsGreaterThanOrEqualToZero"
      | "TypesParIsLessThanZero"
      | "TypesParIsNegative"
      | "TypesParIsPositive"
      | "TypesParIsZero"
      | "TypesParNegative"
      | "TypesParSub"
      | "TypesWeiAdd"
      | "TypesWeiEquals"
      | "TypesWeiIsNegative"
      | "TypesWeiIsPositive"
      | "TypesWeiIsZero"
      | "TypesWeiNegative"
      | "TypesWeiSub"
      | "TypesZeroPar"
      | "TypesZeroWei"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TypesParAdd",
    values: [IDolomiteStructs.ParStruct, IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesParEquals",
    values: [IDolomiteStructs.ParStruct, IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesParIsGreaterThanOrEqualToZero",
    values: [IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesParIsLessThanZero",
    values: [IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesParIsNegative",
    values: [IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesParIsPositive",
    values: [IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesParIsZero",
    values: [IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesParNegative",
    values: [IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesParSub",
    values: [IDolomiteStructs.ParStruct, IDolomiteStructs.ParStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesWeiAdd",
    values: [IDolomiteStructs.WeiStruct, IDolomiteStructs.WeiStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesWeiEquals",
    values: [IDolomiteStructs.WeiStruct, IDolomiteStructs.WeiStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesWeiIsNegative",
    values: [IDolomiteStructs.WeiStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesWeiIsPositive",
    values: [IDolomiteStructs.WeiStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesWeiIsZero",
    values: [IDolomiteStructs.WeiStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesWeiNegative",
    values: [IDolomiteStructs.WeiStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesWeiSub",
    values: [IDolomiteStructs.WeiStruct, IDolomiteStructs.WeiStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "TypesZeroPar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TypesZeroWei",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TypesParAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesParEquals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesParIsGreaterThanOrEqualToZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesParIsLessThanZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesParIsNegative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesParIsPositive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesParIsZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesParNegative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesParSub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesWeiAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesWeiEquals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesWeiIsNegative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesWeiIsPositive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesWeiIsZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesWeiNegative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesWeiSub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesZeroPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TypesZeroWei",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestTypes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestTypesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TypesParAdd(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.ParStructOutput]>;

    TypesParEquals(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesParIsGreaterThanOrEqualToZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesParIsLessThanZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesParIsNegative(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesParIsPositive(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesParIsZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesParNegative(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.ParStructOutput]>;

    TypesParSub(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.ParStructOutput]>;

    TypesWeiAdd(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.WeiStructOutput]>;

    TypesWeiEquals(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesWeiIsNegative(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesWeiIsPositive(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesWeiIsZero(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TypesWeiNegative(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.WeiStructOutput]>;

    TypesWeiSub(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.WeiStructOutput]>;

    TypesZeroPar(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.ParStructOutput]>;

    TypesZeroWei(
      overrides?: CallOverrides
    ): Promise<[IDolomiteStructs.WeiStructOutput]>;
  };

  TypesParAdd(
    a: IDolomiteStructs.ParStruct,
    b: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.ParStructOutput>;

  TypesParEquals(
    a: IDolomiteStructs.ParStruct,
    b: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesParIsGreaterThanOrEqualToZero(
    a: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesParIsLessThanZero(
    a: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesParIsNegative(
    a: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesParIsPositive(
    a: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesParIsZero(
    a: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesParNegative(
    a: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.ParStructOutput>;

  TypesParSub(
    a: IDolomiteStructs.ParStruct,
    b: IDolomiteStructs.ParStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.ParStructOutput>;

  TypesWeiAdd(
    a: IDolomiteStructs.WeiStruct,
    b: IDolomiteStructs.WeiStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.WeiStructOutput>;

  TypesWeiEquals(
    a: IDolomiteStructs.WeiStruct,
    b: IDolomiteStructs.WeiStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesWeiIsNegative(
    a: IDolomiteStructs.WeiStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesWeiIsPositive(
    a: IDolomiteStructs.WeiStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesWeiIsZero(
    a: IDolomiteStructs.WeiStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  TypesWeiNegative(
    a: IDolomiteStructs.WeiStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.WeiStructOutput>;

  TypesWeiSub(
    a: IDolomiteStructs.WeiStruct,
    b: IDolomiteStructs.WeiStruct,
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.WeiStructOutput>;

  TypesZeroPar(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.ParStructOutput>;

  TypesZeroWei(
    overrides?: CallOverrides
  ): Promise<IDolomiteStructs.WeiStructOutput>;

  callStatic: {
    TypesParAdd(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.ParStructOutput>;

    TypesParEquals(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesParIsGreaterThanOrEqualToZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesParIsLessThanZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesParIsNegative(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesParIsPositive(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesParIsZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesParNegative(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.ParStructOutput>;

    TypesParSub(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.ParStructOutput>;

    TypesWeiAdd(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.WeiStructOutput>;

    TypesWeiEquals(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesWeiIsNegative(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesWeiIsPositive(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesWeiIsZero(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TypesWeiNegative(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.WeiStructOutput>;

    TypesWeiSub(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.WeiStructOutput>;

    TypesZeroPar(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.ParStructOutput>;

    TypesZeroWei(
      overrides?: CallOverrides
    ): Promise<IDolomiteStructs.WeiStructOutput>;
  };

  filters: {};

  estimateGas: {
    TypesParAdd(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesParEquals(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesParIsGreaterThanOrEqualToZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesParIsLessThanZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesParIsNegative(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesParIsPositive(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesParIsZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesParNegative(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesParSub(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesWeiAdd(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesWeiEquals(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesWeiIsNegative(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesWeiIsPositive(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesWeiIsZero(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesWeiNegative(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesWeiSub(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TypesZeroPar(overrides?: CallOverrides): Promise<BigNumber>;

    TypesZeroWei(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TypesParAdd(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesParEquals(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesParIsGreaterThanOrEqualToZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesParIsLessThanZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesParIsNegative(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesParIsPositive(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesParIsZero(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesParNegative(
      a: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesParSub(
      a: IDolomiteStructs.ParStruct,
      b: IDolomiteStructs.ParStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesWeiAdd(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesWeiEquals(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesWeiIsNegative(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesWeiIsPositive(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesWeiIsZero(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesWeiNegative(
      a: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesWeiSub(
      a: IDolomiteStructs.WeiStruct,
      b: IDolomiteStructs.WeiStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TypesZeroPar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TypesZeroWei(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
